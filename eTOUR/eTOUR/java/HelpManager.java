package unisa.gps.etour.gui;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.util.HashMap;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.net.URISyntaxException;
import javax.swing.JComponent;
import javax.swing.text.JTextComponent;

/**
 * This class realizes the mechanism of sensitive help
 * Context.
 *
 * @Version 0.2
 * @Author Mario Gallo
 *
 * Â© 2007 eTour Project - Copyright by DMI SE @ SA Lab --
 * University of Salerno
 */
public class HelpManager extends MouseAdapter {
    private HashMap<String, String> dictionary;
    private JTextComponent destination;
    private String previousMessage;

    /**
     * <p>The constructor creates a new instance of the class for the
     * Managing the online help files from contentente
     * The guide itself and the component in which it appear.</p>
     *
     * @param pPercorso String - the path of the help file.
     * @param pComponent JTextComponent - the component in which to display
     * Driving.
     * @throws FileNotFoundException - if the help file is not specified
     * Found.
     */
    public HelpManager(String pPercorso, JTextComponent pComponent) throws FileNotFoundException {
        dictionary = new HashMap<String, String>();
        destination = pComponent;
        File afil = null;
        try {
            afil = new File(getClass().getResource(pPercorso).toURI());
        }
        catch (URISyntaxException ex) {
            ex.printStackTrace();
        }
        Scanner scan = new Scanner(new BufferedReader(new FileReader(afil)));
        StringTokenizer tokenizer;
        while (scan.hasNext()) {
            tokenizer = new StringTokenizer(scan.nextLine(), "##");
            dictionary.put(tokenizer.nextToken(), tokenizer.nextToken());
        }

        scan.close();
    }

    /**
     * This method handles the event when the pointer should
     * Mouse enters the component.
     *
     * @param pMouseEnteredEvent MouseEvent - The event generated by the mouse.
     */
    public void mouseEntered(MouseEvent pMouseEnteredEvent) {
        previousMessage = destination.getText();
        JComponent component = (JComponent) pMouseEnteredEvent.getComponent();
        String help = dictionary.get(component.getName());
        destination.setText(help);
        destination.repaint();
    }

    /**
     * This method handles the event when the pointer should
     * Mouse goes out of a component.
     *
     * @param pMouseExitedEvent MouseEvent - The event generated by the mouse.
     */
    public void mouseExited(MouseEvent pMouseExitedEvent) {
        destination.setText(previousMessage);
        destination.repaint();
    }
}