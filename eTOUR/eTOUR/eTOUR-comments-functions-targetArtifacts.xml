<?xml version="1.0" encoding="utf-8"?>
<artifacts_collection>
  <collection_info>
    <id>CC</id>
    <name>eTOUR Target Artifacts</name>
    <version>1.1</version>
    <description>Class code headers and comments</description>
  </collection_info>
  <artifacts>
    <artifact>
      <id>CC_Autenticazione</id>
      <content>package unisa.gps.etour.control.GestioneUtentiRegistrati;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.repository.DBTurista;
import unisa.gps.etour.util.ControlloDati;
import unisa.gps.etour.util.MessaggiErrore;

public class Authentication extends UnicastRemoteObject implements IAutenticazione

public class Authentication extends UnicastRemoteObject implements IAutenticazione
(

private static final long serialVersionUID = 0L;

public Authentication () throws RemoteException

public int login (String pUsername, String pPassword, byte pTipologiaUtente)
throws RemoteException

// Objects to manipulate data Turista
// Check if the string username and password
// If the type is Turista
// Invoke the method to obtain the Bean del Turista
// Given the username
// Check that the Bean is not null and
// Passwords match
// If the type and eateries
// Not implemented was the operational point of
// Refreshment
// If not match any known type
// If the data are incorrect returns -1</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_Banner</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt .*;
import java.awt.event .*;
import java.io.FileNotFoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing .*;
import java.util .*;
import javax.swing.tree .*;
import javax.swing.border .*;
import unisa.gps.etour.gui.operatoreagenzia.BannerDialog;
import unisa.gps.etour.gui.operatoreagenzia.Home;
import unisa.gps.etour.gui.operatoreagenzia.TagPanel;
import unisa.gps.etour.gui.operatoreagenzia.tables.BannerNode;
import unisa.gps.etour.gui.operatoreagenzia.tables.PRNode;
import unisa.gps.etour.bean.BeanBanner;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.control.GestioneAdvertisement.IGestioneAdvertisementAgenzia;
import unisa.gps.etour.control.GestionePuntiDiRistoro.IGestionePuntiDiRistoroAgenzia;
import unisa.gps.etour.control.GestioneTag.IGestioneTagComune;
import unisa.gps.etour.gui.DeskManager;
import unisa.gps.etour.gui.HelpManager;
import unisa.gps.etour.gui.operatoreagenzia.tables.BannerRenderer;

public class JInternalFrame extends Banner

public class JInternalFrame extends Banner
(

private JPanel jContentPane = null;
private JPanel rightPanel = null;
Private JToolBar bannerToolbar = null;
private JButton btnInserisci = null;
private JButton btnSostituisci = null;
private JButton btnElimina = null;
private JScrollPane JScrollPane = null;
private JPanel helpPanel = null;
private JTextPane textGuida = null;
Private TagPanel panelTag = null;
private JButton btnRicerca = null;
private JButton btnAzzera = null;
private JPanel panelSearch = null;
private JTextField nomePR = null;
private JTree treeBanner = null;
Private JDesktopPane JDesktopPane;
Private HelpManager bannerHelp;
protected DeskManager desktopManager;
protected IGestionePuntiDiRistoroAgenzia gestionePuntiRistoro;
protected IGestioneAdvertisementAgenzia gestioneBanner;
protected IGestioneTagComune tags;

/**
* This &amp;grave; the default constructor.
*/
public Banner ()

/** Inclusion of the frame on the desktop retrieves the bread
* Link to the desktop pane.
*/

public void internalFrameOpened (InternalFrameEvent pEvent)

/** Two exceptions: RemoteException and NotBoundException. The
* Result is the same. The management is not operable and
* After the error message window closes.
*/
catch (Exception ex)
(
JLabel error = new JLabel (
&quot;&lt;html&gt; &lt;h2&gt; Unable to communicate with the server eTour. &lt;/ h2&gt;&quot;
+ &quot;&lt;h3&gt; &lt;u&gt; The dialog management request is closed. &lt;/ U&gt; &lt;/ h3&gt;&quot;
+ &quot;&lt;p&gt; &lt;b&gt; Possible Causes: &lt;/ b&gt;&quot;
+ &quot;&lt;ul&gt; &lt;li&gt; No connection to the network. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; inactive. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; clogged. &lt;/ Li&gt; &lt;/ ul&gt;&quot;
+ &quot;&lt;p&gt; Please try again later. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; If the error persists, please contact technical support. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; We apologize for the inconvenience. &lt;/ Html&gt;&quot;);
Err = new ImageIcon ImageIcon (getClass (). GetResource (
Home.URL_IMAGES + &quot;error48.png&quot;));
JOptionPane.showMessageDialog (JDesktopPane, error,
&quot;Error!&quot; JOptionPane.ERROR_MESSAGE, err);
frame.dispose ();
)
)
));
)

/**
* This method initializes the content pane.
*
* @ Return javax.swing.JPanel - the content pane.
*/

private JPanel getJContentPane ()

/**
* This method initializes the toolbar to the functions of management
* Banner.
*
* @ Return javax.swing.JToolBar - the toolbar.
*/
Private JToolBar getBannerToolbar ()
(
if (null == bannerToolbar)
(
bannerToolbar JToolBar = new ();
bannerToolbar.setLayout (null);
bannerToolbar.setPreferredSize (new Dimension (1, 50));
bannerToolbar.setFloatable (false);
bannerToolbar.add (getBtnInserisci ());
bannerToolbar.add (getBtnSostituisci ());
bannerToolbar.add (getBtnElimina ());
)
bannerToolbar return;
)

/**
* This method initializes the button to insert a banner.
*
* @ Return javax.swing.JButton - the button for the insertion.
*/

private JButton getBtnInserisci ()

public void actionPerformed (ActionEvent arg0)

/**
* This method initializes the button for editing a banner.
*
* @ Return javax.swing.JButton - the button for the change.
*/

private JButton getBtnSostituisci ()

public void actionPerformed (ActionEvent arg0)

/**
* This method initializes the delete button for a banner.
*
* @ Return javax.swing.JButton - the delete button for.
*/

private JButton getBtnElimina ()

public void actionPerformed (ActionEvent arg0)

/**
* This method creates the tree starting from the information contained in the two
* ArrayList of bean.
*
* @ Param ArrayList PPR &lt;BeanPuntoDiRistoro&gt; - the array of places to eat.
* @ Param pBanner ArrayList &lt;BeanBanner&gt; - the array of banners associated.
*/

private void createTree ()

/**
* This method initializes the tree where it displays the banner.
*
* @ Return javax.swing.JTree
*/

private JScrollPane getTreeBanner ()

public void ValueChanged (TreeSelectionEvent s)

/**
* This method initializes the right side panel.
*
* @ Return javax.swing.JPanel - the right panel.
*/

private JPanel getRightPanel ()

/**
* This method initializes the panel that contains the online help.
*
* @ Return javax.swing.JPanel - the panel for the guide.
*/

private JPanel getHelpPanel ()

/**
* This method initializes the panel for the detection of points
* Refreshments.
*
* @ Return javax.swing.JPanel - the panel for research.
*/

private JPanel getSearchPanel ()

/**
* This method initializes the button for the submission of the form
* Search for a refreshment.
*
* @ Return javax.swing.JButton - the search button.
*/

private JButton getBtnRicerca ()

/**
* This method initializes the button to reset the fields of
* Search Form for a refreshment.
*
* @ Return javax.swing.JButton - the Reset button.
*/

private JButton getBtnAzzera ()

public void actionPerformed (ActionEvent arg0)

/**
* This method opens the dialog box for entering a new
* Banner or editing a banner selected.
*
* @ Param pSelectedNode DefaultMutableTreeNode - the selected node.
*/

private void OpenDialog (DefaultMutableTreeNode pSelectedNode)

public void internalFrameClosed (InternalFrameEvent s)

public void actionPerformed (ActionEvent arg0)

public void actionPerformed (ActionEvent arg0)

public void actionPerformed (ActionEvent arg0)

private void caricaTags ()

// Setting up dell'help manager for cultural.
// Setting up of remote objects for the management of cultural heritage.
// Load data.
// Create the root
// For each refreshment dell'arraylist calls the method get
// Banner.
// This class intercepts mouse events and then
// Makes the frame below blocked.
// Construction of the dialog
// Replace
// Inserting
// If an error displays an error message.</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BannerDialog</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt .*;
import java.awt.event .*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing .*;
import javax.swing.filechooser.FileFilter;
import javax.swing.border .*;
import unisa.gps.etour.gui.operatoreagenzia.Home;

class realizes

/**
* This class realizes the panel for the dialog for entering a
* New banner or a banner for replacing selected.
*
* @ Version 1.0
* @ Author Mario Gallo
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class JPanel extends BannerDialog
(
private final static Dimension bannerSize = new Dimension (140, 40)

/**
* This is the default constructor.
*/
public BannerDialog ()
(
super (null);
this = this;
setPreferredSize (new Dimension (420, 160));
preview = new JLabel ();
anteprima.setBounds (new Rectangle (40, 20, 250, 60));
anteprima.setBorder (BorderFactory.createTitledBorder (BorderFactory
. createLineBorder (new Color (51, 102, 255), 3),
Preview Banner &quot;, TitledBorder.DEFAULT_JUSTIFICATION,
TitledBorder.DEFAULT_POSITION,
new Font ( &quot;Dialog&quot;, Font.BOLD, 12), new Color (0, 102, 204)));
btnCarica = new JButton ();
btnCarica.setBounds (new Rectangle (320, 30, 50, 40));
btnCarica.setIcon (new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;ApriFile.png &quot;)));
btnCarica.addActionListener (new ActionListener ()
(

public void actionPerformed (ActionEvent arg0)
(
File f = apriFileDialog ();

if (f == null)
(
return;
)

BufferedImage img = null;
TRY
(
img = ImageIO.read (f);
if (img.getWidth ()&gt; bannerSize.width
| | Img.getHeight ()&gt; bannerSize.height)
(
img.getSubimage img = (0, 0, bannerSize.width,
bannerSize.height);
)
)
catch (Exception e)
(
e.printStackTrace ();
)
N = new ImageIcon ImageIcon (img);
anteprima.setIcon (n);
anteprima.repaint ();
)
));

JLabel txtAttenzione = new JLabel ( &quot;Warning!&quot;);
txtAttenzione.setIcon (new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;warning16.png &quot;)));
txtAttenzione.setBounds (10, 85, 100, 30);
JLabel txtTest = new JLabel (
&quot;&lt;html&gt; &lt;ul&gt; &lt;li&gt; image for the banner can not exceed &lt;b&gt; &lt;font color=\&quot;red\&quot;&gt;&quot;
+ BannerSize.width
+ &quot;X&quot;
+ BannerSize.height
+ &quot;&lt;/ Font&gt; &lt;/ b&gt; pixels.&quot;
+ &quot;&lt;li&gt; Images of magnitude larger will be resized. &lt;/ Ul&gt; &lt;/ html&gt;&quot;);
txtTesto.setBounds (0, 90, 420, 80);
add (txtTest, null);
add (txtAttenzione, null);
add (prev, null);
add (btnCarica, null);

)

/**
* This method initializes the image contained in the preview.
*
* @ Param pBanner ImageIcon - an image of a banner.
*/

public void setSelectedBanner (ImageIcon pBanner)

/**
* This method returns the image contained in the preview.
*
* @ Return ImageIcon - the image of the banner.
*/

public ImageIcon getSelectedBanner ()

/**
* This method opens the dialog for selecting a file from disk.
*
* @ Return
* &lt;ul&gt;
* &lt;li&gt; Files - the selected file.
* &lt;li&gt; Null - if you have not selected any files.
* &lt;/ Ul&gt;
*/

private File apriFileDialog ()

public boolean accept (File arg0)

public String getDescription ()

// File Filter for the window to open the file.</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BannerNode</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables;

import javax.swing.ImageIcon;
import javax.swing.tree.DefaultMutableTreeNode;

class creates

/**
* This class creates a node in a JTree to store
* Information about a banner.
*
* @ Version 1.0
* @ Author Mario Gallo
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class DefaultMutableTreeNode extends BannerNode
(
private int id;

/**
* This is the default constructor.
*
*/
public BannerNode ()

/**
* Create a node with the image of the banner and
* Your id supplied as parameters.
*
* @ Param pBanner Imagelcon - the image of the banner.
PID * @ param int - the id of the banner.
* @ Throws IllegalArgumentException - if the image provided as input is invalid.
*
*/
public BannerNode (ImageIcon pBanner, int pid) throws IllegalArgumentException
(
super ();
if (null == pBanner)
(
throw new IllegalArgumentException ( &quot;Image is invalid.&quot;);
)
setUserObject (pBanner);
id = pid;
)

/**
*
* Returns the node type PRNode father.
*
* @ Return PRNode - the parent node.
*
*/

public PRNode getParent ()

/**
*
* Returns the id of the banner for which information
* Are stored in this node.
*
* @ Return int - the id of the banner.
*
*/

public int getID ()

/**
*
* Stores the id of the banner supplied input.
*
* @ Param int PID - an ID of a banner.
*
*/

public void setID (int pid)

/**
*
* Returns the banner image.
*
* @ Return ImageIcon - the image.
*/

public ImageIcon getBanner ()

/**
*
* Save the image provided as input.
*
* @ Param pImmagine Imagelcon - the image to be stored.
* @ Throws IllegalArgumentException - if the supplied parameter is null.
*/

public void setBanner (ImageIcon pImmagine) throws IllegalArgumentException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BannerRenderer</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.awt.Color;
import java.awt.Component;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;

public class BannerRenderer extends DefaultTreeCellRenderer

public class BannerRenderer extends DefaultTreeCellRenderer
(

public Component getTreeCellRendererComponent (pTree JTree, Object pValue,
pSelected boolean, boolean pExpanded, boolean pLeaf, int prow,
boolean pHasFocus)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanBanner</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;

public class BeanBanner implements Serializable

/**
* Bean which contains data on the Banner
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

import java.io.Serializable;

public class BeanBanner implements Serializable
(
private static final long serialVersionUID =-872783211721655763L;
private int id;
private int idPuntoDiRistoro;
private String filepath;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param pPercorsoFile
* @ Param pidPuntoDiRistoro
*/

public BeanBanner (int pid, String pPercorsoFile, int pidPuntoDiRistoro)
(
setId (PID);
setPercorsoFile (pPercorsoFile);
setIdPuntoDiRistoro (pidPuntoDiRistoro);
)

/**
* Empty Constructor
*
*/
public BeanBanner ()
(

)

/**
* Returns the value of FilePath
*
* @ Return value of FilePath.
*/

public String getPercorsoFile ()

/**
* Sets the new value of filepath
*
* @ Param pPercorsoFile New value filepath.
*/

public void setPercorsoFile (String pPercorsoFile)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Returns the value of idPuntoDiRistoro
*
* @ Return value idPuntoDiRistoro.
*/

public int getIdPuntoDiRistoro ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)

/**
* Sets the new value of idPuntoDiRistoro
*
* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.
*/

public void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanBeneCulturale</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;
import java.util.Date;
import unisa.gps.etour.util.Punto3D;

public class BeanBeneCulturale implements Serializable

/**
* Bean containing information relating to a cultural heritage
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

import java.io.Serializable;
import java.util.Date;

import unisa.gps.etour.util.Punto3D;

public class BeanBeneCulturale implements Serializable
(

private static final long serialVersionUID =-460705346474984466L;

private int id;
private int numeroVoti;
private String name;
private String city;
private String phone;
private String description;
private String location;
private String street;
private String cap;
private String province;
private String giornoChiusura;
Private Punto3D position;
private Date orarioApertura;
private Date orarioChiusura;
private double costoBiglietto;
private double mediaVoti;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param pNumeroVoti
* @ Param Pnom
* @ Param pCitta
* @ Param pTelefono
* @ Param pDescrizione
* @ Param pLocalita
* @ Param pVia
* @ Param pcap
* @ Param pProvincia
* @ Param pPosizione
* @ Param pOrarioApertura
* @ Param pOrarioChiusura
* @ Param pGiornoChiusura
* @ Param pCostoBiglietto
* @ Param pMediaVoti
*/
public BeanBeneCulturale (int pid, int pNumeroVoti, String Pnom,
PCitta String, String pTelefono, String pDescrizione,
PLocalita String, String pVia, pcap String, String pProvincia,
Punto3D pPosizione, Date pOrarioApertura, Date pOrarioChiusura,
String pGiornoChiusura, double pCostoBiglietto, double pMediaVoti)
(
setId (PID);
setNumeroVoti (pNumeroVoti);
setNome (Phnom);
setCitta (pCitta);
setTelefono (pTelefono);
setDescrizione (pDescrizione);
setlocale (pLocalita);
setvar (pVia);
setCap (PCAP);
setProvincia (pProvincia);
setPosizione (pPosizione);
setOrarioApertura (pOrarioApertura);
setOrarioChiusura (pOrarioChiusura);
setGiornoChiusura (pGiornoChiusura);
setCostoBiglietto (pCostoBiglietto);
setMediaVoti (pMediaVoti);
)

/**
* Empty Constructor
*/
public BeanBeneCulturale ()
(

)

/**
* Returns the value of giornoChiusura
*
* @ Return value giornoChiusura.
*/

public String getGiornoChiusura ()

/**
* Sets the new value of giornoChiusura
*
* @ Param value pGiornoChiusura New giornoChiusura.
*/

public void setGiornoChiusura (String pGiornoChiusura)

/**
* Returns the value of cap
*
* @ Return value cap.
*/

public String getCap ()

/**
* Sets the new value of cap
*
New pcap * @ param value cap.
*/

public void setCap (String PCAP)

/**
* Returns the value of city
*
* @ Return Value of city.
*/

public String getCitta ()

/**
* Sets the new value of city
*
* @ Param value New pCitta city.
*/

public void setCitta (String pCitta)

/**
* Returns the value of costoBiglietto
*
* @ Return value costoBiglietto.
*/

public double getCostoBiglietto ()

/**
* Sets the new value of costoBiglietto
*
* @ Param value pCostoBiglietto New costoBiglietto.
*/

public void setCostoBiglietto (double pCostoBiglietto)

/**
* Returns the value of description
*
* @ Return value of description.
*/

public String getDescrizione ()

/**
* Sets the new value of description
*
* @ Param pDescrizione New value of description.
*/

public void setDescrizione (String pDescrizione)

/**
* Returns the value of location
*
* @ Return locale values.
*/

public String getLocal ()

/**
* Sets the new value of location
*
* @ Param pLocalita New locale values.
*/

public void setLocale (String pLocalita)

/**
* Returns the value of mediaVoti
*
* @ Return value mediaVoti.
*/

public double getMediaVoti ()

/**
* Sets the new value of mediaVoti
*
* @ Param value pMediaVoti New mediaVoti.
*/

public void setMediaVoti (double pMediaVoti)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getName ()

/**
* Sets the new name value
*
* @ Param name New value Pnom.
*/

public void setNome (String Pnom)

/**
* Returns the value of numeroVoti
*
* @ Return value numeroVoti.
*/

public int getNumeroVoti ()

/**
* Sets the new value of numeroVoti
*
* @ Param value pNumeroVoti New numeroVoti.
*/

public void setNumeroVoti (int pNumeroVoti)

/**
* Returns the value of orarioApertura
*
* @ Return value orarioApertura.
*/

public Date getOrarioApertura ()

/**
* Sets the new value of orarioApertura
*
* @ Param value pString New orarioApertura.
*/

public void setOrarioApertura (Date pString)

/**
* Returns the value of orarioChiusura
*
* @ Return value orarioChiusura.
*/

public Date getOrarioChiusura ()

/**
* Sets the new value of orarioChiusura
*
* @ Param value pOrarioChiusura New orarioChiusura.
*/

public void setOrarioChiusura (Date pOrarioChiusura)

/**
* Returns the value of position
*
* @ Return value of position.
*/

public Punto3D getPosizione ()

/**
* Sets the new position value
*
* @ Param pPosizione New position value.
*/

public void setPosizione (Punto3D pPosizione)

/**
* Returns the value of the province
*
* @ Return value of the province.
*/

public String getProvincia ()

/**
* Sets the new value of the province
*
* @ Param pProvincia New value for the province.
*/

public void setProvincia (String pProvincia)

/**
* Returns the value of telephone
*
* @ Return Value of the phone.
*/

public String getTelefono ()

/**
* Sets the new value of telephone
*
* @ Param value New pTelefono phone.
*/

public void setTelefono (String pTelefono)

/**
* Returns the value of street
*
* @ Return value on.
*/

public String getVar ()

/**
* Sets the new value via
*
* @ Param value New pVia on.
*/

public void setvar (String pVia)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanConvenzione</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;
import java.util.Date;

public class BeanConvenzione implements Serializable

/**
* Bean containing information relating to a Convention
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanConvenzione implements Serializable
(

private static final long serialVersionUID =-3255500940680220001L;
private int id;
private int maxBanner;
private Date StartDate;
private Date EndDate;
private double price;
private boolean active;
private int idPuntoDiRistoro;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param pMaxBanner
* @ Param pDataInizio
* @ Param pDataFine
* @ Param pPrezzo
* @ Param pacts
* @ Param pidPuntoDiRistoro
*/
public BeanConvenzione (int pid, int pMaxBanner, Date pDataInizio,
Date pDataFine, double pPrezzo, boolean terms,
int pidPuntoDiRistoro)

/**
* Empty Constructor
*
*/
public BeanConvenzione ()
(

)

/**
* Returns the value of active
*
* @ Return value of assets.
*/

public boolean isAttiva ()

/**
* Sets the new value of active
*
* @ Param new value terms of assets.
*/

public void setAttiva (boolean Patti)

/**
* Returns the value of EndDate
*
* @ Return Value EndDate.
*/

public Date getDataFine ()

/**
* Sets the new value for EndDate
*
* @ Param pDataFine New value for EndDate.
*/

public void setDataFine (Date pDataFine)

/**
* Returns the value of StartDate
*
* @ Return value StartDate.
*/

public Date getDataInizio ()

/**
* Sets the new value of StartDate
*
* @ Param new value pDataInizio StartDate.
*/

public void setDataInizio (Date pDataInizio)

/**
* Returns the value of maxBanner
*
* @ Return value maxBanner.
*/

public int getMaxBanner ()

/**
* Sets the new value of maxBanner
*
* @ Param value pMaxBanner New maxBanner.
*/

public void setMaxBanner (int pMaxBanner)

/**
* Returns the value of money
*
* @ Return value price.
*/

public double getPrezzo ()

/**
* Sets the new value of money
*
* @ Param pPrezzo New value for money.
*/

public void setPrezzo (double pPrezzo)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Returns the value of idPuntoDiRistoro
*
* @ Return value idPuntoDiRistoro.
*/

public int getIdPuntoDiRistoro ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)

/**
* Sets the new value of idPuntoDiRistoro
*
* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.
*/

public void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanMenu</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;

public class BeanMenu implements Serializable

/**
* Bean containing information relating to a Menu
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanMenu implements Serializable
(
private static final long serialVersionUID =-3112032222839565409L;
private int id;
private String day;
private int idPuntoDiRistoro;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param pGiorno
* @ Param pIdPuntoDiRistoro
*/
public BeanMenu (int pid, String pGiorno, int pIdPuntoDiRistoro)

/**
* Empty Constructor
*/
public BeanMenu ()
(

)

/**
* Returns the value of days
*
* @ Return Value of the day.
*/

public String getGiorno ()

/**
* Sets the new value of days
*
* @ Param value New pGiorno day.
*/

public void setGiorno (String pGiorno)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Returns the value of idPuntoDiRistoro
*
* @ Return value idPuntoDiRistoro.
*/

public int getIdPuntoDiRistoro ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)

/**
* Sets the new value of idPuntoDiRistoro
*
* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.
*/

public void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanNews</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;
import java.util.Date;

public class BeanNews implements Serializable

/**
* Bean containing information relating to the News
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

import java.io.Serializable;
import java.util.Date;

public class BeanNews implements Serializable
(
private String news;
private Date dataPubblicazione;
private Date dataScadenza;
private int priority;
private int id;
private static final long serialVersionUID =-6249491056436689386L;

/**
* Parameterized constructor
*
* @ Param Pnews
* @ Param pDataPubblicazione
* @ Param pDataScadenza
* @ Param pPriorita
* @ Param pId
*/
public BeanNews (String Pnews, Date pDataPubblicazione, Date pDataScadenza,
pPriorita int, int pid)
(
setNews (Pnews);
setDataPubblicazione (pDataPubblicazione);
setDataScadenza (pDataScadenza);
setPriorita (pPriorita);
setId (PID);
)

/**
* Empty Constructor
*
*/
public BeanNews ()
(

)

/**
* Returns the value of dataPubblicazione
*
* @ Return value dataPubblicazione.
*/

public Date getDataPubblicazione ()

/**
* Sets the new value of dataPubblicazione
*
* @ Param value pDataPubblicazione New dataPubblicazione.
*/

public void setDataPubblicazione (Date pDataPubblicazione)

/**
* Returns the value of dataScadenza
*
* @ Return value dataScadenza.
*/

public Date getDataScadenza ()

/**
* Sets the new value of dataScadenza
*
* @ Param value pDataScadenza New dataScadenza.
*/

public void setDataScadenza (Date pDataScadenza)

/**
* Returns the value of news
*
* @ Return value of news.
*/

public String getNews ()

/**
* Sets the new value of news
*
* @ Param value New Pnews news.
*/

public void setNews (String Pnews)

/**
* Returns the priority value
*
* @ Return the priority value.
*/

public int getPriorita ()

/**
* Set the new priority value
*
* @ Param pPriorita New priority value.
*/

public void setPriorita (int pPriorita)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanOperatoreAgenzia</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;

public class BeanOperatoreAgenzia implements Serializable

/**
* Bean containing information relating to an Agency Operator
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanOperatoreAgenzia implements Serializable
(

/**
*
*/
private static final long serialVersionUID =-3489147679484477440L;
private int id;
private String username;
private String name;
private String name;
private String password;

/**
* Parameterized constructor
*
* @ Param pid
* @ Param pUsername
* @ Param Pnom
* @ Param pCognome
* @ Param pPassword
*/
public BeanOperatoreAgenzia (int pid, String pUsername, String Pnom,
PCognome String, String pPassword)

/**
* Empty Constructor
*/
public BeanOperatoreAgenzia ()
(

)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getCognome ()

/**
* Sets the new value of name
*
* @ Param value New pCognome surname.
*/

public void setCognome (String pCognome)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getName ()

/**
* Sets the new name value
*
* @ Param name New value Pnom.
*/

public void setNome (String Pnom)

/**
* Returns the value of password
*
* @ Return value of password.
*/

public String getPassword ()

/**
* Sets the new password value
*
* @ Param pPassword new password value.
*/

public void setPassword (String pPassword)

/**
* Returns the value of username
*
* @ Return value of username.
*/

public String GetUserName ()

/**
* Sets the new value of username
*
* @ Param pUsername New value for username.
*/

public void setUsername (String pUsername)

/**
* Sets the new value of id
*
* @ Param new value of id pid.
*/

public void setId (int pid)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanOperatorePuntoDiRistoro</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;

public class BeanOperatorePuntoDiRistoro implements Serializable

/**
* Bean containing information relating to food
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanOperatorePuntoDiRistoro implements Serializable
(
private int id;
private String name;
private String name;
private String username;
private String password;
private String email;
private int idPuntoDiRistoro;
private static final long serialVersionUID =-6485826396352557404L;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param Pnom
* @ Param pCognome
* @ Param pUsername
* @ Param pPassword
* @ Param pEmail
* @ Param pIdPuntoDiRistoro
*/
public BeanOperatorePuntoDiRistoro (int pid, Phnom String, String pCognome,
PUsername String, String pPassword, String pEmail,
int pIdPuntoDiRistoro)

/**
* Empty Constructor
*/
public BeanOperatorePuntoDiRistoro ()
(

)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getCognome ()

/**
* Sets the new value of name
*
* @ Param value New pCognome surname.
*/

public void setCognome (String pCognome)

/**
* Returns the value of email
*
* @ Return value of email.
*/

public String getEmail ()

/**
* Sets the new value of email
*
* @ Param pEmail New value of email.
*/

public void setEmail (String pEmail)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getName ()

/**
* Sets the new name value
*
* @ Param name New value Pnom.
*/

public void setNome (String Pnom)

/**
* Returns the value of password
*
* @ Return value of password.
*/

public String getPassword ()

/**
* Sets the new password value
*
* @ Param pPassword new password value.
*/

public void setPassword (String pPassword)

/**
* Returns the value of username
*
* @ Return value of username.
*/

public String GetUserName ()

/**
* Sets the new value of username
*
* @ Param pUsername New value for username.
*/

public void setUsername (String pUsername)

/**
* Returns the value of idPuntoDiRistoro
*
* @ Return value idPuntoDiRistoro.
*/

public int getIdPuntoDiRistoro ()

/**
* Sets the new value of idPuntoDiRistoro
*
* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.
*/

public void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanPiatto</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;

public class BeanPiatto implements Serializable

/**
* Bean containing information relating to food
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanPiatto implements Serializable
(
private int id;
private String name;
private double price;
private int idMenu;
private static final long serialVersionUID =-3775462843748984482L;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param Pnom
* @ Param pPrezzo
* @ Param pIdMenu
*/
public BeanPiatto (int pid, String Pnom, double pPrezzo, int pIdMenu)

/**
* Empty Constructor
*/
public BeanPiatto ()
(

)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getName ()

/**
* Sets the new name value
*
* @ Param name New value Pnom.
*/

public void setNome (String Pnom)

/**
* Returns the value of money
*
* @ Return value price.
*/

public double getPrezzo ()

/**
* Sets the new value of money
*
* @ Param pPrezzo New value for money.
*/

public void setPrezzo (double pPrezzo)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Returns the value of idMenu
*
* @ Return value idMenu.
*/

public int getIdMenu ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)

/**
* Sets the new value of idMenu
*
* @ Param value pIdMenu New idMenu.
*/

public void setIdMenu (int pIdMenu)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanPreferenzaDiRicerca</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;

public class BeanPreferenzaDiRicerca implements Serializable

/**
* Bean which contains data search preferences
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanPreferenzaDiRicerca implements Serializable
(
private static final long serialVersionUID = 7576354037868937929L;
private int id;
private String name;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param Pnom
*/
public BeanPreferenzaDiRicerca (int pid, String Pnom)

/**
* Empty Constructor
*
*/
public BeanPreferenzaDiRicerca ()
(

)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getName ()

/**
* Sets the new name value
*
* @ Param name New value Pnom.
*/

public void setNome (String Pnom)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanPreferenzeGeneriche</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;

public class BeanPreferenzeGeneriche implements Serializable

/**
* Bean containing information relating to the General Preferences
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

import java.io.Serializable;

public class BeanPreferenzeGeneriche implements Serializable
(
private static final long serialVersionUID = 6805656922951334071L;
private int id;
private int dimensioneFont;
private String font;
private String subject;
private int idTurista;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param pDimensioneFont
* @ Param pFont
* @ Param pTema
* @ Param pIdTurista
*/
public BeanPreferenzeGeneriche (int pid, int pDimensioneFont, String pFont,
PTema String, int pIdTurista)
(
setId (PID);
setDimensioneFont (pDimensioneFont);
setFont (pFont);
September (pTema);
setIdTurista (pIdTurista);
)

/**
* Empty Constructor
*/
public BeanPreferenzeGeneriche ()
(

)

/**
* Returns the value of dimensioneFont
*
* @ Return value dimensioneFont.
*/

public int getDimensioneFont ()

/**
* Sets the new value of dimensioneFont
*
* @ Param value pDimensioneFont New dimensioneFont.
*/

public void setDimensioneFont (int pDimensioneFont)

/**
* Returns the value of font
*
* @ Return Value of fonts.
*/

public String getFont ()

/**
* Sets the new value of font
*
New value * @ param pFont font.
*/

public void setFont (String pFont)

/**
* Returns the value of the subject
*
* @ Return value issue.
*/

public String getTema ()

/**
* Sets the new value of the subject
*
* @ Param value New pTema theme.
*/

public void September (String pTema)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Returns the value of usernameTurista
*
* @ Return value usernameTurista.
*/

public int getIdTurista ()

/**
* Sets the new value of usernameTurista
*
* @ Param value pIdTurista New usernameTurista.
*/

public void setIdTurista (int pIdTurista)

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanPuntoDiRistoro</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;
import java.util.Date;
import unisa.gps.etour.util.Punto3D;

public class BeanPuntoDiRistoro implements Serializable

/**
* Bean for the storage of data refreshment
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanPuntoDiRistoro implements Serializable
(
private static final long serialVersionUID = 8417686685147484931L;
private int id;
private int numeroVoti;
private double mediaVoti;
private String name;
private String description;
private String phone;
private String location;
private String city;
private String street;
private String cap;
private String province;
private String PartitaIva;
Private Punto3D position;
private Date orarioApertura;
private Date orarioChiusura;
private String giornoChiusura;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param pNumeroVoti
* @ Param pMediaVoti
* @ Param Pnom
* @ Param pDescrizione
* @ Param pTelefono
* @ Param pLocalita
* @ Param pCitta
* @ Param pVia
* @ Param pcap
* @ Param pProvincia
* @ Param pPartitaIva
* @ Param pPosizione
* @ Param pOrarioApertura
* @ Param pOrarioChiusura
* @ Param pGiornoChiusura
*/
public BeanPuntoDiRistoro (int pid, int pNumeroVoti, double pMediaVoti,
Phnom String, String pDescrizione, String pTelefono,
PLocalita String, String pCitta, pVia String, String pcap,
PProvincia String, String pPartitaIva, Punto3D pPosizione,
Date pOrarioApertura, Date pOrarioChiusura, String pGiornoChiusura)

/**
* Empty Constructor
*
*/
public BeanPuntoDiRistoro ()
(

)

/**
* Returns the value of cap
*
* @ Return value cap.
*/

public String getCap ()

/**
* Sets the new value of cap
*
New pcap * @ param value cap.
*/

public void setCap (String PCAP)

/**
* Returns the value of city
*
* @ Return Value of city.
*/

public String getCitta ()

/**
* Sets the new value of city
*
* @ Param value New pCitta city.
*/

public void setCitta (String pCitta)

/**
* Returns the value of description
*
* @ Return value of description.
*/

public String getDescrizione ()

/**
* Sets the new value of description
*
* @ Param pDescrizione New value of description.
*/

public void setDescrizione (String pDescrizione)

/**
* Returns the value of giornoChiusura
*
* @ Return value giornoChiusura.
*/

public String getGiornoChiusura ()

/**
* Sets the new value of giornoChiusura
*
* @ Param value pGiornoChiusura New giornoChiusura.
*/

public void setGiornoChiusura (String pGiornoChiusura)

/**
* Returns the value of location
*
* @ Return locale values.
*/

public String getLocal ()

/**
* Sets the new value of location
*
* @ Param pLocalita New locale values.
*/

public void setLocale (String pLocalita)

/**
* Returns the value of mediaVoti
*
* @ Return value mediaVoti.
*/

public double getMediaVoti ()

/**
* Sets the new value of mediaVoti
*
* @ Param value pMediaVoti New mediaVoti.
*/

public void setMediaVoti (double pMediaVoti)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getName ()

/**
* Sets the new name value
*
* @ Param name New value Pnom.
*/

public void setNome (String Pnom)

/**
* Returns the value of numeroVoti
*
* @ Return value numeroVoti.
*/

public int getNumeroVoti ()

/**
* Sets the new value of numeroVoti
*
* @ Param value pNumeroVoti New numeroVoti.
*/

public void setNumeroVoti (int pNumeroVoti)

/**
* Returns the value of orarioApertura
*
* @ Return value orarioApertura.
*/

public Date getOrarioApertura ()

/**
* Sets the new value of orarioApertura
*
* @ Param value pOrarioApertura New orarioApertura.
*/

public void setOrarioApertura (Date pOrarioApertura)

/**
* Returns the value of orarioChiusura
*
* @ Return value orarioChiusura.
*/

public Date getOrarioChiusura ()

/**
* Sets the new value of orarioChiusura
*
* @ Param value pOrarioChiusura New orarioChiusura.
*/

public void setOrarioChiusura (Date pOrarioChiusura)

/**
* Returns the value of PartitaIva
*
* @ Return value of a political party.
*/

public String getPartitaIva ()

/**
* Sets the new value of PartitaIva
*
* @ Param pPartitaIva New value of political parties.
*/

public void setPartitaIva (String pPartitaIva)

/**
* Returns the value of position
*
* @ Return value of position.
*/

public Punto3D getPosizione ()

/**
* Sets the new position value
*
* @ Param pPosizione New position value.
*/

public void setPosizione (Punto3D pPosizione)

/**
* Returns the value of the province
*
* @ Return value of the province.
*/

public String getProvincia ()

/**
* Sets the new value of the province
*
* @ Param pProvincia New value for the province.
*/

public void setProvincia (String pProvincia)

/**
* Returns the value of telephone
*
* @ Return Value of the phone.
*/

public String getTelefono ()

/**
* Sets the new value of telephone
*
* @ Param value New pTelefono phone.
*/

public void setTelefono (String pTelefono)

/**
* Returns the value of street
*
* @ Return value on.
*/

public String getVar ()

/**
* Sets the new value via
*
* @ Param value New pVia on.
*/

public void setvar (String pVia)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanTag</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;

public class BeanTag implements Serializable

/**
* Bean that contains the data for a Tag
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

import java.io.Serializable;

public class BeanTag implements Serializable
(
private static final long serialVersionUID =-6320421006595188597L;
private int id;
private String name;
private String description;

/**
* Parameterized constructor
*
* @ Param pId
* @ Param Pnom
* @ Param pDescrizione
*/
public BeanTag (int pid, Phnom String, String pDescrizione)
(
setId (PID);
setNome (Phnom);
setDescrizione (pDescrizione);
)

/**
* Empty Constructor
*/
public BeanTag ()
(

)

/**
* Returns the value of description
*
* @ Return value of description.
*/

public String getDescrizione ()

/**
* Sets the new value of description
*
* @ Param pDescrizione New value of description.
*/

public void setDescrizione (String pDescrizione)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getName ()

/**
* Sets the new value of name
*
* @ Param Phnom New value for name.
*/

public void setNome (String Pnom)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()

/**
* Sets the new value of id
*
* @ Param pId New value for id.
*/

public void setId (int pid)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanTurista</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;
import java.util.Date;

public class BeanTurista implements Serializable

/**
* Bean containing information relating to a tourist
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanTurista implements Serializable
(
private static final long serialVersionUID = 4214744963263090577L;
private int id;
private String username;
private String name;
private String name;
private String cittaNascita;
private String cittaResidenza;
private String phone;
private String cap;
private String street;
private String province;
private String email;
private String password;
private Date dob;
private Date dataRegistrazione;
private boolean active;

/**
* Parameterized constructor
*
* @ Param pid
* @ Param pUsername
* @ Param Pnom
* @ Param pCognome
* @ Param pCittaNascita
* @ Param pCittaResidenza
* @ Param pTelefono
* @ Param pcap
* @ Param pVia
* @ Param pProvincia
* @ Param pEmail
* @ Param pPassword
* @ Param pDataNascita
* @ Param pDataRegistrazione
* @ Param pacts
*/
public BeanTurista (int pid, String pUsername, String Pnom,
PCognome String, String pCittaNascita, String pCittaResidenza,
PTelefono String, String pcap, pVia String, String pProvincia,
PEmail String, String pPassword, Date pDataNascita,
Date pDataRegistrazione, boolean Patti)

/**
* Empty Constructor
*/
public BeanTurista ()
(

)

/**
* Returns the value of cap
*
* @ Return value cap.
*/

public String getCap ()

/**
* Sets the new value of cap
*
New pcap * @ param value cap.
*/

public void setCap (String PCAP)

/**
* Returns the value of cittaNascita
*
* @ Return value cittaNascita.
*/

public String getCittaNascita ()

/**
* Sets the new value of cittaNascita
*
* @ Param value pCittaNascita New cittaNascita.
*/

public void setCittaNascita (String pCittaNascita)

/**
* Returns the value of cittaResidenza
*
* @ Return value cittaResidenza.
*/

public String getCittaResidenza ()

/**
* Sets the new value of cittaResidenza
*
* @ Param value pCittaResidenza New cittaResidenza.
*/

public void setCittaResidenza (String pCittaResidenza)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getCognome ()

/**
* Sets the new value of name
*
* @ Param value New pCognome surname.
*/

public void setCognome (String pCognome)

/**
* Returns the value of dob
*
* @ Return value dob.
*/

public Date getDataNascita ()

/**
* Sets the new value of dob
*
* @ Param value New pDataNascita dob.
*/

public void setDataNascita (Date pDataNascita)

/**
* Returns the value of dataRegistrazione
*
* @ Return value dataRegistrazione.
*/

public Date getDataRegistrazione ()

/**
* Sets the new value of dataRegistrazione
*
* @ Param value pDataRegistrazione New dataRegistrazione.
*/

public void setDataRegistrazione (Date pDataRegistrazione)

/**
* Returns the value of email
*
* @ Return value of email.
*/

public String getEmail ()

/**
* Sets the new value of email
*
* @ Param pEmail New value of email.
*/

public void setEmail (String pEmail)

/**
* Returns the value of name
*
* @ Return value of name.
*/

public String getName ()

/**
* Sets the new name value
*
* @ Param name New value Pnom.
*/

public void setNome (String Pnom)

/**
* Returns the value of password
*
* @ Return value of password.
*/

public String getPassword ()

/**
* Sets the new password value
*
* @ Param pPassword new password value.
*/

public void setPassword (String pPassword)

/**
* Returns the value of the province
*
* @ Return value of the province.
*/

public String getProvincia ()

/**
* Sets the new value of the province
*
* @ Param pProvincia New value for the province.
*/

public void setProvincia (String pProvincia)

/**
* Returns the value of telephone
*
* @ Return Value of the phone.
*/

public String getTelefono ()

/**
* Sets the new value of telephone
*
* @ Param value New pTelefono phone.
*/

public void setTelefono (String pTelefono)

/**
* Returns the value of street
*
* @ Return value on.
*/

public String getVar ()

/**
* Sets the new value via
*
* @ Param value New pVia on.
*/

public void setvar (String pVia)

/**
* Returns the value of username
*
* @ Return value of username.
*/

public String GetUserName ()

/**
Returns to be 1 or 0, indicating whether a tourist or not
* Active
*
* @ Return value of activation
*/

public boolean isAttiva ()

/**
* Sets the new value of active
*
* @ Param new value terms of assets.
*/

public void setAttiva (boolean Patti)

/**
* Sets the new value of username
*
* @ Param pUsername New value for username.
*/

public void setUsername (String pUsername)

/**
* Sets the new value of id
*
* @ Param new value of id pid.
*/

public void setId (int pid)

/**
* Returns the value of id
*
* @ Return value id.
*/

public int getId ()</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanVisitaBC</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;
import java.util.Date;

public class BeanVisitaBC implements Serializable

/**
* Bean containing information relating to the feedback of a cultural
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanVisitaBC implements Serializable
(
private static final long serialVersionUID = 3331567128449243852L;
private int rating;
private int idBeneCulturale;
private String comment;
private int IdTurista;
private Date dataVisita;

/**
* Parameterized constructor
*
* @ Param pVoto
* @ Param pIdBeneCulturale
* @ Param pCommento
* @ Param pIdTurista
* @ Param pDataVisita
*/
public BeanVisitaBC (pVoto int, int pIdBeneCulturale,
PCommento String, int pIdTurista, Date pDataVisita)

/**
* Empty Constructor
*/
public BeanVisitaBC ()
(

)

/**
* Returns the value of comment
*
* @ Return value of comment.
*/

public String getCommento ()

/**
* Sets the new value of comment
*
* @ Param value New pCommento comment.
*/

public void setCommento (String pCommento)

/**
* Returns the value of dataVisita
*
* @ Return value dataVisita.
*/

public Date getDataVisita ()

/**
* Sets the new value of dataVisita
*
* @ Param value pDataVisita New dataVisita.
*/

public void setDataVisita (Date pDataVisita)

/**
* Returns the value of idBeneCulturale
*
* @ Return value idBeneCulturale.
*/

public int getIdBeneCulturale ()

/**
* Sets the new value of idBeneCulturale
*
* @ Param value pIdBeneCulturale New idBeneCulturale.
*/

public void setIdBeneCulturale (int pIdBeneCulturale)

/**
* Returns the value of IdTurista
*
* @ Return value IdTurista.
*/

public int getIdTurista ()

/**
* Sets the new value of IdTurista
*
* @ Param value pIdTurista New IdTurista.
*/

public void setIdTurista (int pIdTurista)

/**
* Returns the value of voting
*
* @ Return value of vote.
*/

public int getVoto ()

/**
* Sets the new value of voting
*
New value * @ param pVoto to vote.
*/

public void setVoto (int pVoto)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeanVisitaPR</id>
      <content>package unisa.gps.etour.bean;

import java.io.Serializable;
import java.util.Date;

public class BeanVisitaPR implements Serializable

/**
* Bean that contains the data for feedback to a refreshment
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class BeanVisitaPR implements Serializable
(

private static final long serialVersionUID =-4065240072283418782L;
private int rating;
private int idPuntoDiRistoro;
private String comment;
private int IdTurista;
private Date dataVisita;

/**
* Parameterized constructor
*
* @ Param pVoto
* @ Param pIdPuntoDiRistoro
* @ Param pCommento
* @ Param pIdTurista
* @ Param pDataVisita
*/
public BeanVisitaPR (pVoto int, int pIdPuntoDiRistoro,
PCommento String, int pIdTurista, Date pDataVisita)

/**
* Empty Constructor
*/
public BeanVisitaPR ()
(

)

/**
* Returns the value of comment
*
* @ Return value of comment.
*/

public String getCommento ()

/**
* Sets the new value of comment
*
* @ Param value New pCommento comment.
*/

public void setCommento (String pCommento)

/**
* Returns the value of dataVisita
*
* @ Return value dataVisita.
*/

public Date getDataVisita ()

/**
* Sets the new value of dataVisita
*
* @ Param value pDataVisita New dataVisita.
*/

public void setDataVisita (Date pDataVisita)

/**
* Returns the value of idPuntoDiRistoro
*
* @ Return value idPuntoDiRistoro.
*/

public int getIdPuntoDiRistoro ()

/**
* Sets the new value of idPuntoDiRistoro
*
* @ Param value pIdPuntoDiRistoro New idPuntoDiRistoro.
*/

public void setIdPuntoDiRistoro (int pIdPuntoDiRistoro)

/**
* Returns the value of IdTurista
*
* @ Return value IdTurista.
*/

public int getIdTurista ()

/**
* Sets the new value of IdTurista
*
* @ Param value pIdTurista New IdTurista.
*/

public void setIdTurista (int pIdTurista)

/**
* Returns the value of voting
*
* @ Return value of vote.
*/

public int getVoto ()

/**
* Sets the new value of voting
*
New value * @ param pVoto to vote.
*/

public void setVoto (int pVoto)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_BeniCulturali</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt .*;
import java.awt.event .*;
import javax.swing .*;
import java.util .*;
import javax.swing.border .*;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia;
import unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune;
import unisa.gps.etour.control.GestioneTag.IGestioneTagComune;
import unisa.gps.etour.gui.DeskManager;
import unisa.gps.etour.gui.HelpManager;
import unisa.gps.etour.gui.operatoreagenzia.tables.MediaVotiRenderer;
import unisa.gps.etour.gui.operatoreagenzia.tables.Punto3DRenderer;
import unisa.gps.etour.gui.operatoreagenzia.tables.ScrollableTable;
import unisa.gps.etour.gui.operatoreagenzia.tables.SitoTableModel;
import unisa.gps.etour.util.Punto3D;
import java.io.FileNotFoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import them into
* Panel tag.
*/
private void caricaTags ()
(
ArrayList &lt;BeanTag&gt; beanTags = null;

public class JInternalFrame extends Beniculturali

/**
* Class that implements the interface for the management of cultural side
* Operator Agency.
*
* @ Author Mario Gallo
* @ Version 0.8
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class JInternalFrame extends Beniculturali
(
Private JDesktopPane JDesktopPane;
private JPanel jContentPane = null;
Private JToolBar BCToolbar = null;
private JButton btnNuovoBC = null;
private JButton btnSchedaBC = null;
private JButton btnEliminaBC = null;
private JButton btnModificaBC = null;
private JPanel rightPanel = null;
private JPanel searchPanel = null;
private JPanel helpPanel = null;
private JScrollPane JScrollPane = null;
private JTable tableBC = null;
Private TagPanel pannelloTag = null;
private JTextPane textGuida = null;
private JTextField nomeBC = null;
private JButton btnRicerca = null;
private JButton btnAzzera = null;
Private DeskManager desktopManager;
&lt;SchedaBC&gt; private ArrayList children;
private SitoTableModel TableModel;
Private HelpManager bcHelp;
Private IGestioneBeniCulturaliAgenzia gestioneBC;
Private IGestioneTagComune tags;
protected IGestioneBeniCulturaliComune ricercaBC;

/**
* This is the default constructor.
*/
public Beniculturali ()

/** Inclusion of the frame on the desktop desktop retrieves bread bread
* And desktop manager and initializes the remote objects
* Management of cultural heritage.
*/

public void internalFrameOpened (InternalFrameEvent pEvent)

/** Two exceptions: RemoteException and NotBoundException. The
* Result is the same. The management is not operable and
* After the error message window closes.
*/
catch (Exception ex)
(
JLabel error = new JLabel (
&quot;&lt;html&gt; &lt;h2&gt; Unable to communicate with the server eTour. &lt;/ h2&gt;&quot;
+ &quot;&lt;h3&gt; &lt;u&gt; The dialog management request is closed. &lt;/ U&gt; &lt;/ h3&gt;&quot;
+ &quot;&lt;p&gt; &lt;b&gt; Possible Causes: &lt;/ b&gt;&quot;
+ &quot;&lt;ul&gt; &lt;li&gt; No connection to the network. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; inactive. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; clogged. &lt;/ Li&gt; &lt;/ ul&gt;&quot;
+ &quot;&lt;p&gt; Please try again later. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; If the error persists, please contact technical support. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; We apologize for the inconvenience. &lt;/ Html&gt;&quot;);
Err = new ImageIcon ImageIcon (getClass (). GetResource (
Home.URL_IMAGES + &quot;error48.png&quot;));
JOptionPane.showMessageDialog (JDesktopPane, error,
&quot;Error!&quot; JOptionPane.ERROR_MESSAGE, err);
frame.dispose ();
)
)

/** At the end of the frame displays the dialog
* Confirmation.
*/

public void internalFrameClosing (InternalFrameEvent pEvent)

/** If it is confirmed the closing of management, all
* Classes &quot;daughters&quot; are closed.
*/
if (choice == JOptionPane.OK_OPTION)
(
for (int i = 0; i &lt;figli.size (); i + +)
(
figli.get (i). dispose ();
)
pEvent.getInternalFrame (). dispose ();
)
)

));
)

/**
* Update the current model of the table of cultural property with the bean
* Of the cultural supplied input.
*
* @ Param pbc BeanBeneCulturale - the bean with which to update the
* Model.
*/

protected void updateTableModel (BeanBeneCulturale PBC)

/**
* Closes the tab cultural selected.
*
* @ Param pScheda SchedaBC - the cultural card to close.
*/

protected void closeScheda (SchedaBC pScheda)

/**
* This method initializes the content pane of the frame.
*
* @ Return javax.swing.JPanel - the content pane.
*/

private JPanel getJContentPane ()

/**
* This method initializes the toolbar for features on
* Management of cultural heritage.
*
* @ Return javax.swing.JToolBar - the toolbar for managing assets
* Cultural.
*/
Private JToolBar getBCToolbar ()
(
if (null == BCToolbar)
(
BCToolbar JToolBar = new ();
BCToolbar.setPreferredSize (new Dimension (1, 50));
BCToolbar.setFloatable (false);
BCToolbar.setOrientation (JToolBar.HORIZONTAL);
BCToolbar.setLayout (null);
BCToolbar.add (getBtnNuovoBC ());
BCToolbar.addSeparator ();
BCToolbar.add (getBtnModificaBC ());
BCToolbar.addSeparator ();
BCToolbar.add (getBtnSchedaBC ());
BCToolbar.addSeparator ();
BCToolbar.add (getBtnEliminaBC ());
)
BCToolbar return;
)

/**
* This method initializes the button to insert a new good
* Cultural.
*
* @ Return javax.swing.JButton - the button for the insertion.
*/

private JButton getBtnNuovoBC ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the button to access to details of property
* Cultural selected.
*
* @ Return javax.swing.JButton - the button for the card.
*/

private JButton getBtnSchedaBC ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the button to access the modification of a
* Cultural.
*
* @ Return javax.swing.JButton - the button for the card.
*/

private JButton getBtnModificaBC ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the button for the elimination of property
* Cultural selected.
*
* @ Return javax.swing.JButton - the delete button for.
*/

private JButton getBtnEliminaBC ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the right side of the interface.
*
* @ Return javax.swing.JPanel - the right pane of the interface.
*/

private JPanel getPannelloDestro ()

/**
* This method initializes the panel for finding property
* Cultural.
*
* @ Return javax.swing.JPanel - the search panel.
*/

private JPanel getSearchPanel ()

/**
* This method initializes the panel containing the online help.
*
* @ Return javax.swing.JPanel - the panel of the guide.
*/

private JPanel getHelpPanel ()

/**
* This method initializes the bread and table scroll of cultural heritage.
*
* @ Return javax.swing.JScrollPane - the scrollPane.
*/

private JScrollPane getJScrollPane ()

/** SelectionListener - if a selected row, the buttons
* Tab, edit and delete are active. Otherwise, are
* Disabled.
*/
ListSelectionModel selectionModel = tableBC.getSelectionModel ();
selectionModel
. addListSelectionListener (new ListSelectionListener ()
(
public void ValueChanged (ListSelectionEvent pEvent)
(
if (tableBC.getSelectedRow ()! = -1)
(
btnEliminaBC.setEnabled (true);
btnSchedaBC.setEnabled (true);
btnModificaBC.setEnabled (true);
)
else
(
btnEliminaBC.setEnabled (false);
btnSchedaBC.setEnabled (false);
btnModificaBC.setEnabled (false);
)
)
));
/** KeyListener &lt;ENTER&gt; - Details of the cultural selected.
* &lt;Backspace&gt; - Delete the selected cultural. &lt;space&gt; -
* Modify the cultural selected.
*/
tableBC.addKeyListener (new KeyAdapter ()
(
public void keyPressed (KeyEvent pEvent)
(
int keyCode = pEvent.getKeyCode ();
if (keyCode == KeyEvent.VK_ENTER)
(
btnSchedaBC.doClick ();
)
else if (keyCode == KeyEvent.VK_BACK_SPACE)
(
btnEliminaBC.doClick ();
)
else if (keyCode == KeyEvent.VK_SPACE)
(
btnModificaBC.doClick ();
)
)
));
)

JScrollPane = new JScrollPane (tableBC);
JScrollPane
. setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
JScrollPane
. setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
)
JScrollPane return;
)

/**
* This method initializes the button to search for a good
* Cultural.
*
* @ Return javax.swing.JButton - the search button.
*/

private JButton getBtnRicerca ()

/**
* This method initializes the button to clear the form
* Cultural research.
*
* @ Return javax.swing.JButton - the button to reset the form.
*/

private JButton getBtnAzzera ()

public void actionPerformed (ActionEvent arg0)

/**
* This method opens a tab of the selected cultural or opens the
* Window for entering a new cultural object.
*
* @ Param pbc BeanBeneCulturale - the bean of the cultural property of which
* Want to see the card.
* @ Param boolean pModifica -
* &lt;ul&gt;
* &lt;li&gt; &lt;i&gt; True &lt;/ i&gt; - indicates that you are making a change
* Data cultural.
* &lt;li&gt; &lt;i&gt; False &lt;/ i&gt; indicates that you are viewing the card
* The cultural property.
*/
private void OpenOffice.org Messenger MSN Gaim (BeanBeneCulturale PBC, boolean pModifica)
(
SchedaBC new;
if (pbc == null)
(
new = new SchedaBC (this);

)
else
(
for (int i = 0; i &lt;figli.size (); i + +)
(
SchedaBC current = figli.get (i);
if (pBc.getId () == corrente.getId ())
(
desktopManager.activateFrame (current);
return;
)
)
new = new SchedaBC (this, PBC, pModifica);
)
jDesktopPane.add (new, Integer.MAX_VALUE);
desktopManager.centerFrame (new);
nuova.setVisible (true);
figli.add (new);
)

/**
* This method imports the cultural downloaded from the server in
* Table.
*
* @ Param boolean pRicerca
* &lt;ul&gt;
* &lt;li&gt; &lt;i&gt; True &lt;/ i&gt; - include the search parameters.
* &lt;li&gt; &lt;i&gt; False &lt;/ i&gt; otherwise.
* &lt;/ Ul&gt;
*/

private void caricaTabella (boolean pRicerca)

/**
* This method loads the tags available in the system and import them into
* Panel tag.
*/

private void caricaTags ()

/**
* This method sets the size of columns for the data assets
* Cultural.
*/

private void organizzaRiga ()

// Setting up dell'help manager for cultural.
// Setting up objects for remote asset management
// Cultural.
// Load data.
// Create the confirmation dialog.
// Opens a form for entering a new good
// Cultural.
// Open the card with the change of the cultural
// Disabled.
// Open the card with the change of the cultural
// Enabled.
// Create the delete confirmation dialog.
// If the deletion is confirmed, remove the well
// Cultural selected.
// Top - Left - Bottom - Right
// If an error displays an error message.
// If an error panel tag remains blank.
// Name
// Address
// Phone
// Location
// City
// CAP
// Test
// RATINGS
// POSGEO</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_Categoria</id>
      <content>package unisa.gps.etour.control.fuzzy;

import java.io.Serializable;
import java.util.Hashtable;

public class Category implements Serializable

public class Category implements Serializable
(

/**
* Class that describes the characteristics of a Category
* Contains a Hashtable that represents the dictionary on
* The category that contains and for each term associated
* In the category values of frequency, distance and relevance.
* Provides methods to access, modify and auxiliary methods.
*/
private static final long serialVersionUID =-8652232946927756089L;
private String name; // name of the category
private Hashtable &lt;string, float[]&gt; terms, // list of terms and their frequencies and distance rilavanza

/** Manufacturer:
* Get the category name as a parameter to create
*/
public Category (String Pnom)

/** Returns the output Hashtable containing the terms
* With the respective values of frequency, relevance and distance
*/
&lt;string, float[]&gt; getTermini public Hashtable ()
(
return terms;
)

/** Returns the name of the output category
*/

public String getName ()

/** Get the string as a parameter representing the term
* Of which you want to pick the values of frequency, range and bearing
*/

public float [] getval (pTermine String) throws NullPointerException

/** Agiunge an end to dizinario category
*/

public void addTermine (String pTermine)

/** Agiunge an end to dizinario category
* Seven also the values of frequency, distance and rilavanza
*/

public boolean addTermine (String pTermine, float [] pVal)

/** Set the values for the period pTermine
*/

public boolean setValTermine (String pTermine, float [] pVal)
throws NullPointerException

public void setTermini (Hashtable &lt;String,float[]&gt; pTermini)

/** Returns True if the term is present in
* Dictionary of Category False otherwise
*/

public boolean esisteTermine (String pTermine)

// name of the category
// list of terms and their frequencies and distance rilavanza</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_ControlServerLauncher</id>
      <content>package unisa.gps.etour.control;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import unisa.gps.etour.control.GestioneBeniCulturali.GestioneBeniCulturaliComune;
import unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune;

class is

/**
* This is the entry point of the control server. This class is responsible for
* Make the deployment of services on the RMI registry, thus rendering the
* Some services are available and usable.
*
* @ Author Michelangelo De Simone
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/

public class ControlServerLauncher
(
/**
* Entry point of ControlServer
*
* @ Param args The command line parameters
*/
public static void main (String [] args)

//*** WARNING *** *** WARNING *** EXPERIMENTAL EXPERIMENTAL
// GestioneBeniCulturaliComune is the class that implements the interface IGestioneBeniCulturaliComune,
// This interface on both the client, both the server
// Here you create the stub for the registry, making it clear to the RMI system you are exporting the object on a gBCC
// Anonymous port
// There shall call the register (default is on localhost) and &quot;bind&quot; (alloy)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_ControlloBeniCulturali</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali;

import java.util.Date;
import unisa.gps.etour.bean.BeanBeneCulturale;

class has

/**
* This class has the task of checking the data of a cultural object.
* Various consistency checks are performed, such as length of strings,
* Null reference, dynamic types incorrect.
*
* @ Author Michelangelo De Simone
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/

public class ControlloBeniCulturali
(
/**
*
* Please consistency check by calling the appropriate methods.
* This method wrappa &quot;all other methods of control with a single call.
* At the first false value the flow is interrupted.
*
* @ Param bean The PBC of the cultural object to be inspected
* @ Return boolean The result of the check: true if OK, false otherwise
*/
public static boolean controllaDatiBeneCulturale (BeanBeneCulturale PBC)

/**
*
* Check for null data in a bean cultural property.
* The check is performed on all fields of the bean.
*
* @ Param bean The PBC cultural property to be checked
* @ Return boolean The result of the check: true if there are no null references, false otherwise
*/

public static boolean controllaDatiNulli (BeanBeneCulturale PBC)

/**
*
* Check the consistency of dates within this BeanBeneCulturale.
* The check is performed only on objects, while not carried out
* No validity check 'on a date as a cultural object may also have
* Dates later than today (see for example on open exhibitions).
*
* @ Param The PBC BeanBeneCulturale which check the dates
* @ Return boolean The result of the check: true if the dates have consistency; false otherwise
*/

public static boolean controllaDateBeneCulturale (BeanBeneCulturale PBC)

/**
*
* Check the ID of BeanBeneCulturale
*
* @ Param pId Id BeanBeneCulturale be checked
* @ Return boolean The result of the check: true if the ID is correct, false otherwise
*/

public static boolean controllaIdBeneCulturale (int pid)

// This method checks the input parameter in the cases
// Null reference or dynamic Wrong
// This method checks if the ID passed as a parameter BeanBeneCulturale
// Is valid or not
// This method checks the objects contained in BeanBeneCulturale Date
// As such, a check is made null and reference checks
// On the dynamic.
// This method checks all the fields in BeanBeneCulturale, research
// Any null references
// Check the correct length of string, in this case the CAP must
// To force of circumstances than five digits, while the province of two.
// TODO: To be completed</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_ControlloDati</id>
      <content>package unisa.gps.etour.util;

import java.awt.image.BufferedImage;
import java.util.Date;
import javax.swing.ImageIcon;
import unisa.gps.etour.bean.BeanBanner;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanConvenzione;
import unisa.gps.etour.bean.BeanMenu;
import unisa.gps.etour.bean.BeanNews;
import unisa.gps.etour.bean.BeanOperatorePuntoDiRistoro;
import unisa.gps.etour.bean.BeanPiatto;
import unisa.gps.etour.bean.BeanPreferenzaDiRicerca;
import unisa.gps.etour.bean.BeanPreferenzeGeneriche;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.bean.BeanVisitaPR;

public class ControlloDati

/**
* Class for managing the control of the correctness of the strings
*
* @ Author Joseph Penna
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class ControlloDati
(

private static final String letter = &quot;abcdefghijklmnopqrstuvxywz&quot;
+ &quot;ABCDEFGHIJKLMNOPQRSTUVXYWZ&quot;;
private final static String numbers = &quot;0123456789&quot;;

public final static int max_length = 64;

/**
* Static method for verifying correctness of a string
*
* @ Param string to check pStringa
* @ Param letterePermesse Boolean: True if it is allowed to be present
* Letters in the string, False otherwise
* @ Param numeriPermessi Boolean: True if it is allowed to be present
* Numbers in the string, False otherwise
CaratteriPermessi * @ param string containing all characters
* Allowed in the string
* @ Param string contentente all caratteriNecessari characters
* Must be present in the string
* @ Param numeroCaratteriMin integer representing the minimum number of
* Characters allowed in string
* @ Param numeroCaratteriMax integer representing the maximum number of
* Characters allowed in string
* @ Return Boolean: True if the witch meets the conditions, False
* Otherwise
*/
public static boolean controllaStringa (String pStringa,
letterePermesse boolean, boolean numeriPermessi,
CaratteriPermessi String, String caratteriNecessari,
numeroCaratteriMin int, int numeroCaratteriMax)

public static String correggiStringa (String pStringa,
letterePermesse boolean, boolean numeriPermessi,
CaratteriPermessi String, int numeroCaratteriMax)

public static boolean controllaData (String pData)

public static boolean controllaDate (Date pDataInizio, Date pDataFine)

public static boolean checkBeanTurista (BeanTurista pTurista)

public static boolean checkBeanPreferenzaDiRicerca (
BeanPreferenzaDiRicerca pPreferenzaDiRicerca)

public static boolean checkBeanPreferenzeGeneriche (
BeanPreferenzeGeneriche pPreferenzeGeneriche)

public static boolean checkBeanBeneCulturale (
BeanBeneCulturale pBeneCulturale)

public static boolean checkBeanPuntoDiRistoto (
BeanPuntoDiRistoro pPuntoDiRistoro)

public static boolean checkBeanOperatorePuntoDiRistoro (
BeanOperatorePuntoDiRistoro pOperaotorePuntoDiRistoro)

/**
* Please formal control and consistency on the data of the banner
* Content in the bean passed by parameter.
*
* @ Author Fabio Palladino
* @ Param pBanner bean contains the data of the banner.
* @ Return True if the data of the banner is correct false otherwise.
*/

public static boolean checkBeanBanner (BeanBanner pBanner)

/**
* Method which controls the image contained in the object ImageIcon past
* Per parameter.
*
* @ Author Fabio Palladino
* @ Param image ImageIcon object containing the image to be checked
* @ Return true if the image contained in the object is an instance ImageIcon
* Class BufferedImage.
*/

public static boolean checkImmagine (ImageIcon image)

/**
* Function that checks the data in a news;
*
* @ Author Fabio Palladino
* @ Param bean Pnews containing details of a news.
* @ Return
*/

public static boolean checkBeanNews (BeanNews Pnews)

public static boolean checkBeanTag (BeanTag ptagi)

public static boolean checkBeanConvenzione (BeanConvenzione pConvenzione)

public static boolean checkBeanMenu (BeanMenu pMenu)

public static boolean checkBeanPiatto (BeanPiatto pPiatto)

public static boolean checkBeanVisitaBC (BeanVisitaBC pVisitaBC)

public static boolean checkBeanVisitaPR (BeanVisitaPR pVisitaPR)

// Check the length of the string
// Check the presence of the necessary characters in the string
// Create the string containing all characters allowed
// Loop for the inspection of the characters of the string to check
// Condition: If the character you are watching is not
// In the string of characters allowed
// The string is incorrect and out of the loop.
// Still I have no idea how I will spend the time
// Date of
// Publishing
// Due Date
// Text of News</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_ControlloDatiAdvertisement</id>
      <content>package com.trapan.spg.control.GestioneAdvertisement;

import java.util.Date;
import com.trapan.spg.bean.BeanBanner;
import com.trapan.spg.bean.BeanNews;

public class ControlloDatiAdvertisement

/**
* Class that contains static methods that perform
* Consistency checks on the data bean banner
* And news.
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/
package com.trapan.spg.control.GestioneAdvertisement;

import java.util.Date;

import com.trapan.spg.bean.BeanBanner;
import com.trapan.spg.bean.BeanNews;

public class ControlloDatiAdvertisement
(
/**
* Please formal control and consistency on
* Data content of the banner in the bean passed by parameter.
* @ Param pBanner bean contains the data of the banner.
* @ Return
*/

public static boolean controlloBanner (BeanBanner pBanner)

/**
* Method that performs consistency checks and
* Correctness of the information contained in the bean past
* Per parameter, in particular check that the dates
* Publication and expiration of the news are consistent,
* Or that the second is the later.
*
* @ Param Pnews bean containing data news
* @ Return Returns true if the bean contains consistent data
*/

public static boolean controlloNews (BeanNews Pnews)

// Released
// Due Date
// Text of News</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_ControlloVisiteBeniCulturali</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali;

import unisa.gps.etour.bean.BeanVisitaBC;

class has

/**
* This class has the task of monitoring data from a cultural visit.
* Various consistency checks are performed, such as length of strings,
* Null reference, dynamic types incorrect.
*
* @ Author Michelangelo De Simone
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/

public class ControlloVisiteBeniCulturali
(
/**
*
* Please consistency check by calling the appropriate methods
*
* @ Param bean The pVBC cultural visit to check
* @ Return boolean The result of the check: true if OK, false otherwise
*/
public static boolean controllaDatiVisitaBeneCulturale (BeanVisitaBC pVBC)

/**
*
* Check for null data in a bean cultural visit
*
* @ Param bean The PBC cultural visit to check
* @ Return boolean The result of the check: true if there are no null references, false otherwise
*/

public static boolean controllaDatiNulli (BeanVisitaBC PBC)

// If the bean is null
// Check the ID of a cultural visit
// And the id of its tourist
// Check the vote (of course ratings are accepted only between 1 and 5
// Check for null references in the bean
// Check the correct length of string
// Check the nullity of the fields of feedback</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_CostantiGlobali</id>
      <content>package unisa.gps.etour.util;

import java.io.File;

public class CostantiGlobali

/**
* Class that contains the constants of the environmental system.
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/

public class CostantiGlobali
(
/** Highest precedence of news. */
public static final int MAX_PRIORITY_NEWS = 5;
/** Priority least one news. */
public static final int MIN_PRIORITY_NEWS = 1;
/** Maximum number of news on the machine. */
public static final int MAX_NEWS_ATTIVE = 10;
/** Path to directory containing the images
* Banners stored on the server. */
public static final String SERVER_IMAGE_PATH = &quot;c:&quot;
File.separator + + &quot;ImmaginiBanner&quot; + file.separator;
/** URL of the server for RMI calls */
public static final String server_url = &quot;localhost /&quot;;
/** Milliseconds of 30 days */
public static final long TRENTA_GIORNI = 2592000000L;
)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBBanner</id>
      <content>package GestioneAdvertisement.
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/
package unisa.gps.etour.control.GestioneAdvertisement.test.stubs;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanBanner;
import unisa.gps.etour.repository.IDBBanner;

class DBBanner

/**
* Stubs for dynamic class DBBanner. Is used for testing
* Class package GestioneAdvertisement.
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/
package unisa.gps.etour.control.GestioneAdvertisement.test.stubs;

import java.sql.SQLException;
import java.util.ArrayList;

import unisa.gps.etour.bean.BeanBanner;
import unisa.gps.etour.repository.IDBBanner;

public class DBBanner implements IDBBanner
(

private static int NUM_TEST = 0;

public boolean cancellaBanner (int pIdBanner) throws SQLException
(
if (NUM_TEST == 5)
(
throw new SQLException ();
)
else
(
return true;
)
)

/ * (Non-Javadoc)
* @ See unisa.gps.etour.repository.IDBBanner # inserisciBanner (unisa.gps.etour.bean.BeanBanner)
*/

public boolean inserisciBanner (BeanBanner pBanner) throws SQLException

public boolean modificaBanner (BeanBanner pBanner) throws SQLException

public BeanBanner ottieniBannerDaID (int pIdBanner) throws SQLException

public static void setNUM_TEST (int num_test)

// ProvaBanner.jpg&quot;, 3);</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBBeneCulturale</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali.test.stub;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.repository.IDBBeneCulturale;
import unisa.gps.etour.util.Punto3D;

public class DBBeneCulturale implements IDBBeneCulturale

public class DBBeneCulturale implements IDBBeneCulturale
(
private ArrayList &lt;BeanBeneCulturale&gt; b;

public DBBeneCulturale ()

public boolean cancellaBeneCulturale (int pIdBene) throws SQLException

public boolean inserisciBeneCulturale (BeanBeneCulturale pBene)
throws SQLException

public boolean modificaBeneCulturale (BeanBeneCulturale pBene)
throws SQLException

public BeanBeneCulturale ottieniBeneCulturale (int pid) throws SQLException

public int ottieniNumeroElementiRicerca (String pKeyword,
ArrayList &lt;BeanTag&gt; pTags, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

public int ottieniNumeroElementiRicercaAvanzata (int pIdTurista,
PKeyword String, ArrayList &lt;BeanTag&gt; pTags, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

public ArrayList &lt;BeanBeneCulturale&gt; search (String pKeyword,
ArrayList &lt;BeanTag&gt; pTags, int pNumPagina,
int pNumeroElementiPerPagina, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBConnessionePool</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class DBConnessionePool

/**
* Class that creates the connection to the database using JDBC and
* Allows you to query both read and edit the contents of
* Database. E 'implemented to provide a pool of connections to
* Provide a connection to each thread.
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class DBConnessionePool
(
private final static String driver = &quot;com.mysql.jdbc.Driver&quot;;
private final static String urlConnessione = &quot;jdbc: mysql: // localhost / eTour? user = &amp; password = mauro mauro&quot;;
private static List &lt;Connection&gt; connessioniLibere;

/ * Private constructor that initiates the connection to the database *//** Static initialization block is used to load the driver
* Memory
*/
static
(
connessioniLibere = &lt;Connection&gt; new ArrayList ()

/**
* Method to get the connection to the server.
*
* @ Return Returns the database connection
* @ Throws SQLException
*/

public static synchronized Connection ottieniConnessione ()
throws SQLException

public static void rilasciaConnessione (Connection pReleasedConnection)

private static Connection creaDBConnessione () throws SQLException

// localhost / eTour? user = &amp; password = mauro mauro&quot;;
//** Static initialization block is used to load the driver
// Extract a connection from the free db connection queue
// If the connection is not valid, a new connection will be
// Analyzed
// The free db connection queue is empty, so a new connection will
// Be created
// Add the connection to the free db connection queue
// Create a new db connection using the db properties</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBConvenzione</id>
      <content>package unisa.gps.etour.control.GestioneAdvertisement.test.stubs;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import unisa.gps.etour.bean.BeanConvenzione;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.repository.IDBConvenzione;

public class DBConvenzione implements IDBConvenzione

/**
Attribute_Definition
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/
package unisa.gps.etour.control.GestioneAdvertisement.test.stubs;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

import unisa.gps.etour.bean.BeanConvenzione;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.repository.IDBConvenzione;

public class DBConvenzione implements IDBConvenzione
(
private static int NUM_TEST = 1;
/ * (Non-Javadoc)
* @ See unisa.gps.etour.repository.IDBConvenzione # cancellaConvenzione (int)
*/

public boolean cancellaConvenzione (int pIdConvenzione) throws SQLException

public boolean inserisciConvenzione (BeanConvenzione pConvenzione)
throws SQLException

public boolean modificaConvenzione (BeanConvenzione pConvenzione)
throws SQLException

public BeanConvenzione ottieniConvezioneAttiva (int pIdPuntoDiRistoro)
throws SQLException

public static void setNUM_TEST (int num_test)

// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBMenu</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanMenu;

public class DBMenu implements IDBMenu

/**
* Class that implements the interface Menu
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class DBMenu implements IDBMenu
(
// Empty constructor
public DBMenu ()

public boolean cancellaMenu (int pIdMenu) throws SQLException

public boolean inserisciMenu (BeanMenu pMenu) throws SQLException

public boolean modificaMenu (BeanMenu pMenu) throws SQLException

public BeanMenu ottieniMenuDelGiorno (int pIdPuntoDiRistoro, String pGiorno)
throws SQLException

// Empty constructor
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query cancellation
// You run the query Cancellation
// This returns the backup
// Is always done and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for the insertion
// You run the insert query
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for amendment
// You run the query for Change
// This returns the backup
// Is always done and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to extract the list of Menu
// The query is executed
// List that will contain all BeanMenu obtained
// We extract the results from the result set and moves in
// List
// To be returned
// Fill the list
// Return the list
// Is always done and takes care to close the Result, the Statement
// And Connection
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query for the extraction of Daily Menu
// The query is executed
// Get the bean of the daily menu based on the ID of the point of
// Dining and a day
// Create the proceeds Bean
// Return the Bean obtained
// Is always done and takes care to close the Result, the Statement
// And Connection</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBNews</id>
      <content>package unisa.gps.etour.control.GestioneAdvertisement.test.stubs;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanNews;
import unisa.gps.etour.repository.IDBNews;
import unisa.gps.etour.util.CostantiGlobali;

class GestioneAdvertisementAgenzia

/**
* Stubs used for testing the class GestioneAdvertisementAgenzia
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/
package unisa.gps.etour.control.GestioneAdvertisement.test.stubs;

import java.sql.SQLException;
import java.util.ArrayList;

import unisa.gps.etour.bean.BeanNews;
import unisa.gps.etour.repository.IDBNews;
import unisa.gps.etour.util.CostantiGlobali;

public class DBNews implements IDBNews
(
/** Static field that stores the number of test */
private static int NUM_TEST = 0;

/ * (Non-Javadoc)
* @ See unisa.gps.etour.repository.IDBNews # cancellaNews (int)
*/

public boolean cancellaNews (int pIdNews) throws SQLException

public boolean inserisciNews (BeanNews Pnews) throws SQLException

public boolean modificaNews (BeanNews Pnews) throws SQLException

/**
* Set the number of tests in progress
*
* @ Param num_test
*/

public static void setNUM_TEST (int num_test)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBOperatoreAgenzia</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import unisa.gps.etour.bean.BeanOperatoreAgenzia;

public class DBOperatoreAgenzia implements IDBOperatoreAgenzia

/**
* Class that implements the Agency's Operator
*
* @ Author Joseph Martone
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/
package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import unisa.gps.etour.bean.BeanOperatoreAgenzia;

public class DBOperatoreAgenzia implements IDBOperatoreAgenzia
(

/ * (Non-Javadoc)
* @ See unisa.gps.etour.repository.IDBOperatoreAgenzia # ottieniOperatoreAgenzia (int)
*/

public BeanOperatoreAgenzia ottieniOperatoreAgenzia (String pUsername)
throws SQLException

public boolean modificaPassword (BeanOperatoreAgenzia poa) throws SQLException

// Connect to database
// Statement for running queries
// Resut set where the output of the query is inserted
// Try block which performs the query and the database connection
// You get the database connection from the pool
// Create the statement
// Query
// Build the bean when the query returns a
// Value
// Otherwise will return null
// Finally block that contains the instructions to close the connections
// Hyenas run in any case
// This closes the result set only if and 'the query was made
// This closes the if statement and 'opened
// It returns the connection to the pool if and 'opened
// Connect to database
// Statement for running queries
// Try block which performs the query and the database connection
// You get the database connection from the pool
// Create the statement
// Query
// You run the query
// Finally block that contains the instructions to close the connections
// Hyenas run in any case
// This closes the if statement and 'opened
// It returns the connection to the pool if and 'opened</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBOperatorePuntoDiRistoro</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import unisa.gps.etour.bean.BeanOperatorePuntoDiRistoro;

public class DBOperatorePuntoDiRistoro implements IDBOperatorePuntoDiRistoro

/**
* Class that implements the interface Operator Refreshment
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class DBOperatorePuntoDiRistoro implements IDBOperatorePuntoDiRistoro
(
// Empty constructor
public DBOperatorePuntoDiRistoro ()

public boolean cancellaOperatorePuntoDiRistoro (int pIdOperatore)
throws SQLException

public boolean inserisciOperatorePuntoDiRistoro (
BeanOperatorePuntoDiRistoro popera) throws SQLException

public boolean modificaOperatorePuntoDiRistoro (
BeanOperatorePuntoDiRistoro popera) throws SQLException

public BeanOperatorePuntoDiRistoro ottieniOperatorePuntoDiRistoro (
pIdOperatore int) throws SQLException

// Empty constructor
// Variables for database connection
// Variable for the query
// Get connection
// Create the Statement
// Query cancellation
// You run the query Cancellation
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query for the insertion
// Query for checking the ID of the PuntoDiRistoro as
// The association is 1 to 1 between OPPR and PR
// Execute the query to control
// Check if there are tuples
// If it is empty
// You run the insert query
// This returns the backup
// If not already exist
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for amendment
// You run the query for Change
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query for the extraction of the dot Refreshments required
// The query is executed
// Get the bean Operator refreshment passing the id
// Built on BeanOPR
// Exception if there is an error
// Always runs and takes care to close the Result, the Statement
// And Connection</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBPiatto</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanPiatto;

public class DBPiatto implements IDBPiatto

/**
* Class that implements the interface plate
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class DBPiatto implements IDBPiatto
(
// Empty constructor
public DBPiatto ()

public boolean cancellaPiatto (int pIdPiatto) throws SQLException

public boolean inserisciPiatto (BeanPiatto pPiatto) throws SQLException

public boolean modificaPiatto (BeanPiatto pPiatto) throws SQLException

// Empty constructor
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query cancellation
// You run the query Cancellation
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for the insertion
// You run the insert query
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for amendment
// You run the query for Change
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to extract the list of dishes given the id of the Menu
// The query is executed
// List that contains all the plates obtained
// We extract the results from the result set and moves in
// List
// To be returned
// Add the list BeanPiatto
// Always runs and takes care to close the Result, the Statement
// And Connection</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBPreferenzeDiRicerca</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanPreferenzaDiRicerca;

public class DBPreferenzeDiRicerca implements IDBPreferenzeDiRicerca

/**
* Class that implements the interface PreferenzeDiRicerca
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class DBPreferenzeDiRicerca implements IDBPreferenzeDiRicerca
(
// Empty constructor
public DBPreferenzeDiRicerca ()

public boolean cancellaPreferenzaDiRicerca (int pIdPreferenza)
throws SQLException

public boolean cancellaPreferenzaDiRicercaBC (int pIdBeneCulturale,
pIdPreferenzaDiRicerca int) throws SQLException

public boolean cancellaPreferenzaDiRicercaPR (int pIdPuntoDiRistoro,
pIdPreferenza int) throws SQLException

public boolean cancellaPreferenzaDiRicercaTurista (int pIdTurista,
pIdPreferenza int) throws SQLException

public boolean inserisciPreferenzaDiRicercaDelBC (int pIdBeneCulturale,
pIdPreferenzaDiRicerca int) throws SQLException

public boolean inserisciPreferenzaDiRicerca (
BeanPreferenzaDiRicerca pPreferenza) throws SQLException

public boolean inserisciPreferenzaDiRicercaDelPR (int pIdPuntoDiRistoro,
pIdPreferenzaDiRicerca int) throws SQLException

public boolean inserisciPreferenzaDiRicercaDelTurista (int pIdTurista,
pIdPreferenzaDiRicerca int) throws SQLException

public ArrayList &lt;BeanPreferenzaDiRicerca&gt; ottieniPreferenzeDiRicercaDelBC (
pIdBeneCulturale int) throws SQLException

public ArrayList &lt;BeanPreferenzaDiRicerca&gt; ottieniPreferenzeDiRicercaDelPR (
pIdPuntoDiRistoro int) throws SQLException

public ArrayList &lt;BeanPreferenzaDiRicerca&gt; ottieniPreferenzeDiRicercaDelTurista (
pIdTurista int) throws SQLException

// Empty constructor
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query cancellation
// You run the query Cancellation
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query cancellation
// You run the query Cancellation
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query cancellation
// You run the query Cancellation
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query cancellation
// You run the query Cancellation
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for the insertion
// You run the insert query
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for the insertion
// You run the insert query
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for the insertion
// You run the insert query
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for the insertion
// You run the insert query
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to extract the list of search preferences
// A cultural
// The query is executed
// List that will contain the BeanPreferenzaDiRicerca
// We extract the results from the result set and moves in
// List
// To be returned
// Add to the list BeanPreferenzaDiRicerca
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to extract the list of search preferences
// A refreshment
// The query is executed
// List that will contain the BeanPreferenzaDiRicerca
// We extract the results from the result set and moves in
// List
// To be returned
// Add to the list BeanPreferenzaDiRicerca
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to extract the list of search preferences
// A Turista
// The query is executed
// List that will contain the BeanPreferenzaDiRicerca
// We extract the results from the result set and moves in
// List
// To be returned
// Add to the list BeanPreferenzaDiRicerca
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to extract the list of search preferences
// A Turista
// The query is executed
// List that will contain the BeanPreferenzaDiRicerca
// We extract the results from the result set and moves in
// List
// To be returned
// Add to the list BeanPreferenzaDiRicerca
// Return the list of search preferences in the DB
// Always runs and takes care to close the Result, the Statement
// And Connection</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBPreferenzeGeneriche</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import unisa.gps.etour.bean.BeanPreferenzeGeneriche;

public class DBPreferenzeGeneriche implements IDBPreferenzeGeneriche

/**
* Implementing the IDBPreferenzeGeneriche
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class DBPreferenzeGeneriche implements IDBPreferenzeGeneriche
(
// Constructor without parameters
public DBPreferenzeGeneriche ()

public boolean cancellaPreferenzaGenerica (int pIdPreferenza)
throws SQLException

public boolean inserisciPreferenzaGenenerica (
BeanPreferenzeGeneriche pPreferenza) throws SQLException

public boolean modificaPreferenzaGenerica (
BeanPreferenzeGeneriche pPreferenza) throws SQLException

public BeanPreferenzeGeneriche ottieniPreferenzaGenerica (int pIdTurista)
throws SQLException

// Constructor without parameters
// Connect to database
// Statement for running queries
// Try block which performs the query and the database connection
// You get the database connection from the pool
// Create the statement
// Query
// You run the query
// Finally block that contains the instructions to close the connections
// Hyenas run in any case
// This closes the if statement and 'opened
// It returns the connection to the pool if and 'opened
// Connect to database
// Statement for running queries
// Try block which performs the query and the database connection
// You get the database connection from the pool
// Create the statement
// Query
// You run the query
// Finally block that contains the instructions to close the connections
// Hyenas run in any case
// This closes the if statement and 'opened
// It returns the connection to the pool if and 'opened
// Connect to database
// Statement for running queries
// Try block which performs the query and the database connection
// You get the database connection from the pool
// Create the statement
// Query
// You run the query
// Finally block that contains the instructions to close the connections
// Hyenas run in any case
// This closes the if statement and 'opened
// It returns the connection to the pool if and 'opened
// Connect to database
// Statement for running queries
// Resut set where the output of the query is inserted
// Try block which performs the query and the database connection
// You get the database connection from the pool
// Create the statement
// Query
// Run the query
// Check that the query returns at least one result
// Finally block that contains the instructions to close the connections
// Hyenas run in any case
// This closes the result set only if and 'the query was made
// This closes the if statement and 'opened
// It returns the connection to the pool if and 'opened</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBPuntoDiRistoro</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Date;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.util.Punto3D;

public class DBPuntoDiRistoro implements IDBPuntoDiRistoro

/**
* Class that implements the interface of Refreshment
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class DBPuntoDiRistoro implements IDBPuntoDiRistoro
(
// Empty constructor
public DBPuntoDiRistoro ()

public boolean cancellaPuntoDiRistoro (int pIdPuntoDiRistoro)
throws SQLException

public boolean inserisciPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)
throws SQLException

public boolean modificaPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)
throws SQLException

public int ottieniNumeroElementiRicerca (String pKeyword,
ArrayList &lt;BeanTag&gt; pTags, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

public int ottieniNumeroElementiRicercaAvanzata (int pIdTurista,
PKeyword String, ArrayList &lt;BeanTag&gt; pTags, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

public BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pid)
throws SQLException

public ArrayList &lt;BeanPuntoDiRistoro&gt; search (String pKeyword,
ArrayList &lt;BeanTag&gt; pTags, int pNumeroPagina,
int pNumeroElementiPerPagina, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

// Empty constructor
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query cancellation
// You run the query Cancellation
// This returns the backup
// Always runs and takes care of closing the Statement and the
// Connect
// Create the organization of the Opening and Closing
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for the insertion of a refreshment
// You run the insert query
// Is always done and takes care of closing the statement, and
// Connect
// Create the organization of the Opening and Closing
// Variables for database connection
// Variable for the query
// Get the connection
// Create the Statement
// Query for amendment
// You run the query for Change
// This returns the backup
// Is always done and takes care of closing the Statement and the
// Connect
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to get the number of pages
// Query without the control tag
// Query with tags
// You run the query
// It returns the value of count () that contains the number of
// Tuple
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to get the number of pages of advanced
// Query without the control tag
// Query with tags
// You run the query
// It returns the value of count () that contains the number of
// Tuple
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query
// You run the query
// We create the objects to be returned
// This generates the resting spot of bean
// It returns the refreshment
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query for search
// Query without the control tag
// Query with tags
// You run the query
// List that will contain the BeanPuntoDiRistoro
// We create the objects to be returned
// Build the refreshment
// Insert the bean in the list
// It returns the list
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query for advanced search
// Query without tags
// Query with tags
// You run the query
// We create the objects to be returned
// This creates the cultural
// Insert the bean in the list
// It returns the list
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variables for database connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query for a list of all the refreshment
// You run the query
// List that will contain the BeanPuntoDiRistoro
// We create the objects to be returned
// Build the refreshment
// Insert the bean in the list
// It returns the list
// Always runs and takes care to close the Result, the Statement
// And Connection</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBStatisticheLocalita</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class DBStatisticheLocalita implements IDBStatisticheLocalita

/**
* Class that implements the local statistical
*
* @ Author Joseph Martone
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class DBStatisticheLocalita implements IDBStatisticheLocalita
(
// Empty constructor
public DBStatisticheLocalita ()

public double ottieniMedieVotiLocalita (String plocalita)
throws SQLException

// Empty constructor
// Variable for the connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query for the extraction of location between the PR and BC
// The query is executed
// We extract the results from the result set and moves in
// List
// To be returned
// List that includes the results obtained
// Add to the list the locations obtained
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variable for the connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to extract the average of the votes of catering outlets
// According to a Passo
// The query is executed
// We extract the results from the result set
// Query to extract the average of the votes of cultural
// According to a Passo
// The query is executed
// We extract the results from the result set
// It returns the average of the refreshment and heritage
// Always runs and takes care to close the Result, the Statement
// And Connection</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBTag</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali.test.stub;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.repository.IDBTag;

public class DBTag implements IDBTag

public class DBTag implements IDBTag
(
private ArrayList &lt;BeanTag&gt; b;

public DBTag ()

public boolean aggiungeTagBeneCulturale (pIdBeneCulturale int, int pIdTag)
throws SQLException

public boolean aggiungeTagPuntoDiRistoro (pIdPuntoDiRistoro int, int pIdTag)
throws SQLException

public boolean cancellaTag (int pIdTag) throws SQLException

public boolean cancellaTagBeneCulturale (pIdBeneCulturale int, int pIdTag)
throws SQLException

public boolean cancellaTagPuntoDiRistoro (pIdPuntoDiRistoro int, int pIdTag)
throws SQLException

public boolean inserisciTag (BeanTag ptagi) throws SQLException

public boolean modificaTag (BeanTag ptagi) throws SQLException

public BeanTag ottieniTag (int pid) throws SQLException

// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBTurista</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali.test.stub;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.repository.IDBTurista;

public class DBTurista implements IDBTurista

public class DBTurista implements IDBTurista
(

public boolean cancellaBeneCulturalePreferito (int pIdTurista,
pIdBeneCulturale int) throws SQLException

public boolean cancellaPuntoDiRistoroPreferito (int pIdTurista,
pIdPuntoDiRistoro int) throws SQLException

public boolean delete (int pIdTurista) throws SQLException

public boolean inserisciBeneCulturalePreferito (int pIdTurista,
pIdBeneCulturale int) throws SQLException

public boolean inserisciPuntoDiRistoroPreferito (int pIdTurista,
pIdPuntoDiRistoro int) throws SQLException

public boolean inserisciTurista (BeanTurista pTurista) throws SQLException

public boolean modificaTurista (BeanTurista pTurista) throws SQLException

public BeanTurista ottieniTurista (String pUsername) throws SQLException

public BeanTurista ottieniTurista (int pIdTurista) throws SQLException

public ArrayList &lt;BeanTurista&gt; ottieniTuristi (String pUsernameTurista)
throws SQLException

public ArrayList &lt;BeanTurista&gt; ottieniTuristi (boolean condition)
throws SQLException

// ArrayList &lt;BeanTurista&gt; t = new ArrayList &lt;BeanTurista&gt; (0);
// T.add (New BeanTurista (1, &quot;username&quot;, &quot;Astrubale&quot;, &quot;Silberschatz&quot;, &quot;Naples&quot;, &quot;Naples&quot;, &quot;0111111&quot;, &quot;80100th&quot;, &quot;Way of the systems, 1&quot;, &quot;NA&quot; ,
// &quot;Trapano@solitario.it&quot;, &quot;passwordsolomia&quot;, new Date (), new Date (), true));
//
// T.add (new BeanTurista (1, &quot;username&quot;, &quot;Astrubale&quot;, &quot;Silberschatz&quot;, &quot;Naples&quot;, &quot;Naples&quot;, &quot;0111111&quot;, &quot;80100th&quot;, &quot;Way of the systems, 1&quot;, &quot;NA&quot; ,
// &quot;Trapano@solitario.it&quot;, &quot;passwordsolomia&quot;, new Date (), new Date (), true));
//
// Return t;</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBVisitaBC</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali.test.stub;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.bean.BeanVisitaPR;
import unisa.gps.etour.repository.IDBVisitaBC;

public class DBVisitaBC implements IDBVisitaBC

public class DBVisitaBC implements IDBVisitaBC
(
public boolean inserisciVisitaBC (BeanVisitaBC PVIS) throws SQLException

public boolean modificaVisitaBC (BeanVisitaBC PVIS) throws SQLException

public BeanVisitaBC ottieniVisitaBC (pIdBeneCulturale int, int pIdTurista)
throws SQLException

// FinteVisite.add (new BeanVisitaBC (5, 1, &quot;This show is not 'evil', 1, new Date (new Date (). GetTime () - (unisa.gps.etour.util.CostantiGlobali.TRENTA_GIORNI * 1 ))));
// FinteVisite.add (new BeanVisitaBC (1, 1, &quot;E 'nice but you pay so much!&quot;, 2, new Date (106, 0, 23)));
// FinteVisite.add (new BeanVisitaBC (3, 1, &quot;The food is pretty good!&quot;, 1, new Date (106, 3, 23)));
// FinteVisite.add (new BeanVisitaBC (4, 1, &quot;We eat very well!&quot;, 2, new Date (107, 4, 4)));
// FinteVisite.add (new BeanVisitaBC (1, 1, &quot;We eat!&quot;, 3, new Date (107, 5, 24)));
// FinteVisite.add (new BeanVisitaBC (5, 1, &quot;Beautiful place&quot;, 4, new Date (107, 4, 25)));
// FinteVisite.add (new BeanVisitaBC (4, 1, &quot;Excellent views of the sea&quot;, 5, new Date (107, 4, 25)));
// FinteVisite.add (new BeanVisitaBC (3, 1, &quot;Bell&quot;, 6, new Date (107, 4, 25)));
// FinteVisite.add (new BeanVisitaBC (3, 1, &quot;I think it's a bad place&quot;, 7, new Date (107, 4, 26)));
// FinteVisite.add (new BeanVisitaBC (3, 1, &quot;W open air&quot;, 8, new Date (107, 4, 27)));
// FinteVisite.add (new BeanVisitaBC (5, 1, &quot;better than others&quot;, 9, new Date (107, 5, 2)));
// FinteVisite.add (new BeanVisitaBC (3, 1, &quot;Forza Napoli&quot;, 10, new Date (107, 5, 8)));
// FinteVisite.add (new BeanVisitaBC (4, 1, &quot;The food is pretty good!&quot;, 11, new Date (107, 5, 9)));
// FinteVisite.add (new BeanVisitaBC (5, 1, &quot;We eat very well!&quot;, 12, new Date (107, 5, 11)));
// FinteVisite.add (new BeanVisitaBC (4, 1, &quot;very good&quot;, 13, new Date (107, 5, 12)));
// FinteVisite.add (new BeanVisitaBC (5, 1, &quot;very good&quot;, 14, new Date (107, 5, 13)));
// FinteVisite.add (new BeanVisitaBC (5, 1, &quot;I was really good&quot;, 15, new Date (107, 5, 13)));
// FinteVisite.add (new BeanVisitaBC (4, 1, &quot;good place&quot;, 16, new Date (107, 5, 14)));
// FinteVisite.add (new BeanVisitaBC (3, 1, &quot;I guess I'm not going back&quot;, 17, new Date (107, 5, 23)));
// FinteVisite.add (new BeanVisitaBC (3, 1, &quot;I think there is better&quot;, 18, new Date (107, 5, 24)));
// FinteVisite.add (new BeanVisitaBC (2, 1, &quot;sucks&quot;, 19, new Date (107, 5, 24)));
// FinteVisite.add (new BeanVisitaBC (5, 1, &quot;Too beautiful&quot;, 20, new Date (107, 5, 25)));</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DBVisitaPR</id>
      <content>package unisa.gps.etour.repository;

import Java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanVisitaPR;

public class DBVisitaPR implements IDBVisitaPR

/**
* Class that implements the interface IDBVisitaPR
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class DBVisitaPR implements IDBVisitaPR
(
// Empty constructor
public DBVisitaPR ()

public boolean inserisciVisitaPR (BeanVisitaPR PVIS) throws SQLException

public boolean modificaVisitaPR (BeanVisitaPR PVIS) throws SQLException

public BeanVisitaPR ottieniVisitaPR (pIdPuntoDiRistoro int, int pIdTurista)
throws SQLException

// Empty constructor
// Variable for the connection
// Variable for the query
// Variable for the query results
// Create the date of visit
// Get the connection
// Create the Statement
// Query to get the average rating of a property
// Variable for the average rating
// Variable for the number of votes
// Query for the insertion
// You run the insert query
// This returns the backup
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variable for the connection
// Variable for the query
// Create the date of visit
// Get the connection
// Create the Statement
// Query for amendment
// You run the query for Change
// This returns the backup
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variable for the connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to extract the list of requests for a
// Refreshment
// The query is executed
// We extract the results from the result set and moves in
// List
// To be returned
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variable for the connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query to extract the list of requests for a
// Eating place for tourists
// The query is executed
// List that will contain the BeanVisitaPR
// We extract the results from the result set and moves in
// List
// To be returned
// Add to the list BeanVisitaPR
// Return the list
// Always runs and takes care to close the Result, the Statement
// And Connection
// Variable for the connection
// Variable for the query
// Variable for the query results
// Get the connection
// Create the Statement
// Query for the extraction of the visit made by a tourist to
// A given point of comfort
// The query is executed
// Get the bean's visit sought based on the ID of the tourist and
// Of refreshment
// Create the BeanVisitaPR
// Return the BeanTemp
// Always runs and takes care to close the Result, the Statement
// And Connection</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_DeskManager</id>
      <content>package unisa.gps.etour.gui;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.DefaultDesktopManager;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import unisa.gps.etour.gui.operatoreagenzia.IScheda;

public class DeskManager extends DefaultDesktopManager

/**
* Class for handling custom internal frame inserted in a
* JDesktopPane.
*
* @ Version 0.1
* @ Author Mario Gallo
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class DeskManager extends DefaultDesktopManager
(
private static final String URL_IMAGES = &quot;/ unisa / gps / eTour / gui / images /&quot;;
private JPopupMenu deskMenu;
private JMenuItem riduciTutti;
private JMenuItem ripristinaTutti;
private JMenuItem Closeall;
private Vector &lt;JInternalFrame&gt; iconifiedFrames;
private int locationX;
private int locationY;

/**
* Default Constructor.
*/
public DeskManager ()

/**
* Manages the movement of JInternalFrame inside the area of
* JDesktopPane, preventing the frames are brought out of the visible area.
*
* @ Param javax.swing.JComponent AComponent - the component of which
* Manage the move.
* @ Param int x - x cordinate the point where it was moved
* Component.
* @ Param int y - y cordinate the point where it was moved
* Component.
*/

public void dragFrame (AComponent JComponent, int x, int y)

/**
* Customize the action of reducing the JInternalFrame an icon, creating
* Clickable bars on the bottom of JDesktopPane.
*
* @ Param JInternalFrame frame - a frame inside a
* JDesktopPane.
*/

public void iconifyFrame (JInternalFrame frame)

/**
* Restore the frame from the effect of minimizing, resetting the
* Position and size it had before.
*
* @ Param javax.swing.JInternalFrame frame - a frame inside a
* JDesktopPane.
*/

public void deiconifyFrame (JInternalFrame frame)

/**
* Return the focus to a selected frame, and, if the frame
* Is iconificato, the deiconifica.
*
* @ Param JInternalFrame frame - a frame within a
* JDesktopPane
*/

public void activateFrame (JInternalFrame frame)

/**
* Center the frame supplied as a parameter in JDesktopPane.
*
* @ Param javax.swing.JInternalFrame frame - a frame inside a
* JDesktopPane.
* @ Return void
*/

public void centerFrame (JInternalFrame frame)

/**
* Redraw the frames in the desktop iconificati bread provided.
*
* @ Param javax.swing.JDesktopPane Desk - a desktop bread associated with a
* Desk manager.
* @ Throws IllegalArgumentException - was supplied as a parameter
* JDesktopPane which is not associated with a Desk Manager.
*/

public void repaintIconifiedFrames (JDesktopPane desk)
throws IllegalArgumentException

/**
* Redraw (and resize if necessary) all the frames contained in a
* Since JDesktopPane.
*
* @ Param javax.swing.JDesktopPane Desk - a desktop pane.
* @ Throws IllegalArgumentException - if the desktop bread supply is not
* Associated with a desktop manager like DeskManager.
*/

public void repaintAllFrames (JDesktopPane desk)
throws IllegalArgumentException

/**
* Open a frame of the class specified using the display
* Waterfall. If you already have a frame of classes given, the frame is
* Activated.
*
* @ Param class class - a class type that extends JInternalFrame.
* @ Param javax.swing.JDesktopPane Desk - a desktop pane.
* @ Throws IllegalArgumentException - The class provided is not a
* JInternalFrame.
*/

public void openFrame (Class class, JDesktopPane desk)
throws IllegalArgumentException

/**
* Displays a popup menu with options for frames of a desktop bread
* The selected location.
*
* @ Param java.awt.Point Pointe - the point where to place the menu.
* @ Param javax.swing.JDesktopPane desk - a JDesktopPane which &amp;grave; an associated
* Instance of DeskManager.
* @ Throws IllegalArgumentException - &amp;grave; was provided as a parameter
* JDesktopPane that &amp;grave; not associated with a Desk Manager.
*/

public void showPopupMenu (Point Pointe, JDesktopPane desk)

/**
* Deiconifica all frames previously iconificati.
*
*/

public void deiconifyAll ()

/**
* Minimize all frames of a JDesktopPane provided in &amp;grave; an associated
* DeskManager.
*
* @ Param JDesktopPane Desk - a desktop pane.
* @ Throws IllegalArgumentException - &amp;grave; was provided as a parameter
* JDesktopPane that &amp;grave; not associated with a Desk Manager.
*/

public void iconifyAll (JDesktopPane desk)

/**
* Close all frames in a given JDesktopPane.
*
* @ Param javax.swing.JDesktopPane Desk - a desktop &amp;grave; bread in an associated
* DeskManager.
* @ Throws IllegalArgumentException - &amp;grave; was provided as a parameter
* JDesktopPane that &amp;grave; not associated with a Desk Manager.
*/

public void closeAll (JDesktopPane desk)

/**
* Initialize the DeskMenu.
*
*/

public void initializeDeskMenu ()

public void actionPerformed (ActionEvent aEvent)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_ElencoCategorie</id>
      <content>package unisa.gps.etour.control.fuzzy;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;

public class ElencoCategorie implements Serializable

public class ElencoCategorie implements Serializable
(

/**
* Keeps track of data in each category
*/
private static final long serialVersionUID = 1L;
private Hashtable &lt;string, Categoria&gt; categories, // hash table that keeps
// For each category a
// Class category
private Hashtable &lt;string, float[]&gt; totTermini // hash table that keeps
// The terms of all
// Categories
maxDist float, // contains the maximum distances

/**
* The constructor initializes the two hash tables that contain
* Categories and terms of all categories
*/
public ElencoCategorie ()

/**
* Access method attribute maxDist
*
* @ Return the maximum distance of all the terms in all categories
*/

public float getMaxDist ()

/**
* Access method to the table of categories
*
* @ Return categories
*/
&lt;string, Categoria&gt; getAllCategorie public Hashtable ()
(
return categories;
)

/**
* Method of accessing the table of total time
*
* @ Return totTermini
*/
&lt;string, float[]&gt; getTotTermini public Hashtable ()
(
totTermini return;
)

/**
* Method to access a category in the table of
* Categories
*
* @ Param pNomeCategoria
* @ Return object categories representing the category name
* PNomeCategoria
*/
getCategoria public Category (String pNomeCategoria)
(

if (esisteCategoria (pNomeCategoria)) // if there is the appropriate category
return categorie.get (pNomeCategoria) // returns the
// Assciato to pNomeCategoria

return null, // otherwise null
)

/**
* Method of accessing the values of a particular term in this
* Category table
*
* @ Param pTermine
* @ Return Returns the values associated with the term pTermine
*/

public float [] getTermine (String pTermine)

/**
* Method which allows you to add a category to the table of
* Categories
*
* @ Param pNomeCategoria category name to add
* @ Param object associated pCategoria category
* @ Return true if the operation was successfully carried out false
* Otherwise
*/

public boolean addCategoria (String pNomeCategoria, star pCategoria)

/**
* Edit a category of the category table
*
* @ Param pNomeCategoria category name to edit
* @ Param object pCategoria be associated with this category
* @ Return true if the operation was successfully carried out false
* Otherwise
*/

public boolean setCategoria (String pNomeCategoria, star pCategoria)

/**
* Method which allows you to set the value of a term in the tables
* Total time
*
* @ Param name pTermine term
* @ Param pVal value to associate with the term
*/

public void setTermine (String pTermine, float [] pVal)

/**
* Method which allows the value of the seven kings of the maximum distance of
* Terms from one category
*
* @ Param pMaxDist
*/

public void setMaxDist (float pMaxDist)

/**
* Method which allows to derive a collection of names of iterable
* All categories in the categories tabela
*
* @ Return string iterable Collection
*/

public Iterable &lt;String&gt; Categories ()

/**
* Method aids to verify the existence of a category
* In the table of categories
*
* @ Param name of the category PKEY
* @ Return true if the category exists false otherwise
*/

public boolean esisteCategoria (String PKEY)

/**
* Method aids to verify the existence of a term
* In the table of total time
*
* @ Param PKEY term
* @ Return true if the term exists false otherwise
*/

public boolean esisteTermine (String PKEY)

// hash table that keeps
// For each category a
// Class category
// hash table that keeps
// The terms of all
// Categories
// contains the maximum distances
// if there is the appropriate category
// returns the
// Assciato to pNomeCategoria
// otherwise null
// if the term is present in tebella
// Terms of total
// return the vaolre
// Associate
// null otherwise
// if the category exists
// returns false
// otherwise load the
// Category in the table
// returns true
// if the category does not exist
// returns false
// update the table of
// Catogorie
// returns true
// create a new list
// iterates
// N
// Times
// Where
// N is
// The
// Number
// By
// Categories
// Current
// In
// Table
// adds to the list the name of
// A category
// try to extract the category name PKEY
// The table of categories
// if the transaction does not raise exceptions category
// Exists and returns true
// false otherwise
// see esisteCategoria</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_FeedBackTableModel</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.bean.BeanVisitaPR;

public class extends

/** FeedbackTableModel.java
*
* 1.0
*
* 21/05/2007
*
* 2007 eTour Project - Copyright by SE @ SA Lab - DMI University of Salerno
*/
package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

table .*;

import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.bean.BeanVisitaPR;

/**
* &lt;b&gt; FeedbackTableModel &lt;/ b&gt;
* &lt;p&gt; 'Container model of data for feedback received
* To be a cultural or a refreshment. &lt;/ P&gt;
*
* @ See javax.swing.table.AbstractTableModel
* @ See unisa.gps.etour.bean.BeanVisitaBC
* @ See unisa.gps.etour.bean.BeanVisitaPR
* @ Version 1.0
* @ Author Mario Gallo
*
*/

public class extends FeedBackTableModel AbstractTableModel
(

private static final long serialVersionUID = 1L;
private static final String [] headers = ( &quot;rating&quot;, &quot;Comment&quot;,
&quot;Release Date&quot;, &quot;Issued by&quot;)

/**
* Default Constructor. We only provide the model but not
* Loads no data in it.
*
*/
public FeedBackTableModel ()
(
&lt;Object[]&gt; data = new ArrayList ();
)

/**
* Constructor that takes as input an ArrayList of BeanVisitaBC or
* BeanVisitaPR and copies of the data within the model
* Preparing for display.
*
* @ Param PVIS java.util.ArrayList - the ArrayList of bean.
*/
public FeedBackTableModel (HashMap &lt;?, String&gt; pDatiFeedback)
(
this ();
if (pDatiFeedback == null | | pDatiFeedback.size () == 0)
(
return;
)
Iterator &lt;?&gt; Iter = pDatiFeedback.keySet (). Iterator ();
while (itera.hasNext ())
(
Object current = itera.next ();
if (current instanceof BeanVisitaBC)
(
insertVisitaBC ((BeanVisitaBC) current pDatiFeedback.get (current));
)
else if (current instanceof BeanVisitaPR)
(
insertVisitaPR ((BeanVisitaPR) current pDatiFeedback.get (current));
)
)
)

/**
* Returns the number of columns provided by the model.
*
* @ Return int - the number of columns.
*
*/

public int getColumnCount ()

/**
* Returns the number of rows currently in the model.
*
* @ Return int - the number of rows.
*
*/

public int GetRowCount ()

/**
* Returns the column name from the index provided.
*
* @ Return String - the name of the column.
* @ Exception IllegalArgumentException - if the column index is not provided
* In the model.
*
*/

public String getColumnName (int pColumn) throws IllegalArgumentException

/**
* Returns the object in the model to the row and column provided.
*
* @ Param pRow - the line number.
* @ Param pColumn - the column number.
* @ Return Object - the object contained in the selected cell.
* @ Exception IllegalArgumentException - if the index or the row or column not provided
* Are present in the model.
*
*/

public Object getValueAt (pRow int, int pColumn) throws IllegalArgumentException

/**
* Returns the class of objects in the column of which is provided in the index.
*
* @ Param pColumn - the column number.
* @ Return Class - the class of objects of the selected column.
* @ Exception IllegalArgumentException - if the index column does not pro
* In the model.
*
*/

public class getColumnClass (int pColumn) throws IllegalArgumentException

/**
* Returns whether the selected cell editable.
*
* @ Return boolean - true if the cell editable
* False otherwise
* @ Param pRow - the line number.
* @ Param pColumn - the column number.
* @ Exception IllegalArgumentException - if the index or the row or column are not provided
* In the model.
*
*/

public boolean isCellEditable (pRow int, int pColumn) throws IllegalArgumentException

/**
* The method is inherited by setValueAt TableModel does not need to SitoTableModel
* Because it provided the possibility to change a single cell.
* @ Deprecated
*
*/

public void setValueAt (Object value, int row, int col)

/**
*
* Enter data on the feedback received from a cultural
* In the model from Bean.
*
* @ Param BeanVisitaBC PBC - the bean that contains the feedback from
* Cultural.
* @ Throws IllegalArgumentException - if the parameters supplied input not
* Are valid.
*
*/

public void insertVisitaBC (BeanVisitaBC pVisitaBC, String pUsername) throws IllegalArgumentException

/**
*
* Enter data on the feedback received from a refreshment
* In the model from Bean.
*
* @ Param BeanVisitaPR PBC - the bean that contains the feedback from
* Refreshment.
* @ Throws IllegalArgumentException - if the parameters supplied input not
* Are valid.
*
*/

public void insertVisitaPR (BeanVisitaPR pVisitaPR, String pUsername) throws IllegalArgumentException

/**
*
* Updates the comment feedback contained in the table row selected.
*
PNuovoCommento * @ param String - the new comment.
* @ Param pRow - the row to update.
* @ Throws IllegalArgumentException - if &lt;ul&gt; &lt;li&gt; the row index is not present in the model.
* &lt;li&gt; New comment supplied input is zero. &lt;/ Ul&gt;
*/

public void modificaCommento (pNuovoCommento String, int pRow) throws IllegalArgumentException

/**
*
* Returns the id of the row receive feedback provided on input.
*
* @ Param pRow int - the row number.
* @ Return int [] - the id of the feedback.
* @ Throws IllegalArgumentException - if the row index does not pro
* In the model.
*/

public int [] getIDFeedback (int pRow) throws IllegalArgumentException

/**
*
* Returns the id of feedback to line number provided as input and removes it from the model.
*
* @ Param pRow int - the row number.
* @ Return int [] - the id of the feedback.
* @ Exception IllegalArgumentException - if the row index does not pro
* In the model.
*
*/

public int [] removeFeedback (int pRow) throws IllegalArgumentException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_Fuzzy</id>
      <content>package unisa.gps.etour.control.fuzzy;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.rmi.RemoteException;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Scanner;

public class Fuzzy

public class Fuzzy
(
/**
* Class that implements the methods used to calculate the Fuzzy
* Category of membership of a refreshment or a cultural property.
*//**
* Method for calculating the relevance of a term.
*
* @ Param distance: Contains the distance of the term from category
* Analyzed
* @ Param pMaxDist: Contains distaza maximum of all terms in all
* Categories.
* @ Return Returns the relevance of the term in the category.
*/
private static float relevance (float distance, float pMaxDist)

/**
* Method for calculating the distance between a term and a category
*
* @ Param pTermine: Contains the period analyzed
* @ Param pTotTermini: Tables of the total frequency of terms.
* @ Param frequenzaTesto: Table of the terms of the text analyzed.
* @ Param pCategoria: Category analyzed.
* @ Return Returns the distance of the term pTermine by category
* PCategoria
*/

private static float distance (String pTermine,
Hashtable &lt;string, float[]&gt; pTotTermini, float frequenzaTesto,
Category pCategoria)

/**
* Method for calculating the distance of a term from one category.
* Used for training
*
* @ Param pTermine period to analyze
* @ Param pCategoria category from which you must calculate the distance
* @ Param table pTotTermini total time
* @ Return Returns the distance of a term from one category
*/

private static float distance (String pTermine, star pCategoria,
Hashtable &lt;string, float[]&gt; pTotTermini)

/**
* Implementation of a function T-Norm
*
* @ Param a first value
* @ Param b the second value
* @ Return returns the value calculated using a function T-Norm
*/

private static float tNorm (float a, float b)

/**
* Implementation of a function S-Norm
*
* @ Param a first value
* @ Param b the second value
* @ Return returns the value calculated using a function S-Norm
*/

private static float sNorm (float a, float b)

/**
* Calculation of similarity between a category and a given text input
*
* @ Param table pTermini worded. It must contain to
* Pgni term values of importance and belonging situated in
Vector float * in positions 1 and 2.
* @ Return returns a numeric value that indicates the similarity of a
* Text with the category on which one has calculated the values of
Importance and belonging *
*/

private static float similarity (Hashtable &lt;string, float[]&gt; pTermini)

/**
* Method for the calculation of membership of a text to a category
*
* @ Param val indicates the similarity of a text with a category
* @ Param maxSimilarity indicates the maximum similarity found
* @ Return restiuisce a value in the interval [0,1] that indicates the degree of
* Membership of the text to the category x
*/

private static float membership (float val, float maxSimilarity)

/**
* Method to delete a tense special characters and to bring
* All uppercase to lowercase
*
* @ Param string pStr transform
* @ Return restiuisce the text to lowercase characters and no special
*/

private static String replaceAndLower (String pStr)

/**
* Method of retrieving the category you belong to a text
*
* @ Param pDescrizione text to analyze
Restu * @ return a string indicating the category
* @ Throws RemoteException
*/

public static String calcolaCategoria (String pDescrizione)
throws RemoteException

/**
* Method to find the category with which the text has the highest degree of
* Membership
*
* @ Param pTestoCategoria table of categories to the text
Restiuisce * @ return a string indicating the name of the category with which
* The text has the highest degree of membership
*/

private static String maxAppartenenza (
Hashtable &lt;string, float[]&gt; pTestoCategoria)

/**
* Method used to check whether a term is presented in table
* The terms of the text
*
* @ Param pStr period to analyze
* @ Param pTable tables in terms of the text
* @ Return returns true if the term exists false otherwise
*/

private static boolean exists (String pStr, Hashtable &lt;string, float[]&gt; pTable)

/**
* Method used to retrieve the knowledge base
*
Restiuisce * @ return an object representing the type ElencoCategorie
* KnowledgeBase
* @ Throws IOException
* @ Throws ClassNotFoundException
*/

private static ElencoCategorie apriElenco () throws IOException,
ClassNotFoundException

/**
* Method used to create the file. Used in training
*
* @ Param path string indicating the path in which to create the file
* @ Return returns an ObjectOutputStream to the file created
* @ Throws IOException
*/

private static ObjectOutputStream CreateFile (String path)
throws IOException

/**
* Method used to create the knowledge base
*
* @ Throws RemoteException
*/

public static void training () throws RemoteException

//**
// The first variable tracks the frequency of a term
// Relating to a category
// The second keeps track of fraquenza a deadline for all
// Categories
// if the term is
// In category
// Its frequency in this category is equal to the frequency
// KnowledgeBase
// More frequency in the search text
// Otherwise it is equal to the frequency of the term in the text
// Analyzed
// if the term exists in
// Table of the total time
// Get the value
// the total frequency is given
// Frequency in the text
// Analizzatp
// Plus any frequency stored in memory in the table
// Total time
// distance is
// Equal to
// Frequency in
// Category
// The total frequency Fratto
// Return Math.min (a, b);
// Return a * b;
// Return Math.max (0, a + b-1);
// Return Math.max (a, b);
// Return (a + b-(a * b));
// Return Math.min (1.1 + b);
// return value
// for all elements of
// Table
// performs
// Sum of the values given by the division of function T-Norm
// With the function S-Norm made
// Between relevance and belonging
// Table of terms associated with the text portion. Will contain
// Values of frequency, rilevamza, membership for each term
// Table of categories, each category will contain the value of
// Similarity and belonging Text
// delete characters and spaeciali
// Returns the text by replacing
// Uppercase with lowercase
// For each end of the text
// value to assign to the string
// In the hash table
// temporary variable containing the values
// Associated with the string if it already exists in the hash table
// If the string is present in the table picks up the values
// And an increase in saving them in to put
// Otherwise initialize the new string with frequency = 1
// delete undefined terms
// As important, the inter ...
// if the time analyzed
// Is present in tebella the terms of the analyzed text
// We get the value of frequency in the table and there
// Adds one
// Otherwise initialize the value of frequency to a
// Fratto, the total number of terms (relative frequency)
// Insert the new entry in the table
// System.out.println (toPut [0]);
// You try to open the knowledge base
// error opening file kb.sbt
// Is taken from the base of knowledge to the table of total time
// holds the value of maximum similarity
// For all the categories in the knowledge base
// value to assign to the string
// In the hash table
// For all elements of the table of the terms of the text
// We get the value of a term
// Calculate range and bearing
// We calculate the similarity Once the analysis
// All the terms in a category
// we update the value of maximum
// If necessary similarity
// For each category
// We get the value of similarity of the text with the category
// Analyzed
// we calculate
// Membership
// Text to the similarity
// save everything in
// Category table
// returns the name output
// Category
// With the maximum degree of membership
// return value
// Maximum value of membership
// For all categories of the table of categories of text
// Values are taken of similarity and belonging associated with
// Category
// If the degree of membership affiliation just uploaded
// Is greater than the previous update data max and toReturn
// you open the file kb.sbt
// creates
// A stream with the file
// si
// Create a stream object with the file
// Object is extracted and saved in the file returned in output
// file is created
// create the stream
// array contenentei names
// Of categrie be analyzed
// Knowledge base
// Try to create the file
// ElencoCategorie [3 ]=&quot;&quot;;
// for each category
// Create a new object of type Category, which will contain all
// Category data to be analyzed
// If the inclusion of the category in the table of categories
// Not successful
// We throw an exception
// You try to read from the folder containing the lyrics of a
// Category
// 100 sample test
// Path of the folder categria
// Try to read the file ith
// If the file does not exist it continues execution from
// File i +1
// System.out.println ( &quot;Error on file&quot; + path);
// Read the text file line by line
// For each end of the line
// remove the effect
// Undefined terms
// Relevant
// If the term is present in the table of terms
// The class analyzed
// Its frequency is equal to the value stored in
// Table plus one fratto the total number of
// Terms of the text
// otherwise it is equal to one fratto the total number of words of text
// save the values calculated in the table of terms of the category analyzed
// for each category
// is preflushed the table of terms
// all the terms are analyzed in the table of loaded terms
// is effattuato calculating bearing and distance
// data is stored in the table of the terms of the class
// writing the results of operations on files</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneAdvertisement</id>
      <content>package unisa.gps.etour.control.GestioneAdvertisement;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import unisa.gps.etour.bean.BeanBanner;
import unisa.gps.etour.bean.BeanConvenzione;
import unisa.gps.etour.repository.DBBanner;
import unisa.gps.etour.control.GestioneAdvertisement.test.stubs .*;
import unisa.gps.etour.repository.DBConvenzione;
import unisa.gps.etour.repository.IDBBanner;
import unisa.gps.etour.repository.IDBConvenzione;
import unisa.gps.etour.util.ControlloDati;
import unisa.gps.etour.util.CostantiGlobali;
import unisa.gps.etour.util.MessaggiErrore;

public class extends implements
IGestioneAdvertisement

/**
* Class that implements the general
* Management dell'advertisement.
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno
*/
package unisa.gps.etour.control.GestioneAdvertisement;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import unisa.gps.etour.bean.BeanBanner;
import unisa.gps.etour.bean.BeanConvenzione;
import unisa.gps.etour.repository.DBBanner;
// import unisa.gps.etour.control.GestioneAdvertisement.test.stubs .*;
import unisa.gps.etour.repository.DBConvenzione;
import unisa.gps.etour.repository.IDBBanner;
import unisa.gps.etour.repository.IDBConvenzione;
import unisa.gps.etour.util.ControlloDati;
import unisa.gps.etour.util.CostantiGlobali;
import unisa.gps.etour.util.MessaggiErrore;

GestioneAdvertisement UnicastRemoteObject public class extends implements
IGestioneAdvertisement
(
private static final long serialVersionUID = 1L;
/** An object that handles operations on the banner */
Private IDBBanner dbBanner;
/**
* Constructor, instantiates an object of type DBBanner that
* Contains methods that perform operations on data
* Entity banner.
*
* @ Throws RemoteException
*/
public GestioneAdvertisement () throws RemoteException
(
super ();
dbBanner = new DBBanner ();
)
/**
* Delete a banner and the image associated with the system.
*
* @ Param id of the banner to remove pBannerID
* @ Throws RemoteException
*/

public boolean cancellaBanner (int pIdBanner) throws RemoteException

/**
* Method to change the image associated with the banner:
* Delete the old image and stores the new
* Enjoy the same path as the old image.
*
* @ Param id pBannerID banner
* @ Param pImmagine ImageIcon object containing the new image of the banner
* @ Return returns true if the operation is successful
*/

public boolean modificaBanner (int pBannerID, Imagelcon pImmagine) throws RemoteException

/**
* Returns a list of banners for a refreshment.
* Use the method (@ link) DBBanner.ottieniBanner
*
* @ Param ID pPuntoDiRistoroID refreshment
* @ Throws RemoteException
*/
&lt;BeanBanner,ImageIcon&gt; ottieniBannersDaID public HashMap (int pIdPuntoDiRistoro)
throws RemoteException (
/ * Create a HashMap that will hold the banner and associated images */
&lt;BeanBanner,ImageIcon&gt; ToReturn HashMap &lt;BeanBanner, ImageIcon&gt; = new HashMap ();

TRY
(
/ * Get the list of banners for a refreshment point */
ArrayList &lt;BeanBanner&gt; listaBanner = dbBanner.ottieniBanner (pIdPuntoDiRistoro);
/ * For each banner valid list */
for (BeanBanner banner: listaBanner) (
/ * If the banner is a valid charge in the HashMap with the image file */
if (ControlloDati.checkBeanBanner (banner)) (
/ * Create the image file */
FileImmagine file = new File (banner.getPercorsoFile ());
/ * Create an object ImageIcon from the image file */
ImageIcon icon = new ImageIcon (ImageIO.read (fileImmagine));
/ * Add the banner and the image all'HashMap */
toReturn.put (banner, icon);
)
)
toReturn return;
)
catch (SQLException e) (
throw new RemoteException (MessaggiErrore.ERRORE_CONNESSIONE_DBMS);
)
catch (Exception e) (
throw new RemoteException (MessaggiErrore.ERRORE_FILE);
)
catch (Exception e) (
throw new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);
)
)
/**
* Create and insert a new banner, making sure the num. maximum
* Banner displayed for a refreshment point is
* Already been reached in this case throws an exception to the calling method.
*
* @ Param Id pIDPuntoDiRistoro of refreshment
* @ Param pImmagineBanner ImageIcon object containing the banner image
* @ Return Returns true if the insertion has been successful.
* @ Exception RemoteException
*/

public boolean inserisciBanner (int pIdPuntoDiRistoro, Imagelcon pImmagineBanner)
throws RemoteException

// import unisa.gps.etour.control.GestioneAdvertisement.test.stubs .*;</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneAdvertisementAgenzia</id>
      <content>package unisa.gps.etour.control.GestioneAdvertisement;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanNews;
import unisa.gps.etour.control.GestioneAdvertisement.test.stubs.DBNews;
import unisa.gps.etour.repository.DBNews;
import unisa.gps.etour.repository.IDBNews;
import unisa.gps.etour.util.ControlloDati;
import unisa.gps.etour.util.CostantiGlobali;
import unisa.gps.etour.util.MessaggiErrore;

public class GestioneAdvertisementAgenzia extends GestioneAdvertisement
implements IGestioneAdvertisementAgenzia

/**
* Implementing the management dell'advertisement
* For the operator agency. Contains methods for managing
* News.
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno
*/
package unisa.gps.etour.control.GestioneAdvertisement;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;

import unisa.gps.etour.bean.BeanNews;
/ * Import the stub *// / import unisa.gps.etour.control.GestioneAdvertisement.test.stubs.DBNews;
import unisa.gps.etour.repository.DBNews;
import unisa.gps.etour.repository.IDBNews;
import unisa.gps.etour.util.ControlloDati;
import unisa.gps.etour.util.CostantiGlobali;
import unisa.gps.etour.util.MessaggiErrore;

public class GestioneAdvertisementAgenzia extends GestioneAdvertisement
implements IGestioneAdvertisementAgenzia
(
private static final long serialVersionUID = 1L;
/** Contains the methods for collecting news in the database */
Private IDBNews dbNews;

/**
* Constructor. Instantiates an object of type (@ link unisa.gps.etour.repository.DBNews).
*
* @ Throws RemoteException
*/
public GestioneAdvertisementAgenzia () throws RemoteException
(
super ();
dbNews = new DBNews ();
)

/**
* Method which removes news from the database. Uses the
* (@ Link Boolean unisa.gps.etour.repository.IDBNews # cancellaNews (int))
*
* @ Param id pNewsID news be erased.
* @ Return true if the cancellation was successful or FALSE otherwise.
* @ Throws RemoteException
*
*/

public boolean cancellaNews (int pNewsID) throws RemoteException

/**
* Insert a new news in the database.
* Use the method (@ link unisa.gps.etour.repository.IDBNews # inserisciNews (BeanNews))
* To insert the news and the method (@ link unisa.gps.etour.repository.IDBNews # ottieniNews ())
* To count the number of news in the system.
*
* @ Param Pnews bean containing data news.
* @ Return true if the insertion is successful, false if it was
* Reached the maximum number of news stored or if the insertion fails.
* @ Throws RemoteException
*/

public boolean inserisciNews (BeanNews Pnews) throws RemoteException

/**
* Method to change data of a news.
* Use the method (@ link unisa.gps.etour.repository.IDBNews # modificaNews (BeanNews)).
*
* @ Param Pnews bean containing the data of news changed.
* @ Return true if the change goes through.
* @ Throws RemoteException
*/

public boolean modificaNews (BeanNews Pnews) throws RemoteException

/**
* Method that returns an array containing all the news stored in the system.
* Use the method (@ link unisa.gps.etour.repository.IDBNews # ottieniNews ()).
*
* @ Return ArrayList containing beans of news.
* @ Throws RemoteException
*/

// / import unisa.gps.etour.control.GestioneAdvertisement.test.stubs.DBNews;</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneAdvertisementPuntoDiRistoro</id>
      <content>package unisa.gps.etour.control.GestioneAdvertisement;

import java.rmi.RemoteException;

public class GestioneAdvertisementPuntoDiRistoro extends GestioneAdvertisement
implements IGestioneAdvertisementPuntoDiRistoro

public class GestioneAdvertisementPuntoDiRistoro extends GestioneAdvertisement
implements IGestioneAdvertisementPuntoDiRistoro
(

private static final long serialVersionUID = 1L;

/**
* Constructor, call the constructor of the superclass.
* @ Throws RemoteException
*/
public GestioneAdvertisementPuntoDiRistoro () throws RemoteException

/**
* Class that implements management services dell'advertisement
* For the operator eating place.
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneBeniCulturaliAgenzia</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.util.MessaggiErrore;

public class GestioneBeniCulturaliAgenzia extends GestioneBeniCulturaliComune
implements IGestioneBeniCulturaliAgenzia

/**
* Class management of cultural heritage unique to Agency
*
* @ Author Michelangelo De Simone
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/

public class GestioneBeniCulturaliAgenzia extends GestioneBeniCulturaliComune
implements IGestioneBeniCulturaliAgenzia
(
/** Constructor of class, richicama and initializes the class of common management
*/
public GestioneBeniCulturaliAgenzia () throws RemoteException

/** Implements the method for the elimination of a cultural system.
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # cancellaBeneCulturale (int)
*/

public boolean cancellaBeneCulturale (int pBeneCulturaleID)
throws RemoteException

/** Implement the method for the insertion of a new cultural object.
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # inserisciBeneCulturale (unisa.gps.etour.bean.BeanBeneCulturale)
*/

public boolean inserisciBeneCulturale (BeanBeneCulturale pBeneCulturale)
throws RemoteException

/** Implements the method for obtaining all the cultural assets currently in the system.
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # ottieniBeniCulturali ()
*/
&lt;BeanBeneCulturale&gt; ottieniBeniCulturali public ArrayList () throws RemoteException
(
TRY
(
return (dbbc.ottieniListaBC ());
)
catch (SQLException e)
(
throw new RemoteException (MessaggiErrore.ERRORE_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);
)
)

/** Implement the method for changing a cultural asset in the system.
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # modificaBeneCulturale (unisa.gps.etour.bean.BeanBeneCulturale)
*/

public boolean modificaBeneCulturale (BeanBeneCulturale pBeneCulturale)
throws RemoteException

/** Implements the method for adding a tag to a cultural object.
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # aggiungiTagBeneCulturale (int, int)
*/

public boolean aggiungiTagBeneCulturale (pBeneCulturaleID int, int pTagID) throws RemoteException

/** This segment of code that actually controls the cultural speficiato
* Have the tag defined.
*//** Get all tags to the cultural past for parameter
*/
ArrayList &lt;BeanTag&gt; tempTag = null;

contieneTag boolean = false;

TRY
(
tempTag = dbtag.ottieniTagBeneCulturale (pBeneCulturaleID);
)
catch (SQLException e)
(
throw new RemoteException (MessaggiErrore.ERRORE_DBMS);
)

/** Here we iterate to find the tag that speficiato, if it is you set a sentry
* In order not to add a tag twice for the same cultural object.
*/
for (t BeanTag: tempTag)
if (t.getId () == pTagID)
contieneTag = true;

if (! contieneTag)
TRY
(
return (dbtag.aggiungeTagBeneCulturale (pBeneCulturaleID, pTagID));
)
catch (SQLException e)
(
throw new RemoteException (MessaggiErrore.ERRORE_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);
)

return false;
)

/** Implement the method for removing a tag from a cultural object.
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia # rimuoviTagBeneCulturale (int, int)
*/

public boolean rimuoviTagBeneCulturale (pBeneCulturaleID int, int pTagID) throws RemoteException

/** This segment of code that actually controls the cultural speficiato
* Has the specified tag.
*/

/** Here we iterate to find the tag that speficiato, if you found the transaction is made
* Removal of the tag and returns control
*/

//** Get all tags to the cultural past for parameter
//** Get all tags to the cultural past for parameter</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneBeniCulturaliComune</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.repository.DBTag;
import unisa.gps.etour.repository.DBBeneCulturale;
import unisa.gps.etour.repository.DBTurista;
import unisa.gps.etour.repository.DBVisitaBC;
import unisa.gps.etour.repository.IDBBeneCulturale;
import unisa.gps.etour.repository.IDBTag;
import unisa.gps.etour.repository.IDBTurista;
import unisa.gps.etour.repository.IDBVisitaBC;
import unisa.gps.etour.util.CostantiGlobali;
import unisa.gps.etour.util.MessaggiErrore;
import unisa.gps.etour.control.GestioneBeniCulturali.test.stub.DBBeneCulturale //***
import unisa.gps.etour.control.GestioneBeniCulturali.test.stub.DBTurista //***
import unisa.gps.etour.control.GestioneBeniCulturali.test.stub.DBVisitaBC //***/**
* Class management of cultural heritage for operations common to all actors
*
* @ Author Michelangelo De Simone
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*//**
*
*/
GestioneBeniCulturaliComune UnicastRemoteObject public class extends implements
IGestioneBeniCulturaliComune
(
// Connect to DB for Cultural Heritage
protected IDBBeneCulturale dbbc;

public class extends implements
IGestioneBeniCulturaliComune

/***
import unisa.gps.etour.control.GestioneBeniCulturali.test.stub.DBTurista //***
import unisa.gps.etour.control.GestioneBeniCulturali.test.stub.DBVisitaBC //***/**
* Class management of cultural heritage for operations common to all actors
*
* @ Author Michelangelo De Simone
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*//**
*
*/
GestioneBeniCulturaliComune UnicastRemoteObject public class extends implements
IGestioneBeniCulturaliComune
(
// Connect to DB for Cultural Heritage
protected IDBBeneCulturale dbbc;

// Connect to DB Tag
protected IDBTag dbtag;

// Connect to DB for the Feedback / Visits
protected IDBVisitaBC dbvisita;

// Connect to DB for Tourists
protected IDBTurista dbturista;

/**
* Constructor; you instantiate all fields relevant to data management;
* Fields are initialized for each instance of the class.
*
* @ Throws RemoteException Exception flow
*/
public GestioneBeniCulturaliComune () throws RemoteException
(
// Class Supercostruttore UnicastRemoteObject
super ();

// We instantiate objects
TRY
(
dbbc = new DBBeneCulturale ();
dbtag = new DBTag ();
dbvisita = new DBVisitaBC ();
dbturista = new DBTurista ();
)
catch (Exception e)
(
throw new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);
)
)

/** Implements the method for obtaining a cultural object by Id
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # ottieniBeneCulturale (int)
*/

public BeanBeneCulturale ottieniBeneCulturale (int pBeneCulturaleID) throws RemoteException

/** Implements the method for obtaining all the tags of a cultural object.
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # ottieniTagBeneCulturale (int)
*/
&lt;BeanTag&gt; ottieniTagBeneCulturale public ArrayList (int pBeneCulturaleID) throws RemoteException
(
if (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID))
throw new RemoteException (MessaggiErrore.ERRORE_DATI);

ArrayList &lt;BeanTag&gt; btag = null;

TRY
(
btag = dbtag.ottieniTagBeneCulturale (pBeneCulturaleID);
)
catch (SQLException e)
(
throw new RemoteException (MessaggiErrore.ERRORE_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);
)

btag return;
)

/** Implements the method to obtain the list of feedback and their username on a property
* Cultural specified by Id
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # ottieniFeedbackBeneCulturale (int)
*/
&lt;BeanVisitaBC, String&gt; ottieniFeedbackBeneCulturale public HashMap (int pBeneCulturaleID) throws RemoteException
(
if (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID))
throw new RemoteException (MessaggiErrore.ERRORE_DATI);

HashMap &lt;BeanVisitaBC, String&gt; mappaRitorno;

TRY
(
// Instantiate the map of the same size as the list of BeanVisitaBC
mappaRitorno = new HashMap &lt;BeanVisitaBC, String&gt; (dbvisita.ottieniListaVisitaBC (pBeneCulturaleID). size ());

// For each visit by adding their username
// Here we begin to iterate to add to any visit their username
for (BeanVisitaBC b: dbvisita.ottieniListaVisitaBC (pBeneCulturaleID))
mappaRitorno.put (b, dbturista.ottieniTurista (b.getIdTurista ()). GetUserName ());

)
catch (SQLException e)
(
throw new RemoteException (MessaggiErrore.ERRORE_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);
)

mappaRitorno return;
)

/** Implements the method to obtain statistics about a cultural past
* Through Id
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # ottieniStatisticheBeneCulturale (int)
*/
&lt;Integer&gt; ottieniStatisticheBeneCulturale public ArrayList (int pBeneCulturaleID) throws RemoteException
(
/** This method returns an ArrayList containing 5 elements (0 .. 4).
* For each index more 'one is the number of equivalent value your feedback
* Index number more 'one.
* Even in this case the method is not 'particularly attractive but it does its dirty work
* Fine.
*/

if (! ControlloBeniCulturali.controllaIdBeneCulturale (pBeneCulturaleID))
throw new RemoteException (MessaggiErrore.ERRORE_DATI);

ArrayList &lt;Integer&gt; listaRisultati &lt;Integer&gt; = new ArrayList (5);

// Set all the indices to 0
for (int i = 0; i &lt;5; i + +)
listaRisultati.add (i, Integer.valueOf (0));

// Calculate the date for the last thirty days
Date ultimiTrentaGiorni = new Date (new Date (). GetTime () - CostantiGlobali.TRENTA_GIORNI);

TRY
(
// Get all visits of a certain cultural
// Loop looking for the requests / feedback obtained within the last thirty days
for (BeanVisitaBC b: dbvisita.ottieniListaVisitaBC (pBeneCulturaleID))
if (b.getDataVisita (). after (ultimiTrentaGiorni))
listaRisultati.set (b.getVoto () - 1, Integer.valueOf (listaRisultati.get (b.getVoto () - 1). intValue () + 1));
)
catch (SQLException e)
(
throw new RemoteException (MessaggiErrore.ERRORE_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);
)

listaRisultati return;
)

/** Implement the method for changing a feedback on a cultural past
* Through Id
*
* @ See unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune # modificaFeedbackBeneCulturale (int, unisa.gps.etour.bean.BeanVisitaBC)
*/

public boolean modificaFeedbackBeneCulturale (int pBeneCulturaleID, BeanVisitaBC pBeanVisitaBC) throws RemoteException

/** Please check that the vote has not changed.
* If the vote is changed to an exception is raised
*/

/** If the vote is not changed we proceed to send the message to the method of
* Change the layer's database.
*/

// import unisa.gps.etour.repository.DBBeneCulturale;
// import unisa.gps.etour.repository.DBTurista;
// import unisa.gps.etour.repository.DBVisitaBC;
// Stub
//***
//***
//***/**
//**
// Connect to DB for Cultural Heritage
// Connect to DB Tag
// Connect to DB for the Feedback / Visits
// Connect to DB for Tourists
// Class Supercostruttore UnicastRemoteObject
// We instantiate objects
// Instantiate the map of the same size as the list of BeanVisitaBC
// For each visit by adding their username
// Here we begin to iterate to add to any visit their username
// Set all the indices to 0
// Calculate the date for the last thirty days
// Get all visits of a certain cultural
// Loop looking for the requests / feedback obtained within the last thirty days</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestionePuntiDiRistoroAgenzia</id>
      <content>package unisa.gps.etour.control.GestionePuntiDiRistoro;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import unisa.gps.etour.bean.BeanConvenzione;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.bean.BeanVisitaPR;
import
* Unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBConvenzione;
import unisa.gps.etour.repository.DBConvenzione;
import unisa.gps.etour.repository.DBTurista;
import unisa.gps.etour.repository.IDBConvenzione;
import unisa.gps.etour.util.MessaggiErrore;

public class GestionePuntiDiRistoroAgenzia extends GestionePuntiDiRistoroComune
implements IGestionePuntiDiRistoroAgenzia

/** TEST CASE import
* Unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBConvenzione;
* Import unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBTurista;
*/
import unisa.gps.etour.repository.DBConvenzione;
import unisa.gps.etour.repository.DBTurista;
import unisa.gps.etour.repository.IDBConvenzione;
import unisa.gps.etour.util.MessaggiErrore;

/**
* Class contentente methods for managing Refreshments by
* Operator Agency
*
* @ Author Joseph Morelli
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class GestionePuntiDiRistoroAgenzia extends GestionePuntiDiRistoroComune
implements IGestionePuntiDiRistoroAgenzia
(

private static final long serialVersionUID = 1L;

// Constructor
public GestionePuntiDiRistoroAgenzia () throws RemoteException

public boolean cancellaPuntoDiRistoro (int pPuntoDiRistoroID)
throws RemoteException

public boolean inserisciPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)
throws RemoteException

public ArrayList &lt;BeanPuntoDiRistoro&gt; ottieniPuntiDiRistoro (
statoConvenzione boolean) throws RemoteException

public boolean modificaPuntoDiRistoro (
BeanPuntoDiRistoro pPuntoDiRistoroAggiornato)
throws RemoteException

public BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pPuntoDiRistoroID)
throws RemoteException

public boolean attivaConvenzione (int pPuntoDiRistoroID,
BeanConvenzione pConv) throws RemoteException

public HashMap &lt;BeanVisitaPR, String&gt; ottieniFeedbackPuntoDiRistoro (
pPuntoDiRistoroID int) throws RemoteException

public boolean cancellaTagPuntoDiRistoro (pPuntoDiRistoroId int, int pTagId)
throws RemoteException

public boolean inserisciTagPuntoDiRistoro (pPuntoDiRistoroId int, int pTagId)
throws RemoteException

// Constructor
// Call the constructor of the inherited class to instantiate
// Database connections
// Method that allows the operator to cancel an agency point of
// Refreshment
// Passing as parameter the ID of the same Refreshment
// Check the validity identifier
// Execute the method that clears the Refreshment from the Database
// And in case of operation successful return true
// Exception in operations on database
// Unexpected exceptions due to other factors
// If no operations were successful return false end
// Method that allows the operator to include in the Agency database
// The new Refreshment with the information contained in the bean
// Check the validity of the bean as a parameter and if
// Triggers except remote
// Calling the method of the class that operates on the database
// Insert the new Refreshment
// In the case where the operations were successful end
// Returns true
// Exception in database operations
// Unexpected exceptions due to other factors
// If the operation is not successful return false
// Method for obtaining an ArrayList with all the points Bean
// Refreshments
// ArrayList to return to the end of the method
// Get the list of Refreshments through the class
// Connect to database
// And save the list itself nell'ArrayList
// Exception in operations on database
// Unexpected exceptions due to other factors
// Check the ArrayList to return so as not to pass null values
// To the caller
// Return the ArrayList with all the refreshment
// Method that allows you to get all the refreshment that have
// A Convention on or off depending on the parameter passed
// Array that allows me to store all the refreshment and
// Which will remove
// Depending on the parameter passed to the refreshment active or not
// Array that allows me to store all the refreshment active
// Using the database connection
// Instance to connect to the database
// Connect all proceeds from the refreshment Assets
// Exception in operations on database
// Unexpected exceptions due to other factors
// If you want to get the refreshment active, then return
// Directly to those passed by the connection to the database
// Check the contents dell'ArrayList so as not to return
// Null values to the caller
// Connect all proceeds from the refreshment then
// Perform comparisons
// Exception in operations on database
// Unexpected exceptions due to other factors
// Size dell'ArrayList containing all of gourmet
// Could
// Change size if you remove some element
// Variable that allows me to understand whether to remove a Point
// Refreshments
// From array that then I must return
// First loop to loop through all the ArrayList elements of
// All Refreshments
// Second loop to loop through all the ArrayList elements
// Cones just Refreshments active
// If the catering points in question has the ID equal to one
// Of those assets, then set this to true
// If the catering points in question has a Convention active
// Removes it from those to be returned
// Return the ArrayList obtained
// Method that allows you to change the past as a refreshment
// Parameter
// Check the validity of the bean as a parameter and if
// Trigger an exception remote
// Call the method to change the database connection
// The Refreshment
// Return a positive value if the operation was successful
// End
// Exception in operations on database
// Unexpected exceptions due to other factors
// Return false if the operation is successful you should
// Method to obtain the Bean a particular point
// Refreshment whose
// Identifier is passed as parameter
// Check the validity identifier
// Bean to return to the caller
// Revenue catering points in the issue by connecting to
// Database
// Exception in the database opearazioni
// Unexpected exceptions caused by other factors
// Check the bean to be returned in order not to return null values
// To the caller
// Return the bean of Refreshment
// Method that allows you to activate a particular convention to a Point
// Passed as parameter Refreshments
// Check the validity of parameters passed
// Check the data further
// Instantiate the class to connect to the database
// If the Convention is not yet active, previously provided to
// Activate it locally and then pass the bean to the database changed
// Exception in operations on database
// Unexpected exceptions caused by other factors
// If the operation is successful you should return false
// Method that returns a HashMap containing, for Refreshment
// Passed as a parameter, the feedback associated with it
// Check the ID passed as a parameter
// Instantiate the map and the performance of ArrayList that I will use
// Method
// Here I take the list of all visits to the PR passed as
// Parameter
// Instantiate the map of the same size as the list of
// BeanVisitaPR
// Here we begin to iterate on each visit to add its
// Username
// Recuperto the BeanVisitaPR
// Retrieve the tourist who left the comment that I
// Examining
// Get the username of the Tourist
// Put the pair in the map
// Exception in database operations
// Unexpected exceptions caused by other factors
// Check the return parameter so as not to pass null values
// To the database
// Method to insert a tag from those of a refreshment
// Check the validity of past data
// ArrayList which stores all the tags
// Boolean variable to check if the Refreshment
// Holds the tag you want to delete
// Use the method through the class of database connection
// Exception in the execution of transactions in database
// Unexpected exception due to other factors
// Check if the tag is present cycle currently
// Between those of Refreshment
// If the tag is present among those of eateries, then
// Provides for executing the erase operation
// Exception in implementing the operation on the database
// Unexpected exception due to other factors
// In case something did not come to fruition
// Return false
// Method to delete a tag from those of a refreshment
// The operations are identical to those above, except for
// Control over the presence of the tag from those of Refreshment
// Which should give negative results, and the call here is the method of
// Insert
// Check that the Refreshment has not already specified tag
// Calling the method of adding the class via
// Connect to database
// Return false if some operation is not successful you should</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestionePuntiDiRistoroComune</id>
      <content>package unisa.gps.etour.control.GestionePuntiDiRistoro;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.BeanVisitaPR;
import junit tests
* Unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBPuntoDiRistoro;
import unisa.gps.etour.repository.DBPuntoDiRistoro;
import unisa.gps.etour.repository.DBVisitaPR;
import unisa.gps.etour.repository.DBTag;
import unisa.gps.etour.repository.IDBPuntoDiRistoro;
import unisa.gps.etour.repository.IDBTag;
import unisa.gps.etour.repository.IDBTurista;
import unisa.gps.etour.repository.IDBVisitaPR;
import unisa.gps.etour.util.CostantiGlobali;
import unisa.gps.etour.util.MessaggiErrore;

public class extends implements
IGestionePuntiDiRistoroComune

/** For import junit tests
* Unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBPuntoDiRistoro;
* Import unisa.gps.etour.control.GestionePuntiDiRistoro.test.stub.DBVisitaPR;
*/
import unisa.gps.etour.repository.DBPuntoDiRistoro;
import unisa.gps.etour.repository.DBVisitaPR;
import unisa.gps.etour.repository.DBTag;
import unisa.gps.etour.repository.IDBPuntoDiRistoro;
import unisa.gps.etour.repository.IDBTag;
import unisa.gps.etour.repository.IDBTurista;
import unisa.gps.etour.repository.IDBVisitaPR;
import unisa.gps.etour.util.CostantiGlobali;
import unisa.gps.etour.util.MessaggiErrore;

/**
* Class that implements the common tasks for the operator of dining and
* For the Operator Agency
*
* @ Author Joseph Morelli
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/
GestionePuntiDiRistoroComune UnicastRemoteObject public class extends implements
IGestionePuntiDiRistoroComune
(

// Instance for database connections
private static final long serialVersionUID = 1L;
protected IDBPuntoDiRistoro puntoRistoro;
protected IDBTag tags;
IDBVisitaPR protected feeds;
protected IDBTurista dbTurista;

public GestionePuntiDiRistoroComune () throws RemoteException
(
super ();
// Connect to the Database
TRY
(
puntoRistoro = new DBPuntoDiRistoro ();
tag = new DBTag ();
feed = new DBVisitaPR ();
)
// Note: no longer 'cause SQLException thrown
// Changes to the layer DB; changed Exception
catch (Exception e)
(
System.out.println ( &quot;Error:&quot; + e.toString ());
throw new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);
)
)

/** Method which allows to obtain a BeanPuntoDiRistoro through
* Connect to database
*/

public BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pPuntoDiRistoroID)
throws RemoteException

public String [] ottieniUltimiCommenti (int pPuntoDiRistoroID)
throws RemoteException

public ArrayList &lt;Integer&gt; ottieniStatistichePuntoDiRistoro (
pPuntoDiRistoroID int) throws RemoteException

public boolean modificaFeedbackPuntoDiRistoro (int pPuntoDiRistoroId,
BeanVisitaPR nuovaVisita) throws RemoteException

// Instance for database connections
// Connect to the Database
// Note: no longer 'cause SQLException thrown
// Changes to the layer DB; changed Exception
// Check identifier passed
// Return Instance
// Revenue data through the instance of the database connection
// Exception in database operations
// Unexpected exceptions due to other factors
// Check the variable return, so they do not pass bad data
// To the caller
// And triggers an exception if the format of the bean
// Return the bean that contains information about Refreshment
// Required
// Method that returns an ArrayList containing the tag identification of a
// Some Refreshment
// Check identifier passed
// Return Instance
// Revenue data through the instance of the database connection
// Exception in operations on database
// Unexpected exceptions due to other factors
// Check the variable return, so they do not pass bad data
// To the caller
// And triggers an exception if the format of the bean
// Return the ArrayList containing beans tag of refreshment
// Passed as parameter
// Returns an array of 10 strings containing the last 10 comments
// Issued by tourists for Refreshment passed as parameter
// Check the validity identifier passed
// String that contains only the last 10 comments made
// ArrayList temporary then save the comments contained in the beans
// Inside
// Attempt to retrieve information from the database via
// The connection instance
// Exception in database operations
// Unexpected exceptions due to other factors
// The bean that I receive from the database are already sorted by date
// Implicitly, so there is no need for sorting algorithms
// Insert the text of the comments in cyclically
// Array
// E 'unnecessary control the format of the array
// Then return the array directly with comments
// Method that returns an ArrayList containing the number of votes
// Release from 1 to 5 for
// The Refreshment passed as parameter. The method inserts in order
// Counters in positions
// From 0 to 1 vote, 1 vote for 2, etc. ..
// Check the validity identifier passed
// ArrayList that allows me to store the bean containing the feedback
// ArrayList that allows me to store the counters
// And then return to the calling method
// Initialize the array of counters
// Data useful to verify that the issued date back thirty Feedback
// Days from current date
// All feedback Revenue issued for Refreshment
// Passed as parameter
// Iterate the collection of elements to control the bean
// Visits
// Recuperto the BeanVisitaPR
// ... Do not know what does ...
// Exception in database operations
// Unexpected exceptions due to other factors
// Return the list of results that should contain counters
// Comments
// Issued in the last 30 days
// Method that allows you to change the comment issued for a
// Refreshment
// Check the validity of past data
// Revenue from the database the bean and stores saved
// In order to verify that the vote has not changed
// Which had been previously released
// Exception running the operation on Database
// Unexpected exception caused by other factors
// If the vote was amended returns an exception
// If the vote has not been amended shall save the new
// Comment in the database using the specific method of the bean
// Exception running the operation on Database
// Unexpected exception caused by other factors</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneTagComune</id>
      <content>package unisa.gps.etour.control.GestioneTag;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.repository.DBTag;
import unisa.gps.etour.repository.IDBTag;
import unisa.gps.etour.util.MessaggiErrore;

public class extends implements
IGestioneTagComune

public class extends implements
IGestioneTagComune
(

private static final long serialVersionUID = 1L;
// Object for the database connection
protected IDBTag tags;

public GestioneTagComune () throws RemoteException

/** For imported text unisa.gps.etour.control.GestioneTag.test.stub.DBTag;
*/

/**
* Class that implements the common tasks for the use of tags
*
* @ Author Joseph Morelli
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

// Object for the database connection
// Connect to the Database
// Method that returns all tags
// ArrayList to fill with the tags to return
// Retrieve data from Database
// Get the information from the Database
// Exception in the execution of database operations
// Unexpected exceptions caused by other factors
// Check the data back in order not to return null values
// Caller</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneTagOperatoreAgenzia</id>
      <content>package unisa.gps.etour.control.GestioneTag;

import java.rmi.RemoteException;
import java.sql.SQLException;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.util.MessaggiErrore;

class of

/**
* Class that implements the methods for the functionality of the Operator Agency
* Extending the class of common Tag Management
*
* @ Author Joseph Morelli
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class GestioneTagOperatoreAgenzia extends GestioneTagComune implements
IGestioneTagOperatoreAgenzia
(

private static final long serialVersionUID = 1L;

public GestioneTagOperatoreAgenzia () throws RemoteException

public boolean cancellaTag (int pTagID) throws RemoteException

public boolean inserisciTag (BeanTag pTagNuovo) throws RemoteException

public boolean modificaTag (BeanTag pTagModificato) throws RemoteException

public BeanTag ottieniTag (int pTagID) throws RemoteException

// Invoke the constructor of the superclass for communication with
// Database
// Method to delete from database the tag whose ID is passed
// As parameter
// Check the valise of past data
// Make the database operation
// Exception in the execution of database operations
// Unexpected exceptions caused by other factors
// Method that allows the insertion of a new tag as a parameter
// Check the validity of the Bean and the data contained within
// Execute the operation on the Database
// Exception running the operation on Database
// Unexpected exceptions caused by other factors
// Method that enables the modification of a tag that is passed as
// Parameter
// Check the validity of data
// Execute the operation on the Database
// Exception running the operation on Database
// Unexpected exceptions caused by other factors
// Method to obtain the tags whose identifier is passed
// As parameter
// Check the validity of data
// Bean to return
// Execute the operation on the Database
// Exception running the operation on Database
// Unexpected exceptions caused by other factors
// Method that controls all the attributes of a BeanTag
// Check the ID
// Check the description
// Check the name
// Check that the name does not contain a space</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneTuristaClient</id>
      <content>package unisa.gps.etour.control.GestioneUtentiRegistrati;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanPreferenzaDiRicerca;
import unisa.gps.etour.bean.BeanPreferenzeGeneriche;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.bean.BeanVisitaPR;
import unisa.gps.etour.repository.DBBeneCulturale;
import unisa.gps.etour.repository.DBPreferenzeDiRicerca;
import unisa.gps.etour.repository.DBPreferenzeGeneriche;
import unisa.gps.etour.repository.DBPuntoDiRistoro;
import unisa.gps.etour.repository.DBTurista;
import unisa.gps.etour.repository.DBVisitaBC;
import unisa.gps.etour.repository.DBVisitaPR;
import unisa.gps.etour.repository.IDBBeneCulturale;
import unisa.gps.etour.repository.IDBPreferenzeDiRicerca;
import unisa.gps.etour.repository.IDBPreferenzeGeneriche;
import unisa.gps.etour.repository.IDBPuntoDiRistoro;
import unisa.gps.etour.repository.IDBTurista;
import unisa.gps.etour.repository.IDBVisitaBC;
import unisa.gps.etour.repository.IDBVisitaPR;
import unisa.gps.etour.util.ControlloDati;
import unisa.gps.etour.util.MessaggiErrore;

public class GestioneTuristaClient extends GestioneTuristaComune implements
IGestioneTuristaClient

/**
* Class on the Management of Tourist Information
*
* @ Author Federico Leon
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab University of DMI
* Salerno
*/

public class GestioneTuristaClient extends GestioneTuristaComune implements
IGestioneTuristaClient
(
private static final long serialVersionUID =-6161592850721537385L;
Private IDBTurista profiloTurista // Data Management for tourists
Private IDBPreferenzeGeneriche prefGenTurista // preferences, general manager of the tourist
Private IDBPreferenzeDiRicerca prefRicTurista, // Handle search preferences of tourists
Private IDBVisitaBC visitatiBC // Managing cultural Visited
Private IDBVisitaPR visitatiPR // Manager catering outlets visited
Private IDBBeneCulturale beneCulturale // Managing cultural heritage (we need only obtain a bean BeneCulturale x
// from its ID
Private IDBPuntoDiRistoro puntoDiRistoro // Management refreshment areas (use the same object &quot;beneCulturale&quot;

public GestioneTuristaClient () throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # cancellaPreferenzeDiRicerca (int,
* Int)
*/

public BeanPreferenzaDiRicerca cancellaPreferenzeDiRicerca (pIdTurista int, int pIdPreferenzaDiRicerca) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # cancellaPreferenzeGeneriche (int)
*/

public BeanPreferenzeGeneriche cancellaPreferenzeGeneriche (int pIdTurista) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciPreferenzaDiRicerca (int,
* Unisa.gps.etour.bean.BeanPreferenzaDiRicerca)
*/

public boolean inserisciPreferenzaDiRicerca (int pIdTurista, BeanPreferenzaDiRicerca pPreferenzaDiRicerca) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciPreferenzeGeneriche (unisa.gps.etour.bean.BeanPreferenzeGeneriche)
*/

public boolean inserisciPreferenzeGeneriche (BeanPreferenzeGeneriche pPreferenzeGeneriche) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciTurista (unisa.gps.etour.bean.BeanTurista)
*/

public boolean inserisciTurista (BeanTurista pTurista) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # modificaPreferenzeGeneriche (unisa.gps.etour.bean.BeanPreferenzeGeneriche)
*/

public boolean modificaPreferenzeGeneriche (BeanPreferenzeGeneriche pPreferenzeGenericheNuove) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniPreferenzeDiRicerca (int)
*/

public BeanPreferenzaDiRicerca [] ottieniPreferenzeDiRicerca (int pIdTurista) throws RemoteException

/** Convert ArrayList (return type of method &quot;ottieniPreferenzeDiRicerca&quot;) to simple array **
ArrayList &lt;BeanPreferenzaDiRicerca&gt; listaPreferenze = prefRicTurista.ottieniPreferenzeDiRicercaDelTurista (pIdTurista);
preferences = new BeanPreferenzaDiRicerca [listaPreferenze.size ()];
= listaPreferenze.toArray preferences (preferences);
//** ** End Conversion
)
catch (SQLException e)
(
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
throw new RemoteException (MessaggiErrore.ERRORE_DBMS);
)

return preferences;

)

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniPreferenzeGeneriche (int)
*/

public BeanPreferenzeGeneriche ottieniPreferenzeGeneriche (int pIdTurista) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.GestioneTuristaComune # modificaTurista (unisa.gps.etour.bean.BeanTurista)
*/

public boolean modificaTurista (BeanTurista pprofiloTurista) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniBeniCulturaliVisitati (int)
*/

public BeanVisitaBC [] ottieniBeniCulturaliVisitati (int pIdTurista) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # ottieniPuntiDiRistoroVisitati (int)
*/

public BeanVisitaPR [] ottieniPuntiDiRistoroVisitati (int pIdTurista) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciBeneCulturaleVisitato (unisa.gps.etour.bean.BeanVisitaBC)
*/

public boolean inserisciBeneCulturaleVisitato (BeanVisitaBC pVisitaBC) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciPuntoDiRistoroVisitato (unisa.gps.etour.bean.BeanVisitaPR)
*/

public boolean inserisciPuntoDiRistoroVisitato (BeanVisitaPR pVisitaPR) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciBeneCulturalePreferito (int,
* Int)
*/

public boolean inserisciBeneCulturalePreferito (pIdTurista int, int pIdBeneCulturale) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # inserisciPuntoDiRistoroPreferito (int,
* Int)
*/

public boolean inserisciPuntoDiRistoroPreferito (pIdTurista int, int pIdPuntoDiRistoro) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # cancellaBeneCulturalePreferito (int,
* Int)
*/

public boolean cancellaBeneCulturalePreferito (pIdTurista int, int pIdBeneCulturale) throws RemoteException

/** (Non-Javadoc)
*
* @ See unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient # cancellaPuntoDiRistoroPreferito (int,
* Int)
*/

public boolean cancellaPuntoDiRistoroPreferito (pIdTurista int, int pIdPuntoDiRistoro) throws RemoteException

public BeanBeneCulturale [] ottieniBeniCulturaliPreferiti (int pIdTurista) throws RemoteException

public BeanPuntoDiRistoro [] ottieniPuntiDiRistoroPreferiti (int pIdTurista) throws RemoteException

// Data Management for tourists
// preferences, general manager of the tourist
// Handle search preferences of tourists
// Managing cultural Visited
// Manager catering outlets visited
// Managing cultural heritage (we need only obtain a bean BeneCulturale x
// from its ID
// Management refreshment areas (use the same object &quot;beneCulturale&quot;
// Find the anniversary with the id
// We leave the interested
// Cycle
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// The cancellation occurred
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// If the data control is positive
// Data error
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// If the data control is positive
// Data error
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// Check if the username entered is already present in DB
// If there is no choice all'username Tourist Offices
// If the data control is positive
// Data error
// Username already exists in DB
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// If the data control is positive
// Data error
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// Array containing the list of search preferences tourists ID = pIdTurista
//** Convert ArrayList (return type of method &quot;ottieniPreferenzeDiRicerca&quot;) to simple array **
//** ** End Conversion
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// Boolean variable that will hold true if the bean is correct, false otherwise
// If the data control is positive
// Data error
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// Array containing the list of catering outlets visited by tourists with id &quot;pIdTurista&quot;
// List of cultural favorites of tourists cn id = &quot;pIdTurista&quot;
// Convert ArrayList a simple array
// Cycle counter
// Fill the array with the favorite bean of all cultural favorites from the tourist
// List of places for refreshment favorite tourist cn id = &quot;pIdTurista&quot;
// Convert ArrayList a simple array
// Cycle counter
// Fill the array with the favorite bean of all cultural favorites from the tourist</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneTuristaComune</id>
      <content>package unisa.gps.etour.control.GestioneUtentiRegistrati;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.repository.DBTurista;
import unisa.gps.etour.repository.IDBTurista;
import unisa.gps.etour.util.MessaggiErrore;

public class extends implements
IGestioneTuristaComune

public class extends implements
IGestioneTuristaComune
(

protected IDBTurista tourist;

// Constructor that richama turn the class constructor
// UnicastRemoteObject to connect via RMI
// Instantiate and connect to the database
public GestioneTuristaComune () throws RemoteException

public boolean modificaTurista (BeanTurista pProfiloTurista)
throws RemoteException

public BeanTurista ottieniTurista (int pIdTurista) throws RemoteException

/**
* Class that implements the common tasks for Operators and Tourist Agency
* Ie modificaTurista and ottieniTurista
*
* @ Author Joseph Morelli
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

// Constructor that richama turn the class constructor
// UnicastRemoteObject to connect via RMI
// Instantiate and connect to the database
// Connect to the Database
// Exception in the database connection
// Method that allows you to change the data of a tourist through its
// Data
// Check the validity of past data
// Execution of the amendment
// If the changes were made returns true
// Exception in operations on database
// If the data layer sends an exception is throws the exception remote
// Unexpected exception caused by other factors
// If there were no exceptions but the changes are not
// Returns false were made
// Method to obtain the bean with data from the Tourist
// Identified by
// The parameter passed
// Check the validity identifier
// variable return
// Retrieve data
// Are requested to return the bean layer on the tourist
// With id equal to pIdTurista
// Exception in database operations
// If the data layer sends an exception is throws the exception remote
// Unexpected exceptions caused by other factors
// Return the result</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_GestioneTuristiAgenzia</id>
      <content>package unisa.gps.etour.control.GestioneUtentiRegistrati;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.bean.BeanVisitaPR;
import unisa.gps.etour.repository.DBVisitaBC;
import unisa.gps.etour.repository.DBVisitaPR;
import unisa.gps.etour.repository.IDBVisitaBC;
import unisa.gps.etour.repository.IDBVisitaPR;
import unisa.gps.etour.util.MessaggiErrore;

public class GestioneTuristiAgenzia extends GestioneTuristaComune implements
IGestioneTuristiAgenzia

/**
* Class that implements the interface for managing the side Tourists
* Agency and extends UnicastRemoteObject for communication in remote
* Provides basic methods for handling and additional methods for returning
* Tourists with special characteristics of
*
* @ Author Joseph Morelli
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class GestioneTuristiAgenzia extends GestioneTuristaComune implements
IGestioneTuristiAgenzia
(

Private IDBVisitaBC feedbackBC;
Private IDBVisitaPR feedbackPR;

public GestioneTuristiAgenzia () throws RemoteException

public ArrayList &lt;BeanTurista&gt; ottieniTuristi (boolean statoAccount)
throws RemoteException

public boolean attivaTurista (int pIdTurista) throws RemoteException

public boolean disattivaTurista (int pIdTurista) throws RemoteException

public boolean delete (int pIdTurista) throws RemoteException

// Instantiate objects for database connections
// Exception on the database connection
// Method for obtaining all tourists alike present
// In the database
// Object that will contain the return value
// Retrieve data
// Invoke the method with empty string to get all Tourists
// Exception in database operations
// If the data layer is thrown an exception SQLException
// It throws RemoteException the remote exception
// Unexpected exception caused by other factors
// Return the result from the data layer ottenuro
// Method that allows to obtain all the tourists who have an account
// Active or not
// ArrayList containing the results
// Retrieve data
// All tourists are taken to the state as a parameter
// Exception in implementing the operation on the database
// If the data layer sends an exception is throws the exception remote
// Unexpected exceptions caused by other factors
// Check the data to return, so you do not return null values
// Method that allows the activation of a tourist is not yet activated
// Check the validity of input data
// Bean that contains the data of tourists to activate
// Retrieve and edit data required
// Get the data from the Database
// Check that the tourist is not already activated
// It sets the value indicating the activation status to true
// You try to change the database
// If the edit operation is successful returns
// True
// Exception in the execution of database operations
// If the data layer sends an exception is throws the exception remote
// Unexpected exceptions caused by other factors
// If no exceptions were thrown but the changes
// Not have been successful returns false
// Method that allows you to disable a tourist
// Check the validity of data
// bean that contains the data from the tourist
// Disable
// Retrieve and edit data required
// Get the data from the database
// Check that the tourist is active
// It sets the value indicating the activation status to false
// You try to change the database
// If the edit operation is successful returns
// True
// Exception in the execution of database operations
// If the data layer sends an exception is throws the exception remote
// Unexpected exceptions caused by other factors
// If no exceptions were thrown but the changes
// Not have been successful returns false
// Method that erases a tourist from the Database
// Check the validity of data
// If the cancellation is successful it returns true
// If the data layer sends an exception is throws the exception remote
// Unexpected exception caused by other factors
// Otherwise if you have not thrown exceptions, but the cancellation
// Not have been successful returns false
// Method that returns an ArrayList containing the feedback issued by
// Some for the Cultural Tourist
// Check the validity of data
// ArrayList return
// Retrieve data from Database
// If the data layer sends an exception is throws the exception remote
// Unexpected exception caused by other factors
// Check the data back in order not to return null values
// Method that returns an ArrayList containing the feedback issued by
// Some for the Cultural Tourist
// Check the validity of data
// variable return
// Insert the result in toReturn
// Returned from the Data Layer
// If the data layer sends an exception is throws the exception remote
// Unexpected exceptions caused by other factors
// Check the array of return, so you do not return null values</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_HelpManager</id>
      <content>package unisa.gps.etour.gui;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io. *;
import java.util.HashMap;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.net.URISyntaxException;
import javax.swing.JComponent;
import javax.swing.text.JTextComponent;

class realizes

/**
* This class realizes the mechanism of sensitive help
* Context.
*
* @ Version 0.2
* @ Author Mario Gallo
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class extends HelpManager MouseAdapter
(
private HashMap &lt;String,String&gt; dictionary;
Private JTextComponent destination;
private String previousMessage;

/**
&lt;p&gt; * The constructor creates a new instance of the class for the
* Managing the online help files from contentente
* The guide itself and the component in which it appear. &lt;/ P&gt;
*
PPercorso * @ param String - the path of the help file.
* @ Param pComponent JTextComponent - the component in which to display
* Driving.
* @ Throws FileNotFoundException - if the help file is not specified
* Found.
*
*/
public HelpManager (String pPercorso, JTextComponent pComponent) throws FileNotFoundException

/**
* This method handles the event when the pointer should
* Mouse enters the component.
*
* @ Param pMouseEnteredEvent MouseEvent - The event generated by the mouse.
*
*/

public void mouseEntered (MouseEvent pMouseEnteredEvent)

/**
*
* This method handles the event when the pointer should
* Mouse goes out of a component.
*
* @ Param pMouseExitedEvent MouseEvent - The event generated by the mouse.
*
*/

public void mouseEntered (MouseEvent pMouseExitedEvent)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IAutenticazione</id>
      <content>package unisa.gps.etour.control.GestioneUtentiRegistrati;

import java.rmi.Remote;
import java.rmi.RemoteException;

public interface extends

/**
* Interface relating to operations performed by the User login and logout
* Register
*
* @ Author Joseph Penna
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab University of DMI
* Salerno
*/

public interface extends Remote IAutenticazione
(

// Static constants that identify the type of users who
// True
public static final byte VISITORS = 0;
public static final byte OP_PUNTO_DI_RISTORO = 1;

/**
* Method to authenticate a registered user (Turista - Operator
* Refreshment)

public int login (String pUsername, String pPassword, byte pTipologiaUtente)
throws RemoteException

/**
* Method to authenticate a registered user (Turista - Operator
* Refreshment)
*
Username * @ param pUserName on a Registered User
* @ Param password for pPassword Registered User
* @ Param type pTipologiaUtente user is authenticated
* @ Return If the data are correct user ID logged in the event
Otherwise -1 *
*/

// Static constants that identify the type of users who
// True</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBBanner</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanBanner;

public interface IDBBanner

/**
* Interface for managing the banner on the database
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBBanner
(
/**
* Add a banner in the database
*
* @ Param pBanner bean containing the information of the banner
* @ Throws SQLException
*/
public boolean inserisciBanner (BeanBanner pBanner) throws SQLException

/**
* Modify the contents of the advertisement, and returns the contents before
* Edit
*
* @ Param pBanner Bean that contains the new information of the banner
* @ Return True if there 'was a modified false otherwise
* @ Throws SQLException
*/

public boolean modificaBanner (BeanBanner pBanner) throws SQLException

/**
* Delete a banner from the database and returns
*
* @ Param pIdBanner ID BeanBanner
* @ Return True if and 'was deleted false otherwise
* @ Throws SQLException
*/

public boolean cancellaBanner (int pIdBanner) throws SQLException

/**
* Returns a list of banners for a refreshment point, if the id of
* Refreshment and 'equal to -1 will' return the complete list
* Banners
*
* @ Param Id pIdPuntoDiRistoro of refreshment point from which to obtain the list
* Banner
* @ Return list of banners linked to Refreshment
* @ Throws SQLException
*/
&lt;BeanBanner&gt; ottieniBanner public ArrayList (int pIdPuntoDiRistoro)
throws SQLException;

/**
* Method which returns a banner given its id
*
* @ Param ID pIdBanner the banner to return
* @ Return Banner found in the database, null if there is' match
* @ Throws SQLException
*/

public BeanBanner ottieniBannerDaID (int pIdBanner) throws SQLException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBBeneCulturale</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.util.Punto3D;

public interface IDBBeneCulturale

/**
* Interface for the management of cultural heritage database
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBBeneCulturale
(
/**
* Add a cultural heritage, given input
*
* @ Param pBene Cultural Heritage for inclusion in database
* @ Throws SQLException
*/
public boolean inserisciBeneCulturale (BeanBeneCulturale pBene)
throws SQLException

/**
* Modify the information in the cultural
*
* @ Param pBene contains the information to modify the database
* @ Throws SQLException
* @ Return True if there 'was a modified false otherwise
*/

public boolean modificaBeneCulturale (BeanBeneCulturale pBene)
throws SQLException

/**
* Delete a cultural object from the database
*
* @ Param ID pIdBene cultural property to delete
* @ Throws SQLException
* @ Return True if and 'was deleted false otherwise
*/

public boolean cancellaBeneCulturale (int pIdBene) throws SQLException

/**
* Returns the cultural object with id as input
*
* @ Param pId cultural property to be extracted from the database
* @ Throws SQLException
* @ Return cultural property obtained from the database
*/

public BeanBeneCulturale ottieniBeneCulturale (int pid) throws SQLException

/**
* Research. Returns the list of cultural property in their name or
* Description given string as input, filtered according to tags and
* Maximum distance. The returned list contains the number of goods given as input.
* To browse the real list, which may contain more 'of
* Ten elements, you use the paramtro numPagina.
*
PKeyword * @ param string that contains the keyword to search the
* Name or description of the cultural
* @ Param pTags list of tags used to filter the search. the
* Maximum number of tags to be included should not exceed five
* Units'. If you exceed this number the other tags
* Excess will be ignored.
* @ Param pNumPagina The page number you want to view. O for
* 1 page (the first 10 results), 1 for 2 page (s
* Results from 11 to 20) etc ...
* @ Param pPosizione position of the person who carried out the research
* @ Param pDistanzaMassima Maximum distance from the user to search for good
* @ Param pNumeroElementiPerPagina number of items to return per page
* @ Throws SQLException
* @ Return list contained ten cultural
*/

public ArrayList &lt;BeanBeneCulturale&gt; search (String pKeyword,
ArrayList &lt;BeanTag&gt; pTags, pNumPagina int, int pNumeroElementiPerPagina, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

/**
* Advanced Search. Returns the list of cultural goods which have in
* Name or description given string as input, sorted according to
* Preferences of tourists and filtered according to the tag and the maximum distance. The
* Returned list contains the number of goods given as input. To scroll
* The actual list, which may contain multiple 'items, you
* Use paramtro numPagina.
*
* @ Param ID pIdTurista tourists who carried out the research
PKeyword * @ param string that contains the keyword to search the
* Name or description of the cultural
* @ Param pTags list of tags used to filter the search. the
* Maximum number of tags to be included should not exceed five
* Units'. If you exceed this number the other tags
* Excess will be ignored.
* @ Param pNumPagina The page number you want to view. O for
* 1 page (the first 10 results), 1 for 2 page (s
* Results from 11 to 20) etc ...
* @ Param pPosizione position of the person who carried out the research
* @ Param pDistanzaMassima Maximum distance from the user to search for good
* @ Param pNumeroElementiPerPagina number of items to return per page
* @ Throws SQLException
* @ Return list contained ten cultural
*/
&lt;BeanBeneCulturale&gt; ricercaAvanzata public ArrayList (int pIdTurista,
PKeyword String, ArrayList &lt;BeanTag&gt; pTags, pNumPagina int, int pNumeroElementiPerPagina,
Punto3D pPosizione, double pDistanzaMassima) throws SQLException;

/**
* Method to get the number of elements to search.
*
PKeyword * @ param string that contains the keyword to search the
* Name or description of the cultural
* @ Param pTags list of tags used to filter the search. the
* Maximum number of tags to be included should not exceed five
* Units'. If you exceed this number the other tags
* Excess will be ignored.
* @ Param pPosizione position of the person who carried out the research
* @ Param pDistanzaMassima Maximum distance from the user to search for good
* @ Throws SQLException
* @ Return number of pages.
*/

public int ottieniNumeroElementiRicerca (String pKeyword,
ArrayList &lt;BeanTag&gt; pTags, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

/**
* Method to get the number of elements to search.
*
* @ Param identifier pIdTurista tourists who carried out the research
PKeyword * @ param string that contains the keyword to search the
* Name or description of the cultural
* @ Param pTags list of tags used to filter the search. the
* Maximum number of tags to be included should not exceed five
* Units'. If you exceed this number the other tags
* Excess will be ignored.
* @ Param pPosizione position of the person who carried out the research
* @ Param pDistanzaMassima Maximum distance from the user to search for good
* @ Throws SQLException
* @ Return number of pages.
*/

public int ottieniNumeroElementiRicercaAvanzata (int pIdTurista,
PKeyword String, ArrayList &lt;BeanTag&gt; pTags, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

/**
* Returns a list of all cultural
*
* @ Throws SQLException
* @ Return List of all cultural
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBConvenzione</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanConvenzione;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;

public interface IDBConvenzione

/**
* Interface for managing the database Business
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBConvenzione
(

/**
* Add a convention in the database
*
* @ Param pConvenzione Convention by adding
* @ Throws SQLException
*/
public boolean inserisciConvenzione (BeanConvenzione pConvenzione)
throws SQLException

/**
* Modify a convention in the database
*
* @ Param data pConvenzione Convention of the Convention to be updated
* @ Return True if there 'was a modified false otherwise
* @ Throws SQLException
*/

public boolean modificaConvenzione (BeanConvenzione pConvenzione)
throws SQLException

/**
* Delete an agreement by the database
*
* @ Param pIdConvenzione ID of the Convention by removing
* @ Return True if been deleted false otherwise
* @ Throws SQLException
*/

public boolean cancellaConvenzione (int pIdConvenzione) throws SQLException

/**
* Returns the historical conventions of a refreshment
*
* @ Param idPuntoDiRistoro point identification Refreshments
* @ Return List of conventions of Refreshment given as argument
* @ Throws SQLException
*/

public ArrayList &lt;BeanConvenzione&gt; ottieniStoricoConvenzione (
idPuntoDiRistoro int) throws SQLException

/**
* Returns the Convention active a refreshment
*
* @ Param pIdPuntoDiRistoro point identification Refreshments
* @ Return Convention Turns
* @ Throws SQLException
*/

public BeanConvenzione ottieniConvezioneAttiva (int pIdPuntoDiRistoro)
throws SQLException

/**
* Returns a list of all the PR that have a Convention active
*
* @ Return list of all the PR with the Convention active
* @ Throws SQLException
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBMenu</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanMenu;

public interface IDBMenu

/**
* Interface for managing the menu in the database
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBMenu
(
/**
* Adds a menu in the database
*
* @ Param pMenu menu to add
* @ Throws SQLException
*/
public boolean inserisciMenu (BeanMenu pMenu) throws SQLException

/**
* Modify a menu in the database
*
* @ Param pMenu Contains the data to change
* @ Throws SQLException
* @ Return True if there 'was a modified false otherwise
*/

public boolean modificaMenu (BeanMenu pMenu) throws SQLException

/**
* Delete a menu from database
*
* @ Param ID pIdMenu menu to delete
* @ Throws SQLException
* @ Return True if and 'was deleted false otherwise
*/

public boolean cancellaMenu (int pIdMenu) throws SQLException

/**
* Returns the menu of the day of a refreshment
*
* @ Param pIdPuntoDiRistoro point identification Refreshments
* @ Param pGiorno Day of the week in which the menu
* Daily
* @ Throws SQLException
* @ Return Day menu de Refreshment
*/

public BeanMenu ottieniMenuDelGiorno (int pIdPuntoDiRistoro, String pGiorno)
throws SQLException

/**
* Returns a list of the menu of a refreshment
*
* @ Param pIdPuntoDiRistoro point identification Refreshment
* @ Throws SQLException
* @ Return List of menus
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBNews</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanNews;

public interface IDBNews

/**
* Interface for the management of news in the Database
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBNews
(
/**
* Add a news database
*
* @ Param Pnews News to add
* @ Throws SQLException
*/
public boolean inserisciNews (BeanNews Pnews) throws SQLException

/**
* Modify a news database
*
* @ Param Pnews News to change with the new data
* @ Throws SQLException
* @ Return True if there 'was a modified false otherwise
*/

public boolean modificaNews (BeanNews Pnews) throws SQLException

/**
* Delete a database from news
*
* @ Param ID pIdNews News to eliminate
* @ Throws SQLException
* @ Return True if and 'have been deleted false otherwise
*/

public boolean cancellaNews (int pIdNews) throws SQLException

/**
* Returns the active news
*
* @ Throws SQLException
* @ Return list of active news
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBOperatoreAgenzia</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import unisa.gps.etour.bean.BeanOperatoreAgenzia;

public interface IDBOperatoreAgenzia

/**
* Interface for managing the database OperatoreAgenzia
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBOperatoreAgenzia
(
/**
* Returns the data Operator Agency with ID equal to that given in
* Input
*
* @ Param pUsername Username dell'OperatoreAgenzia to find
* @ Return OperatoreAGenzia with id equal to the input, null if there is
* @ Throws SQLException
*/
public BeanOperatoreAgenzia ottieniOperatoreAgenzia (String pUsername) throws SQLException

/**
* Returns the data Operator Agency with ID equal to that given in
* Input
*
* @ Param pUsername Username dell'OperatoreAgenzia to find
* @ Return OperatoreAGenzia with id equal to the input, null if there is
* @ Throws SQLException
*/

public boolean modificaPassword (BeanOperatoreAgenzia poa) throws SQLException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBOperatorePuntoDiRistoro</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import unisa.gps.etour.bean.BeanOperatorePuntoDiRistoro;

public interface IDBOperatorePuntoDiRistoro

/**
* Interface for the operator to the point of comfort in the database
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBOperatorePuntoDiRistoro
(
/**
* Adds an operator refreshment
*
* @ Param popera Additional operating
* @ Throws SQLException
*/
public boolean inserisciOperatorePuntoDiRistoro (
BeanOperatorePuntoDiRistoro popera) throws SQLException

/**
* Modify an operator in the database
*
* @ Param popera New data Operator
* @ Throws SQLException
* @ Return True if there 'was a modified false otherwise
*/

public boolean modificaOperatorePuntoDiRistoro (
BeanOperatorePuntoDiRistoro popera) throws SQLException

/**
* Delete an operator
*
* @ Param pIdOperatore Operator ID to delete
* @ Throws SQLException
* @ Return True if and 'was deleted false otherwise
*/

public boolean cancellaOperatorePuntoDiRistoro (int pIdOperatore)
throws SQLException

/**
Returns data operator
*
* @ Param pIdOperatore Operation ID
* @ Throws SQLException
* @ Return Operator refreshment
*/

public BeanOperatorePuntoDiRistoro ottieniOperatorePuntoDiRistoro (
pIdOperatore int) throws SQLException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBPiatto</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanPiatto;

public interface IDBPiatto

/**
* Interface for the management of food in the database
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBPiatto
(
/**
* Add a dish
*
* @ Param pPiatti plate add
*/
public boolean inserisciPiatto (BeanPiatto pPiatto) throws SQLException

/**
* Modify the data in a flat in the database
*
* @ Param pPiatti data plate to be inserted in database
* @ Return True if there 'was a modified false otherwise
*/

public boolean modificaPiatto (BeanPiatto pPiatto) throws SQLException

/**
* Delete a dish from the database
*
* @ Param pIdPiatto ID plate eliminre
* @ Throws SQLException
* @ Return True if and 'was deleted false otherwise
*/

public boolean cancellaPiatto (int pIdPiatto) throws SQLException

/**
* Returns a list of dishes on a menu
*
* @ Param ID pIdMenu menu
* @ Throws SQLException
* @ Return list of dishes in the menu
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBPreferenzeDiRicerca</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanPreferenzaDiRicerca;

public interface IDBPreferenzeDiRicerca

/**
* Interface for managing search preferences in database
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBPreferenzeDiRicerca
(
/**
* Add a preference of Search
*
* @ Param pPreferenza Search Preferences
* @ Throws SQLException
*/
public boolean inserisciPreferenzaDiRicerca (
BeanPreferenzaDiRicerca pPreferenza) throws SQLException

/**
* Delete a preference for research
*
* @ Param pPreferenza preference to eliminate
* @ Throws SQLException
* @ Return True if and 'have been deleted false otherwise
*/

public boolean cancellaPreferenzaDiRicerca (int pIdPreferenza)
throws SQLException

/**
* Returns the list of preferences to find a tourist
*
* @ Param Id pIdTurista tourists
* @ Throws SQLException
* @ Return List Search Preferences
*/

public ArrayList &lt;BeanPreferenzaDiRicerca&gt; ottieniPreferenzeDiRicercaDelTurista (
pIdTurista int) throws SQLException

/**
* Returns the list of preferences for research of a cultural
*
* @ Param pIdBeneCulturale ID of the cultural
* @ Throws SQLException
* @ Return list search preferences.
*/

public ArrayList &lt;BeanPreferenzaDiRicerca&gt; ottieniPreferenzeDiRicercaDelBC (
pIdBeneCulturale int) throws SQLException

/**
* Returns the list of preferences to find a resting spot
*
* @ Param identifier pIdPuntoDiRistoro a refreshment
* @ Throws SQLException
* @ Return list search preferences.
*/

public ArrayList &lt;BeanPreferenzaDiRicerca&gt; ottieniPreferenzeDiRicercaDelPR (
pIdPuntoDiRistoro int) throws SQLException

/**
* Add a preference for a cultural
*
* @ Param pIdBeneCulturale ID of the cultural
* @ Param pIdPreferenzaDiRicerca ID PreferenzaDiRicerca
* @ Throws SQLException
* @ Param pPreferenza Search Preferences
*/

public boolean inserisciPreferenzaDiRicercaDelBC (int pIdBeneCulturale,
pIdPreferenzaDiRicerca int) throws SQLException

/**
* Add a search preference to a tourist
*
* @ Param Id pIdTurista tourists
* @ Param pIdPreferenzaDiRicerca ID PreferenzeDiRicerca
* @ Throws SQLException
* @ Param pPreferenza Search Preferences
*/

public boolean inserisciPreferenzaDiRicercaDelTurista (int pIdTurista,
pIdPreferenzaDiRicerca int) throws SQLException

/**
* Add a preference research to a refreshment
*
* @ Param pIdPuntoDiRistoro point identification Refreshments
* @ Param pIdPreferenzaDiRicerca ID PreferenzaDiRicerca
* @ Throws SQLException
* @ Param pPreferenza Search Preferences
*/

public boolean inserisciPreferenzaDiRicercaDelPR (int pIdPuntoDiRistoro,
pIdPreferenzaDiRicerca int) throws SQLException

/**
* Deletes a preference to find a Tourist
*
* @ Param Id pIdTurista tourists
* @ Param pIdPreferenza Search Preferences
* @ Throws SQLException
* @ Return True if and 'have been deleted false otherwise
*/

public boolean cancellaPreferenzaDiRicercaTurista (int pIdTurista,
pIdPreferenza int) throws SQLException

/**
* Deletes a preference for research of a cultural
*
* @ Param pIdPreferenzaDiRicerca Search Preferences
* @ Param pIdBeneCulturale ID of the cultural
* @ Throws SQLException
* @ Return True if and 'have been deleted false otherwise
*/

public boolean cancellaPreferenzaDiRicercaBC (int pIdBeneCulturale,
pIdPreferenzaDiRicerca int) throws SQLException

/**
* Deletes a preference to find a resting spot
*
* @ Param pIdPreferenza Search Preferences
* @ Param pIdPuntoDiistoro point identification Refreshments
* @ Throws SQLException
* @ Return True if and 'have been deleted false otherwise
*/

public boolean cancellaPreferenzaDiRicercaPR (int pIdPuntoDiistoro,
pIdPreferenza int) throws SQLException

/**
* Returns a list of all search preferences in the DB
*
* @ Throws SQLException
* @ Return List of search preferences in the DB
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBPreferenzeGeneriche</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import unisa.gps.etour.bean.BeanPreferenzeGeneriche;

public interface IDBPreferenzeGeneriche

/**
* Interface for handling general preferences in database
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBPreferenzeGeneriche
(
/**
* Add a preference General
*
* @ Param pPreferenza preference to be added
* @ Throws SQLException
*/
public boolean inserisciPreferenzaGenenerica (
BeanPreferenzeGeneriche pPreferenza) throws SQLException

/**
* Edit a general preference
*
* @ Param pPreferenza preference to change
* @ Throws SQLException
* @ Return True if and 'been changed otherwise false
*/

public boolean modificaPreferenzaGenerica (
BeanPreferenzeGeneriche pPreferenza) throws SQLException

/**
* Delete a general preference
*
* @ Param ID pIdPreferenza preference to delete
* @ Throws SQLException
* @ Return True if and 'have been deleted false otherwise
*/

public boolean cancellaPreferenzaGenerica (int pIdPreferenza)
throws SQLException

/**
* Returns the generic preference for tourists
*
* @ Param Id pIdTurista tourists
* @ Throws SQLException
* @ Return generic preference
*/

public BeanPreferenzeGeneriche ottieniPreferenzaGenerica (int pIdTurista)
throws SQLException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBPuntoDiRistoro</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.util.Punto3D;

public interface IDBPuntoDiRistoro

/**
* Interface for management of eateries in the database
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBPuntoDiRistoro
(
/**
* Add a refreshment
*
* @ Param pPuntoDiRistoro Refreshment to add
* @ Throws SQLException
*/
public boolean inserisciPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)
throws SQLException

/**
* Modify a refreshment
*
* @ Param pPuntoDiRistoro Refreshment to edit
* @ Throws SQLException
* @ Return True if and 'been changed otherwise false
*/

public boolean modificaPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)
throws SQLException

/**
* Delete a refreshment
*
* @ Param ID pIdPuntoDiRistoro Refreshment to eliminate
* @ Throws SQLException
* @ Return True if and 'have been deleted false otherwise
*/

public boolean cancellaPuntoDiRistoro (int pIdPuntoDiRistoro)
throws SQLException

/**
* Returns data from a point of comfort with the ID given as argument
*
* @ Param pId point identification Refreshments
* @ Throws SQLException
* @ Return Refreshment
*/

public BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pid)
throws SQLException

/**
* Advanced Search. Returns the list of eateries that have in
* Name or description given string as input, sorted according to
* Preferences of tourists, the tags and filtered according to the distance
* Max. The list returned contains only the number of catering outlets input data.
* To scroll the real list, which may contain multiple 'items, you
* Use paramtro numPagina.
*
* @ Param Id pIdTurista tourists who carried out the research
PKeyword * @ param string that contains the keyword to search the
* Name or description of refreshment
* @ Param pTags list of tags used to filter the search. the
* Maximum number of tags to be included should not exceed five
* Units'. If you exceed this number the other tags
* Excess will be ignored.
* @ Param pNumeroPagina The page number you want to view. O
* The 1 page (the first 10 results), 1 for 2 page (s
* Results from 11 to 20) etc ... *
* @ Param pPosizione position of the person who carried out the research
* @ Param int Number of elements to return pNumeroElementiPerPagina
* @ Param pDistanzaMassima Maximum distance from the user to refreshment
* To seek
* @ Throws SQLException
* @ Return list containing ten points Refreshments
*/
&lt;BeanPuntoDiRistoro&gt; ricercaAvanzata public ArrayList (int pIdTurista,
PKeyword String, ArrayList &lt;BeanTag&gt; pTags, pNumeroPagina int, int pNumeroElementiPerPagina,
Punto3D pPosizione, double pDistanzaMassima) throws SQLException;

/**
* Method to get the number of elements to search.
*
* @ See ricercaAvanzata ()
* @ Param Id pIdTurista tourists who carried out the research
PKeyword * @ param string that contains the keyword to search the
* Name or description of refreshment
* @ Param pTags list of tags used to filter the search. the
* Maximum number of tags to be included should not exceed five
* Units'. If you exceed this number the other tags
* Excess will be ignored. *
* @ Param pPosizione position of the person who carried out the research
* @ Param pDistanzaMassima Maximum distance from the user to refreshment
* To seek
* @ Throws SQLException
* @ Return number of pages.
*/

public int ottieniNumeroElementiRicercaAvanzata (int pIdTurista,
PKeyword String, ArrayList &lt;BeanTag&gt; pTags, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

/**
* Research. Returns the list of eateries that have the name or
* Description given string as input, filtered and tags
* According to the maximum distance. The returned list contains the number of
* Points Refreshments input data. To scroll the real list, which
* May contain more 'items, you use the paramtro
* NumPagina.
*
PKeyword * @ param string that contains the keyword to search the
* Name or description of refreshment
* @ Param pTags list of tags used to filter the search. the
* Maximum number of tags to be included should not exceed five
* Units'. If you exceed this number the other tags
* Excess will be ignored.
* @ Param pNumeroPagina The page number you want to view. O
* The 1 page (the first 10 results), 1 for 2 page (s
* Results from 11 to 20) etc ... *
* @ Param pPosizione position of the person who carried out the research
* @ Param pDistanzaMassima Maximum distance from the user to refreshment
* @ Param int Number of elements to return pNumeroElementiPerPagina
* @ Throws SQLException
* @ Return list containing ten points Refreshments
*/

public ArrayList &lt;BeanPuntoDiRistoro&gt; search (String pKeyword,
ArrayList &lt;BeanTag&gt; pTags, pNumeroPagina int, int pNumeroElementiPerPagina, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

/**
* Method to get you the elements for an advanced search.
*
* @ See search ()
* @ Param username pUsernameTurista tourists who carried out the research
PKeyword * @ param string that contains the keyword to search the
* Name or description of refreshment
* @ Param pTags list of tags used to filter the search. The
* Maximum number of tags to be included should not exceed five
* Units'. If you exceed this number the other tags
* Excess will be ignored.
* @ Param pPosizione position of the person who carried out the research
* @ Param pDistanzaMassima Maximum distance from the user to refreshment
* To seek
* @ Throws SQLException
* @ Return number of pages.
*/

public int ottieniNumeroElementiRicerca (String pKeyword,
ArrayList &lt;BeanTag&gt; pTags, Punto3D pPosizione,
double pDistanzaMassima) throws SQLException

/**
* Returns a list of all the refreshment
*
* @ Throws SQLException
* @ Return list of all the refreshment
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBTag</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanTag;

public interface IDBTag

/**
* Interface for managing the database Tag
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBTag
(
/**
* Add a tag
*
* @ Param ptagi Tag to add
* @ Throws SQLException
*/
public boolean inserisciTag (BeanTag ptagi) throws SQLException

/**
* Modify the data in a tag
*
* @ Param ptagi Tag to modify
* @ Throws SQLException
* @ Return True if and 'been changed otherwise false
*/

public boolean modificaTag (BeanTag ptagi) throws SQLException

/**
* Delete a tag from the database
*
* @ Param pIdTag ID Tag to be deleted
* @ Throws SQLException
* @ Return True if and 'was deleted false otherwise
*/

public boolean cancellaTag (int pIdTag) throws SQLException

/**
* Returns the list of tags in the database
*
* @ Throws SQLException
* @ Return List containing the tags
*/
&lt;BeanTag&gt; ottieniListaTag public ArrayList () throws SQLException;

/**
* Returns a single tag
*
* @ Param pId ID tag
* @ Throws SQLException
* @ Return Tags
*/

public BeanTag ottieniTag (int pid) throws SQLException

/**
* Tag with immovable cultural
*
* @ Param ID pIdBeneCulturale of Cultural Heritage
* @ Param pIdTag ID tag
* @ Throws SQLException
*/

public boolean aggiungeTagBeneCulturale (pIdBeneCulturale int, int pIdTag)
throws SQLException

/**
* Tag to a refreshment
*
* @ Param pIdPuntoDiRistoro point identification Refreshments
* @ Param pIdTag ID tag
* @ Throws SQLException
*/

public boolean aggiungeTagPuntoDiRistoro (pIdPuntoDiRistoro int, int pIdTag)
throws SQLException

/**
* Returns the list of tags of a cultural
*
* @ Param ID pIdBeneCulturale of Cultural Heritage
* @ Throws SQLException
* @ Return list of tags
*/
&lt;BeanTag&gt; ottieniTagBeneCulturale public ArrayList (int pIdBeneCulturale)
throws SQLException;

/**
* Returns a list of tags of a refreshment
*
* @ Param pIdPuntoDiRistoro point identification Refreshments
* @ Throws SQLException
* @ Return list of tags
*/
&lt;BeanTag&gt; ottieniTagPuntoDiRistoro public ArrayList (int pIdPuntoDiRistoro)
throws SQLException;

/**
* Delete a tag to a cultural
*
* @ Param ID pIdBeneCulturale of Cultural Heritage
* @ Param pIdTag ID tag
* @ Throws SQLException
* @ Return True if and 'was deleted false otherwise
*/

public boolean cancellaTagBeneCulturale (pIdBeneCulturale int, int pIdTag)
throws SQLException

/**
* Delete a tag to a refreshment
*
* @ Param pIdPuntoDiRistoro ID
* @ Param pIdTag ID tag
* @ Throws SQLException
* @ Return True if and 'was deleted false otherwise
*/

public boolean cancellaTagPuntoDiRistoro (pIdPuntoDiRistoro int, int pIdTag)
throws SQLException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBTurista</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanTurista;

public interface IDBTurista

/**
* Interface for the management of tourists in the database
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBTurista
(
/**
* Add a tourist
*
* @ Param to add pTurista Tourist
* @ Throws SQLException
*/
public boolean inserisciTurista (BeanTurista pTurista) throws SQLException

/**
* Modify a tourist
*
* @ Param to change pTurista Tourist
* @ Throws SQLException
* @ Return True if and 'been changed otherwise false
*/

public boolean modificaTurista (BeanTurista pTurista) throws SQLException

/**
* Delete a tourist from the database
*
* @ Param pIdTurista Identificatie Tourist delete
* @ Throws SQLException
* @ Return True if and 'been changed otherwise false
*/

public boolean delete (int pIdTurista) throws SQLException

/**
* Returns the data of the Tourist
*
* @ Param pUsername Username tourists
* @ Throws SQLException
* @ Return Information about tourist
*/

public BeanTurista ottieniTurista (String pUsername) throws SQLException

/**
* Attach a cultural tourists preferred
*
* @ Param ID pIdTurista tourists
* @ Param pIdBeneCulturale ID of the cultural
* @ Throws SQLException
*/

public boolean inserisciBeneCulturalePreferito (int pIdTurista,
pIdBeneCulturale int) throws SQLException

/**
* Attach a point of catering to the tourist favorite
*
* @ Param ID pIdTurista tourists
* @ Param pIdPuntoDiRistoro ID of the cultural
* @ Throws SQLException
*/

public boolean inserisciPuntoDiRistoroPreferito (int pIdTurista,
pIdPuntoDiRistoro int) throws SQLException

/**
* Delete a cultural favorite
*
* @ Param ID pIdTurista tourists
* @ Param pIdBeneCulturale ID of the cultural
* @ Throws SQLException
* @ Return True if and 'been changed otherwise false
*/

public boolean cancellaBeneCulturalePreferito (int pIdTurista,
pIdBeneCulturale int) throws SQLException

/**
* Delete a favorite resting spot
*
* @ Param ID pIdTurista tourists
* @ Param pIdPuntoDiRistoro ID of the cultural
* @ Throws SQLException
* @ Return True if and 'was deleted false otherwise
*/

public boolean cancellaPuntoDiRistoroPreferito (int pIdTurista,
pIdPuntoDiRistoro int) throws SQLException

/**
* Returns an ArrayList of tourists who have a username like that
* Given as argument
*
* @ Param pUsernameTurista Usrername tourists to search
* @ Throws SQLException
* @ Return data for Tourists
*/

public ArrayList &lt;BeanTurista&gt; ottieniTuristi (String pUsernameTurista)
throws SQLException

/**
* Returns the list of tourists turned on or off
*
* @ Param select pact True False those tourists turned off
* @ Return data for Tourists
* @ Throws SQLException
*/

public ArrayList &lt;BeanTurista&gt; ottieniTuristi (boolean condition)
throws SQLException

/**
* Returns the data of the tourist with ID equal to that given in
* Input
*
* @ Param ID pIdTurista tourists to find
* @ Return Tourists with id equal to the input, null if there is
* @ Throws SQLException
*/

public BeanTurista ottieniTurista (int pIdTurista) throws SQLException

/**
* Returns the list of cultural favorites from a particular
* Tourist
*
* @ Param ID pIdTurista tourists to find
* @ Return List of Cultural Heritage Favorites
* @ Throws SQLException
*/

/**
* Returns a list of favorite resting spot by a particular
* Tourist
*
* @ Param ID pIdTurista tourists to find
* @ Return List of Refreshment Favorites
* @ Throws SQLException
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBVisitaBC</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanVisitaBC;

public interface IDBVisitaBC

/**
* Interface for handling feedback on a given asset
* Cultural
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBVisitaBC
(

/**
* Inserts a visit
*
* @ Param PVIS Visit to insert
* @ Throws SQLException
*/
public boolean inserisciVisitaBC (BeanVisitaBC PVIS) throws SQLException

/**
* Modify a visit
*
* @ Param PVIS Visit to edit
* @ Throws SQLException
* @ Return True if and 'been changed otherwise false
*/

public boolean modificaVisitaBC (BeanVisitaBC PVIS) throws SQLException

/**
* Extract the list of visits to a cultural
*
* @ Param pIdBeneCulturale ID of the cultural
* @ Throws SQLException
* @ Return list of visits of the cultural
*/
&lt;BeanVisitaBC&gt; ottieniListaVisitaBC public ArrayList (int pIdBeneCulturale)
throws SQLException;

/**
* Extract the list of cultural visited by a tourist
*
* @ Param ID pIdTurista tourists
* @ Throws SQLException
* @ Return ArrayList of all feedback issued by a tourist for a
* Specified cultural
*/
&lt;BeanVisitaBC&gt; ottieniListaVisitaBCTurista public ArrayList (int pIdTurista)
throws SQLException;

/**
* Extract a visit by a tourist to a cultural
*
* @ Param pIdBeneCulturale ID of the cultural
* @ Param ID pIdTurista tourists
* @ Throws SQLException
* @ Return visit
*/

public BeanVisitaBC ottieniVisitaBC (pIdBeneCulturale int, int pIdTurista)
throws SQLException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IDBVisitaPR</id>
      <content>package unisa.gps.etour.repository;

import java.sql.SQLException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanVisitaPR;

public interface IDBVisitaPR

/**
* Interface for managing feedback related to a specific point
* Refreshments
*
* @ Author Joseph Martone
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IDBVisitaPR
(

/**
* Add a visit to a refreshment
*
* @ Param PVIS visit to add
* @ Throws SQLException
*/
public boolean inserisciVisitaPR (BeanVisitaPR PVIS) throws SQLException

/**
* Modify a visit
*
* @ Param PVIS Visit to edit
* @ Throws SQLException
* @ Return True if and 'been changed otherwise false
*/

public boolean modificaVisitaPR (BeanVisitaPR PVIS) throws SQLException

/**
* Extract the list of visits to a refreshment
*
* @ Param pIdPuntoDiRistoro point identification Refreshments
* @ Throws SQLException
* @ Return List of visits
*/
&lt;BeanVisitaPR&gt; ottieniListaVisitaPR public ArrayList (int pIdPuntoDiRistoro)
throws SQLException;

/**
* Extract a visit by a tourist at a refreshment
*
* @ Param pIdPuntoDiRistoro point identification Refreshments
* @ Param ID pIdTurista tourists
* @ Throws SQLException
* @ Return visit
*/

public BeanVisitaPR ottieniVisitaPR (pIdPuntoDiRistoro int, int pIdTurista)
throws SQLException

/**
* Extract the list of visits of a tourist
*
* @ Param ID pIdTurista tourists
* @ Return List of visits
* @ Throws SQLException
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestioneAdvertisement</id>
      <content>package unisa.gps.etour.control.GestioneAdvertisement;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.HashMap;
import javax.swing.ImageIcon;
import unisa.gps.etour.bean.BeanBanner;

public interface extends

/**
* Interface General Manager of Banner and news.
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno
*/

public interface extends Remote IGestioneAdvertisement
(
/**
* Inserts a new banner.
*
* @ Param pBanner Bean contains the data of the banner
* @ Throws RemoteException
*/
public boolean inserisciBanner (int pIdPuntoDiRistoro, Imagelcon pImmagineBanner)
throws RemoteException

/**
* Delete a banner from the system.
*
* @ Param pBannerID ID banner to be deleted.
* @ Return true if the operation is successful false otherwise.
* @ Throws RemoteException
*/

public boolean cancellaBanner (int pBannerID) throws RemoteException

/**
* Modify the data of the banner or the image associated.
*
* @ Param pBanner Bean contains the data of the banner.
* @ Return true if the operation is successful, false otherwise.
* @ Throws RemoteException
*/

public boolean modificaBanner (int pBannerID, Imagelcon pImmagine)
throws RemoteException

/**
* Returns a list of Banner of a particular point of comfort.
*
* @ Param Id pPuntoDiRistoroID of refreshment owner of banner
* @ Return ArrayList containing the list of banner refreshment
* @ Throws RemoteException
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestioneAdvertisementAgenzia</id>
      <content>package com.trapan.spg.control.GestioneAdvertisement;

import java.rmi.RemoteException;
import java.util.ArrayList;
import com.trapan.spg.bean.BeanNews;

public interface IGestioneAdvetisementAgenzia extends IGestioneAdvertisement

/**
* Interface that provides management services dell'advertisement
* Operator agency.
*
* @ Author author
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/
package com.trapan.spg.control.GestioneAdvertisement;

import java.rmi.RemoteException;
import java.util.ArrayList;

import com.trapan.spg.bean.BeanNews;

public interface IGestioneAdvetisementAgenzia extends IGestioneAdvertisement
(
/**
* Method that inserts a new news system.
*
* @ Param Pnews Bean containing data news
* @ Throws RemoteException
*/

public boolean inserisciNews (BeanNews Pnews) throws RemoteException

/**
* Method which removes from the news system.
*
* @ Param ID pNewsID news be erased.
* @ Throws RemoteException
*/

public boolean cancellaNews (int pNewsID) throws RemoteException

/**
* Method amending the text of a news.
*
* @ Param Pnews Bean containing data news
* @ Throws RemoteException
*/

public boolean modificaNews (BeanNews Pnews) throws RemoteException

/**
* Returns the list of active news.
*
* @ Return ArrayList of ArrayList News
* @ Throws RemoteException
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestioneAdvertisementPuntoDiRistoro</id>
      <content>package unisa.gps.etour.control.GestioneAdvertisement;

public interface extends

public interface extends IGestioneAdvertisementPuntoDiRistoro
IGestioneAdvertisement
(
// Empty interface
)

/**
* Interface that provides management services dell'advertisement
* Operator eating place.
*
* @ Author Fabio Palladino
* @ Version 0.1
*
* 2007 eTour Project - Copyright by SE @ SA Lab DMI University of Salerno
*/

// Empty interface</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestioneBeniCulturaliAgenzia</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali;

import java.rmi.RemoteException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanVisitaBC;

public interface extends

/**
* Interface for operations peculiar cultural heritage by
* Operator Agency.
*
* @ Author Michelangelo De Simone
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public interface extends IGestioneBeniCulturaliAgenzia
IGestioneBeniCulturaliComune
(
/**
* Method for the insertion of a new cultural
*
* @ Param pBeneCulturale The raw bean to be included in the database
* @ Return boolean The result of the operation; true if was successful, false otherwise
* @ Throws RemoteException Exception flow
*/
public boolean inserisciBeneCulturale (BeanBeneCulturale pBeneCulturale) throws RemoteException

/**
* Method for the cancellation of a cultural object by id
*
* @ Param Id pBeneCulturaleID the bean to be deleted
* @ Return boolean The result of the operation; true if was successful, false otherwise
* @ Throws RemoteException Exception flow
*/

public boolean cancellaBeneCulturale (int pBeneCulturaleID) throws RemoteException

/**
* Method for the return of all cultural property in the
* Database
*
* @ Return ArrayList all the beans in the database
* @ Throws RemoteException Exception flow
*/
&lt;BeanBeneCulturale&gt; ottieniBeniCulturali public ArrayList () throws RemoteException;

/**
* Method for updating (or change) the data of a cultural
*
* @ Param pBeneCulturale The bean with the new information of the cultural
* @ Return boolean The result of the operation; true if was successful, false otherwise
* @ Throws RemoteException Exception flow
*/

public boolean modificaBeneCulturale (BeanBeneCulturale pBeneCulturale) throws RemoteException

/**
* Method for setting a tag to a certain cultural
*
* @ Param pBeneCulturaleID The identifier of the cultural object to which to add a tag
* @ Param pTagID The ID tag to add to the cultural indicated
* @ Return boolean The result of the operation; true if was successful, false otherwise
* @ Throws RemoteException Exception flow
*/

public boolean aggiungiTagBeneCulturale (pBeneCulturaleID int, int pTagID) throws RemoteException

/**
* Method for removing a tag from a certain cultural
* To ensure that 'the operation is successful it is necessary that the cultural property has
* Actually set the specified tag
*
* @ Param pBeneCulturaleID The identifier of the cultural object from which to remove the tag
* @ Param pTagID The ID tag to be removed from the cultural indicated
* @ Return boolean The result of the operation; true if was successful, false otherwise
* @ Throws RemoteException Exception flow
*/

public boolean rimuoviTagBeneCulturale (pBeneCulturaleID int, int pTagID) throws RemoteException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestioneBeniCulturaliComune</id>
      <content>package unisa.gps.etour.control.GestioneBeniCulturali;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.BeanVisitaBC;

public interface extends

/**
* Interface for operations common to users and operators on Agency
* Beniculturali
*
* @ Author Michelangelo De Simone
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/

public interface extends Remote IGestioneBeniCulturaliComune
(
/**
*
* Method to return a particular Cultural Heritage
*
* @ Param pBeneCulturaleID The identifier of the cultural property to be returned
* @ Return BeanBeneCulturale Contains data required of Cultural Heritage
* @ Throws RemoteException Exception flow
*/
public BeanBeneCulturale ottieniBeneCulturale (int pBeneCulturaleID) throws RemoteException

/**
* Returns the list of tags of a cultural
*
* @ Param ID pBeneCulturaleID of Cultural Heritage
* @ Return ArrayList of the cultural &lt;BeanTag&gt; tags specified
* @ Throws RemoteException Exception flow
*/
&lt;BeanTag&gt; ottieniTagBeneCulturale public ArrayList (int pBeneCulturaleID) throws RemoteException;

/**
*
* Returns a list of feedback to the cultural specified
*
* @ Param ID pBeneCulturaleID of Cultural Heritage
* @ Return HashMap &lt;BeanVisitaBC, String&gt; The feedback of Cultural Heritage
* @ Throws RemoteException Exception flow
*/
&lt;BeanVisitaBC, String&gt; ottieniFeedbackBeneCulturale public HashMap (int pBeneCulturaleID) throws RemoteException;

/**
*
* Returns for the cultural property specified, an array where each position contains the number of
* Feedback corresponding to the value of the array more than 'one.
* The calculation and 'made in the period between 30 days and today.
*
* @ Param ID pBeneCulturaleID of Cultural Heritage
* @ Return ArrayList &lt;Integer&gt; The statistics of last thirty days
* @ Throws RemoteException Exception flow
*/
&lt;Integer&gt; ottieniStatisticheBeneCulturale public ArrayList (int pBeneCulturaleID) throws RemoteException;

/**
* Method for updating (or modification) of a feedback for a certain good
* Cultural. The method has the burden of
*
* @ Param pBeneCulturaleID The identifier of the cultural change which the feedback
* @ Param pBeanVisitaBC The new feedback to the cultural indicated
* @ Return boolean The result of the operation; true if was successful, false otherwise
* @ Throws RemoteException Exception flow
*/

public boolean modificaFeedbackBeneCulturale (int pBeneCulturaleID, BeanVisitaBC pBeanVisitaBC) throws RemoteException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestionePuntiDiRistoroAgenzia</id>
      <content>package unisa.gps.etour.control.GestionePuntiDiRistoro;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import unisa.gps.etour.bean.BeanConvenzione;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanVisitaPR;

public interface extends

/**
* Interface for refreshments on the side of the agency
*
* @ Author Joseph Morelli
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University
* Of Salerno
*/

public interface extends IGestionePuntiDiRistoroAgenzia
IGestionePuntiDiRistoroComune
(

/**
* Method for inserting a new Refreshment
*
* @ Param pPuntoDiRistoro containing all the data from the Refreshment
* Add
* @ Throws RemoteException Exception Remote
*/
public boolean inserisciPuntoDiRistoro (BeanPuntoDiRistoro pPuntoDiRistoro)
throws RemoteException

/**
* Method for deleting a refreshment bar with ID
*
* @ Param pIDPuntoDiRistoro for the unique identification of point
* Refreshments
* @ Throws RemoteException Exception Remote
*/

public boolean cancellaPuntoDiRistoro (int pPuntoDiRistoroID)
throws RemoteException

/**
* Method to return all the refreshment of the DataBase
*
* @ Return ArrayList containing all the beans of the present Refreshments
* In the DataBase
* @ Throws RemoteException Exception Remote
*/
&lt;BeanPuntoDiRistoro&gt; ottieniPuntiDiRistoro public ArrayList ()
throws RemoteException;

/**
* Method to return all the refreshment with convention
* Active or not
*
* @ Param Boolean statoConvenzione for the type of eateries by
* Get (contracted or not)
* @ Return ArrayList containing all the beans of the present Refreshments
* In the database depending on the status of the Convention
* @ Throws RemoteException Exception Remote
*/

public ArrayList &lt;BeanPuntoDiRistoro&gt; ottieniPuntiDiRistoro (
statoConvenzione boolean) throws RemoteException

/**
* Method for inserting a new convention for a certain point
* Refreshments
*
* @ Param pPuntoDiRistoroID integer that uniquely identifies the point
* Refreshments
* @ Param pConv Convention that will enable (Parameter ID
* Refreshment create redundancy but is useful for security
* Data)
* @ Return boolean for confirmation of operation
* @ Throws RemoteException Exception Remote
*/

public boolean attivaConvenzione (int pPuntoDiRistoroID,
BeanConvenzione pConv) throws RemoteException

/**
* Method to get all the feedback associated to a certain point
* Refreshments
*
* @ Param pPuntoDiRistoroID unique identifier of the Refreshment
* To get feedback
* @ Return HashMap containing the bean as the key value of feedback and how
* The tourist who issued the feedback
* @ Throws RemoteException Exception Remote
*/

public HashMap &lt;BeanVisitaPR, String&gt; ottieniFeedbackPuntoDiRistoro (
pPuntoDiRistoroID int) throws RemoteException

/**
* Method for updating (or change) the data of a Refreshment
*
* @ Param pPuntoDiRistoroID for the unique identification of point
* Refreshments to be amended
* @ Param pPuntoDiRistoroAggiornato containing the new data to be saved
* @ Return Boolean value-true if the operation went successfully,
* False otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean modificaPuntoDiRistoro (
BeanPuntoDiRistoro pPuntoDiRistoroAggiornato)
throws RemoteException

/**
* Method which allows you to insert a tag to search for a useful point
* Refreshments
*
* @ Param pPuntoDiRistoroId unique identifier of Refreshment
* @ Param pTagId unique ID tags to be inserted
* @ Return Boolean value-true if the operation went successfully,
* False otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean inserisciTagPuntoDiRistoro (pPuntoDiRistoroId int, int pTagId)
throws RemoteException

/**
* Method which allows you to delete a tag to search for a useful point
* Refreshments
*
* @ Param pPuntoDiRistoroId unique identifier of Refreshment
* @ Param pTagId unique ID tags to be inserted
* @ Return Boolean value-true if the operation went successfully,
* False otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean cancellaTagPuntoDiRistoro (pPuntoDiRistoroId int, int pTagId)
throws RemoteException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestionePuntiDiRistoroComune</id>
      <content>package unisa.gps.etour.control.GestionePuntiDiRistoro;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.BeanVisitaPR;

public interface extends

/**
* Interface for common operations on the refreshment
*
* @ Author Joseph Morelli
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface extends Remote IGestionePuntiDiRistoroComune
(

/**
* Method to return a particular Refreshment
*
* @ Param pPuntoDiRistoroID to identify the Refreshment from
* Return
* @ Return Bean contains the data of Refreshment concerned
* @ Throws RemoteException Exception Remote
*/
public BeanPuntoDiRistoro ottieniPuntoDiRistoro (int pPuntoDiRistoroID)
throws RemoteException

/**
* Method which returns the tags to some refreshment
*
* @ Param pPuntoDiRistoroID point identification Refreshment
* @ Return structure containing all BeanTag associated with the point
* Refreshments passed as parameter
* @ Throws RemoteException Exception Remote
*/
&lt;BeanTag&gt; ottieniTagPuntoDiRistoro public ArrayList (int pPuntoDiRistoroID)
throws RemoteException;

/**
* Method which returns the last 10 comments made for a
* Refreshment
*
* @ Param pPuntoDiRistoroID ID for the point of rest in
* Question
* @ Return Array of strings containing 10 items
* @ Throws RemoteException Exception Remote
*/

public String [] ottieniUltimiCommenti (int pPuntoDiRistoroID)
throws RemoteException

/**
* Returns for the Refreshment specified, an array where each
* Location contains the number of ratings corresponding to the value
* Index of the array more 'one. The calculation and 'made in the period
* 30 days and today.
*
* @ Param pPuntoDiRistoroID unique identifier of Refreshment
* @ Return ArrayList containing the counters as explained above
* @ Throws RemoteException Exception Remote
*/

public ArrayList &lt;Integer&gt; ottieniStatistichePuntoDiRistoro (
pPuntoDiRistoroID int) throws RemoteException

/**
* Method which allows you to change the comment issued for a
* Refreshment
*
* @ Param pPuntoDiRistoroId unique identifier of Refreshment
* @ Param nuovaVisita Bean containing new comment
* @ Return Boolean value-true if the operation went successfully,
* False otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean modificaFeedbackPuntoDiRistoro (int pPuntoDiRistoroId,
BeanVisitaPR nuovaVisita) throws RemoteException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestioneTagComune</id>
      <content>package unisa.gps.etour.control.GestioneTag;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanTag;

interface for

/**
* Common interface for managing Tag
*
* @ Author Joseph Morelli
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface extends Remote IGestioneTagComune
(

/**
* Method which returns all the tags stored in the database
*
* @ Return an ArrayList of BeanTag
* @ Throws RemoteException Exception Remote
*/
&lt;BeanTag&gt; ottieniTags public ArrayList () throws RemoteException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestioneTagOperatoreAgenzia</id>
      <content>package unisa.gps.etour.control.GestioneTag;

import java.rmi.RemoteException;
import unisa.gps.etour.bean.BeanTag;

public interface IGestioneTagOperatoreAgenzia extends IGestioneTagComune

/**
* Interface for the tag handler by the Operator Agency
*
* @ Author Joseph Morelli
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IGestioneTagOperatoreAgenzia extends IGestioneTagComune
(

/**
* Method to insert a new tag
*
* @ Param pTagNuovo containing all the data of the new Tag
* @ Return Boolean: true if the operation is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/
public boolean inserisciTag (BeanTag pTagNuovo) throws RemoteException

/**
* Method for the cancellation of an existing tag
*
* @ Param pTagID to identify the tags in question
* @ Return Boolean: true if the operation is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean cancellaTag (int pTagID) throws RemoteException

/**
* Method for editing a Tag
*
* @ Param pTagModificato containing the details of the new Tag
* @ Return Boolean: true if the operation is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean modificaTag (BeanTag pTagModificato) throws RemoteException

/**
* Method which returns a tag identified by its ID
*
* @ Param pTagID to identify a particular tag
* @ Return a BeanTag containing data Tag concerned
* @ Throws RemoteException Exception Remote
*/

public BeanTag ottieniTag (int pTagID) throws RemoteException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestioneTuristaClient</id>
      <content>package unisa.gps.etour.control.GestioneUtentiRegistrati;

import java.rmi.RemoteException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanPreferenzaDiRicerca;
import unisa.gps.etour.bean.BeanPreferenzeGeneriche;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.bean.BeanVisitaPR;

public interface IGestioneTuristaClient extends IGestioneTuristaComune

/**
* Interface on the Management of Tourist Information
*
* @ Author Joseph Penna, Federico Leon
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab University of DMI
* Salerno
*/

public interface IGestioneTuristaClient extends IGestioneTuristaComune
(

/**
* Method for the insertion of a Tourist
*
* @ Param pTurista container for all data relating to tourism by
* Insert
* @ Return Boolean: True if the insertion is successful, False otherwise
* @ Throws RemoteException Exception Remote
*/
public boolean inserisciTurista (BeanTurista pTurista)
throws RemoteException

/**
* Method for including the General Preferences Tourist
*
* @ Param pIdTurista Identifier Turista which involve
* General Preferences
* @ Param pPreferenzeGeneriche General Preferences for inclusion
* @ Return Boolean: True if the insertion is successful, False otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean inserisciPreferenzeGeneriche (
BeanPreferenzeGeneriche pPreferenzeGeneriche)
throws RemoteException

/**
* Method for the extraction Preferences generously given Tourists
*
* @ Param pIdTurista Identifier Turista which you want
* Get the General Preferences
* @ Return Preferences General information relating to tourism
* @ Throws RemoteException Exception Remote
*/

public BeanPreferenzeGeneriche ottieniPreferenzeGeneriche (int pIdTurista)
throws RemoteException

/**
* Method for changing the Preferences generously given Tourists
*
* @ Param ID pIdTurista of tourists for whom you want
* Change the General Preferences
* @ Param pPreferenzeGenericheNuove The Prefereferze General for inclusion
* @ Param pPreferenzeGenericheVecchie Preferences generous to replace
* @ Return Boolean: True if the MADIF successful, False otherwise
* @ Throws RemoteException
*/

public boolean modificaPreferenzeGeneriche (
BeanPreferenzeGeneriche pPreferenzeGenericheNuove)
throws RemoteException

/**
* Method for the removal of preferences associated with the General
* Tourist
*
* @ Param ID pIdTurista of tourists for whom you want
* Delete the General Preferences
* @ Return Preferences General erased
* @ Throws RemoteException Exception Remote
*/

public BeanPreferenzeGeneriche cancellaPreferenzeGeneriche (int pIdTurista)
throws RemoteException

/**
* Method to insert a Search Preferences
*
* @ Param ID pIdTurista of tourists for which you intend
* Insert a Search Preferences
* @ Param pPreferenzaDiRicerca Search Preferences be included
* @ Return Boolean: True if the insertion is successful, False otherwise
* @ Throws RemoteException
*/

public boolean inserisciPreferenzaDiRicerca (int pIdTurista,
BeanPreferenzaDiRicerca pPreferenzaDiRicerca)
throws RemoteException

/**
* Method for extracting the set of Search Preferences given
* Tourist
*
* @ Param ID pIdTurista of tourists for whom you want
* Extract search preferences
Together * @ return the search preferences associated with the Tourist information
* @ Throws RemoteException Exception Remote
*/

public BeanPreferenzaDiRicerca [] ottieniPreferenzeDiRicerca (
pIdTurista int) throws RemoteException

/**
* Method for deleting a Search Preference given its
* ID and Tourists
*
* @ Param ID pIdTurista of tourists for whom you want
* Delete a Search Preferences
* @ Param ID pIdPreferenzaDiRicerca Search Preferences
* To cancel
* @ Return The preference of search Delete
* @ Throws RemoteException Exception Remote
*/

public BeanPreferenzaDiRicerca cancellaPreferenzeDiRicerca (int pIdTurista,
pIdPreferenzaDiRicerca int) throws RemoteException

/**
* Method to extract the list references to the Cultural Heritage
* Visited by a tourist
*
* @ Param pIdTurista Identifier Turista
* @ Return list of references to the Cultural Heritage Visited
* @ Throws RemoteException Exception Remote
*/

public BeanVisitaBC [] ottieniBeniCulturaliVisitati (int pIdTurista)
throws RemoteException

/**
* Method for the extraction of the list when making reference to Refreshments
* Visited by a tourist
*
* @ Param pIdTurista Identifier Turista
* @ Return list of references to Refreshments Visited
* @ Throws RemoteException Exception Remote
*/

public BeanVisitaPR [] ottieniPuntiDiRistoroVisitati (int pIdTurista)
throws RemoteException

/**
* Method for the insertion of a cultural Visited
*
* @ Param pVisitaBC package containing all information relating to
* Visit
* @ Return true if the item is added successfully, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean inserisciBeneCulturaleVisitato (BeanVisitaBC pVisitaBC)
throws RemoteException

/**
* Method for inserting a refreshment Visited
*
* @ Param pVisitaPR package containing all information relating to
* Visit
* @ Return true if the item is added successfully, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean inserisciPuntoDiRistoroVisitato (BeanVisitaPR pVisitaPR)
throws RemoteException

/**
* Method for the insertion of a cultural object in the list of Favorites
*
* @ Param pIdTurista Identifier Turista
* @ Param ID pIdBeneCulturale of Cultural Heritage
* @ Return true if the insertion is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean inserisciBeneCulturalePreferito (int pIdTurista,
pIdBeneCulturale int) throws RemoteException

/**
* Method for inserting a refreshment to my Favorites
*
* @ Param pIdTurista Identifier Turista
* @ Param pIdPuntoDiRistoro point identification Refreshment
* @ Return true if the insertion is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean inserisciPuntoDiRistoroPreferito (int pIdTurista,
pIdPuntoDiRistoro int) throws RemoteException

/**
* Method for the cancellation of a cultural object from the list of Favorites
*
* @ Param pIdTurista Identifier Turista
* @ Param ID pIdBeneCulturale of Cultural Heritage
* @ Return true if the cancellation is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean cancellaBeneCulturalePreferito (int pIdTurista,
pIdBeneCulturale int) throws RemoteException

/**
* Method for deleting a refreshment from the list of Favorites
*
* @ Param pIdTurista Identifier Turista
* @ Param pIdPuntoDiRistoro point identification Refreshment
* @ Return true if the cancellation is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean cancellaPuntoDiRistoroPreferito (int pIdTurista,
pIdPuntoDiRistoro int) throws RemoteException

/**
* Method to extract the list of Cultural Heritage Favorites
*
* @ Param pIdTurista Identifier Turista
* @ Return List of Cultural Heritage Favorites
* @ Throws RemoteException Exception Remote
*/

public BeanBeneCulturale [] ottieniBeniCulturaliPreferiti (int pIdTurista)
throws RemoteException

/**
* Method to extract the list of Refreshments
*
* @ Param pIdTurista Identifier Turista
* @ Return list of eateries Favorites
* @ Throws RemoteException Exception Remote
*/

public BeanPuntoDiRistoro [] ottieniPuntiDiRistoroPreferiti (int pIdTurista)
throws RemoteException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IGestioneTuristiAgenzia</id>
      <content>package unisa.gps.etour.control.GestioneUtentiRegistrati;

import java.rmi.RemoteException;
import java.util.ArrayList;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.bean.BeanVisitaPR;

public interface IGestioneTuristiAgenzia extends IGestioneTuristaComune

/**
* Interface for handling tourists from the side of the transaction Agency
*
* @ Author Joseph Morelli
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public interface IGestioneTuristiAgenzia extends IGestioneTuristaComune
(

/**
* Method for the cancellation of a tourist from the Database
*
* @ Param pIdTurista Identifier Tourist delete
* @ Return Boolean: true if the operation is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/
public boolean delete (int pIdTurista) throws RemoteException

/**
* Method to activate a registered tourists
*
* @ Param pIdTurista ID to activate the Tourist
* @ Return Boolean: true if the operation is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean attivaTurista (int pIdTurista) throws RemoteException

/**
* Method to disable an active tourists
*
* @ Param to disable pIdTurista Identifier Tourist
* @ Return Boolean: true if the operation is successful, false otherwise
* @ Throws RemoteException Exception Remote
*/

public boolean disattivaTurista (int pIdTurista) throws RemoteException

/**
* Method to obtain a collection of Tourists
*
* @ Return ArrayList of BeanTurista
* @ Throws RemoteException Exception Remote
*/
&lt;BeanTurista&gt; ottieniTuristi public ArrayList () throws RemoteException;

/**
* Method to obtain a collection of active tourists or not
*
* @ Param boolean statoAccount Tourists can choose
* On whether
* @ Return ArrayList of BeanTurista
* @ Throws RemoteException Exception Remote
*/

public ArrayList &lt;BeanTurista&gt; ottieniTuristi (boolean statoAccount)
throws RemoteException

/**
* Method to get all the feedback issued by a tourist for the points
* Refreshments
*
* @ Param pIdTurista ID to pick up the tourists in
* Feedback
* @ Return ArrayList containing all the beans Feedback released
* @ Throws RemoteException Exception Remote
*/

/**
* Method to get all the feedback issued by a tourist for Heritage
* Cultural
*
* @ Param pIdTurista ID to pick up the tourists in
* Feedback
* @ Return ArrayList containing all the beans Feedback released
* @ Throws RemoteException Exception Remote
*/</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_IRicerca</id>
      <content>package unisa.gps.etour.control.GestioneRicerche;

import java.rmi.Remote;
import java.rmi.RemoteException;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.util.Punto3D;

public interface extends

/**
* Interface for management of research
*
* @ Author Joseph Penna
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public interface extends Remote IRicerca
(

// Constants identify the types of site
public final static byte BENE_CULTURALE = 0;
public final static byte PUNTO_DI_RISTORO = 1;

/**
* Initialization method for research
*
* @ Param pIdTurista ID of the tourist. Pass -1 in case of a Guest
* @ Param pParoleChiave Together keyword search
Together * @ param pTagsId Search Tags
* @ Param pRaggioMax Maximum distance between the user and the site
* @ Param numeroElementiPerPagina number of items to look for in a
* Search session
* @ Param pPosizioneUtente detected by the GPS user position
* @ Param type pTipologiaSito site search
* @ Return number of elements emerged from the research. On error
* Returns -1
* @ Throws RemoteException the remote exception
*/
public int search (int pIdTurista, pParoleChiave String, int [] pTagsId, double pRaggioMax,
int pElementiPerPagina, Punto3D pPosizioneUtente,
pTipologiaSito bytes) throws RemoteException

/**
* Method for returning the list of emerging from the Cultural Heritage
* Research, in a given interval
*
* @ Param pPagina range of items to be included in the results
* @ Return entirety of cultural property related to the range of results
* Selected search. In case of error returns null
* @ Throws RemoteException Exception Remote
*/

public BeanBeneCulturale [] ottieniPaginaRisultatiBeneCulturale (int pPagina)
throws RemoteException

/**
* Method to return the list of eateries have emerged from
* Research related to a specific intevallo
*
* @ Param pPagina range of items to be included in the results
* @ Return set of points relating to the range of refreshment
* Selected search results. In case of error returns null
* @ Throws RemoteException Exception Remote
*/

public BeanPuntoDiRistoro [] ottieniPaginaRisultatiPuntoDiRistoro (int pPagina)
throws RemoteException

/**
* Method for returning the number of elements results from
* Search
*
* @ Return number of elements emerged in the research phase. Where no
* Is initialized the search returns -1
*/

public int ottieniNumeroElementiRicerca () throws RemoteException

/**
* Method for returning the number of pages appear in results
*
* @ Return number of pages that have emerged in the research phase. Where no
* Is initialized the search returns -1
*/

public int ottieniNumeroPagineRicerca () throws RemoteException

// Constants identify the types of site</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_LimitedDocument</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.documents;

import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

public class extends

public class extends LimitedDocument PlainDocument
(
private static final long serialVersionUID = 1L;
private int maxLength;

public LimitedDocument (int pMaxLength)

public void insertString (int pOffset, String pStringa, AttributeSet pAttribute) throws BadLocationException

// Note: the content is always a newline at the end
// If the maximum length is greater than or equal to the string, the part.
// Otherwise add what may</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_MediaVotiRenderer</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.awt.Component;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import unisa.gps.etour.gui.operatoreagenzia.Home;

class creates

/**
* &lt;b&gt; MediaVotiRenderer &lt;/ b&gt;
* &lt;p&gt;
* This class creates a custom renderer for the average ratings of a
* Site. &lt;/ B&gt;
*
* @ See javax.swing.table.DefaultTableRenderer;
* @ See javax.swing.table.TableCellRenderer;
* @ Version 1.0
* @ Author Mario Gallo
*/

public class extends MediaVotiRenderer DefaultTableCellRenderer
(

/**
* Method that returns the custom component for the
* Display of the data contained in the cell of a table.
*
* @ Param pTable JTable - the table.
* @ Param Object pValue - the data.
* @ Param boolean pSelected -
* &lt;ul&gt;
* &lt;li&gt; &lt;i&gt; True &lt;/ i&gt; if the selected cell.
* &lt;li&gt; &lt;i&gt; False &lt;/ i&gt; otherwise.
* &lt;/ Ul&gt;
* @ Param boolean pHasFocus -
* &lt;ul&gt;
* &lt;li&gt; &lt;i&gt; True &lt;/ i&gt; if the cell has the focus.
* &lt;li&gt; &lt;i&gt; False &lt;/ i&gt; otherwise.
* &lt;/ Ul&gt;
* @ Param int pRow - the line number.
* @ Param int pColumn - the column number.
* @ Return Component - the component that customizes render the cell.
* @ Throws IllegalArgumentException - if the value of the cell can not
* Be rendered by this renderer.
*/
public Component getTableCellRendererComponent (JTable pTable,
Object pValue, boolean pSelected, boolean pFocus, int prow,
pColumn int) throws IllegalArgumentException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_MessaggiErrore</id>
      <content>package unisa.gps.etour.util;

public class MessaggiErrore

/**
* Standard error message self-describing
*
* @ Author Michelangelo De Simone
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/

public class MessaggiErrore
(
// Occurs when connecting to the DBMS
public static final String ERRORE_CONNESSIONE_DBMS = &quot;Connection to DBMS Failed&quot;;

// Occurs when you can not perform an operation on the DBMS
public static final String ERRORE_DBMS = &quot;Error DBMS;

// It occurs in conditions not specified
public static final String ERRORE_SCONOSCIUTO = &quot;Unknown error&quot;;

// Occurs when there are format errors in a bean
public static final String ERRORE_FORMATO_BEAN = &quot;Error data bean;

// Occurs when a data error
public static final String ERRORE_DATI = &quot;Data Error&quot;;

// Occurs when an error occurs on read / write files
public static final String ERRORE_FILE = &quot;Error reading / writing file&quot;;

// Occurs when you have reached the maximum number of banners displayed
public static final String ERRORE_NUM_BANNER = &quot;count exceeded banner inserted&quot;;
)

// Occurs when connecting to the DBMS
// Occurs when you can not perform an operation on the DBMS
// It occurs in conditions not specified
// Occurs when there are format errors in a bean
// Occurs when a data error
// Occurs when an error occurs on read / write files
// Occurs when you have reached the maximum number of banners displayed</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_News</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt .*;
import java.awt.event .*;
import java.io.FileNotFoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.Date;
import javax.swing .*;
import java.util .*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.border .*;
import unisa.gps.etour.bean.BeanNews;
import unisa.gps.etour.control.GestioneAdvertisement.IGestioneAdvertisementAgenzia;
import unisa.gps.etour.gui.DeskManager;
import unisa.gps.etour.gui.HelpManager;
import unisa.gps.etour.gui.operatoreagenzia.document.LimitedDocument;
import unisa.gps.etour.gui.operatoreagenzia.tables.NewsTableModel;
import unisa.gps.etour.gui.operatoreagenzia.tables.PrioritaRenderer;
import unisa.gps.etour.gui.operatoreagenzia.tables.ScrollableTable;
import unisa.gps.etour.gui.operatoreagenzia.tables.TestoNewsRenderer;
import unisa.gps.etour.util.Data;

class implements

/**
* This class implements the interface for collecting news for the actor
* Operator Agency.
*
* @ Version 1.0
* @ Author Mario Gallo
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class News extends JInternalFrame
(
private JPanel jContentPane = null;
Private JToolBar NewsToolbar = null;
private JButton btnEliminaN = null;
private JPanel rightPanel = null;
private JPanel formNews = null;
Private JSlider prSlider = null;
private JButton btnInsertModify = null;
private JButton btnReset = null;
private JPanel panelHelp = null;
private JTextPane textGuida = null;
private JScrollPane scrollTableNews = null;
private JTable tableNews = null;
private JTextArea testoNews = null;
private JComboBox durataNews = null;
private JButton btnModificaN = null;
private JLabel labelCaratteri;
private int idNews = -1;
private NewsTableModel TableModel;
Private HelpManager newsHelp;
protected DeskManager desktopManager;
protected JDesktopPane JDesktopPane;
Private IGestioneAdvertisementAgenzia gestioneNews;

/**
* This is the default constructor.
*/
public News ()

/** Inclusion of the frame on the desktop desktop retrieves bread bread
* And desktop manager and initializes the remote objects
* Management of cultural heritage.
*/

public void internalFrameOpened (InternalFrameEvent pEvent)

/** Two exceptions: RemoteException and NotBoundException. The
* Result is the same. The management is not operable and
* After the error message window closes.
*/
catch (Exception ex)
(
JLabel error = new JLabel (
&quot;&lt;html&gt; &lt;h2&gt; Unable to communicate with the server eTour. &lt;/ h2&gt;&quot;
+ &quot;&lt;h3&gt; &lt;u&gt; The dialog management request is closed. &lt;/ U&gt; &lt;/ h3&gt;&quot;
+ &quot;&lt;p&gt; &lt;b&gt; Possible Causes: &lt;/ b&gt;&quot;
+ &quot;&lt;ul&gt; &lt;li&gt; No connection to the network. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; inactive. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; clogged. &lt;/ Li&gt; &lt;/ ul&gt;&quot;
+ &quot;&lt;p&gt; Please try again later. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; If the error persists, please contact technical support. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; We apologize for the inconvenience. &lt;/ Html&gt;&quot;);
Err = new ImageIcon ImageIcon (getClass (). GetResource (
Home.URL_IMAGES + &quot;error48.png&quot;));
JOptionPane.showMessageDialog (JDesktopPane, error,
&quot;Error!&quot; JOptionPane.ERROR_MESSAGE, err);
frame.dispose ();
)
)
));
)

/**
* Initialize the content pane of the frame inside.
*
* @ Return javax.swing.JPanel - the content pane.
*/

private JPanel getJContentPane ()

/**
* This method initializes the toolbar to manage the news.
*
* @ Return javax.swing.JToolBar - the toolbar management news.
*/
Private JToolBar getNewsToolbar ()
(
if (null == NewsToolbar)
(
NewsToolbar JToolBar = new ();
NewsToolbar.setFloatable (false);
NewsToolbar.add (getBtnModificaN ());
NewsToolbar.addSeparator ();
NewsToolbar.add (getBtnEliminaN ());
)
NewsToolbar return;
)

/**
* This method initializes the button to edit a news.
*
* @ Return javax.swing.JButton - button to change.
*/

private JButton getBtnModificaN ()

public void actionPerformed (ActionEvent pActionEvent)

/**
* This method initializes the button to delete a news.
*
* @ Return javax.swing.JButton - the button for deletion.
*/

private JButton getBtnEliminaN ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the panel that realizes the interface side
* Right of news management.
*
* @ Return javax.swing.JPanel - the right panel.
*/

private JPanel getRightPanel ()

/**
* This method initializes the form for entering and editing a
* News.
*
* @ Return javax.swing.JPanel - the format
*/

private JPanel getFormNews ()

/**
* This method initializes the slider to set the priority of a
* News.
*
* @ Return javax.swing.JSlider - the slider with ticks from 1 to 5.
*/
Private JSlider getPrSlider ()
(
if (null == prSlider)
(
prSlider = new JSlider (JSlider.HORIZONTAL, 5, 1);
prSlider.setMinimum (1);
prSlider.setMaximum (5);
prSlider.setMajorTickSpacing (1);
prSlider.setLabelTable (prSlider.createStandardLabels (1));
prSlider.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));
prSlider.setName ( &quot;priority&quot;);
prSlider.addMouseListener (newsHelp);
prSlider.setPaintLabels (true);
prSlider.setPaintTicks (true);
prSlider.setPaintTicks (true);
prSlider.setSnapToTicks (true);
)
prSlider return;
)

/**
* This method initializes the radio button for submission of the form
* Insert / edit.
*
* @ Return javax.swing.JButton - the button of submission of the form.
*/

private JButton getBtnInsertModify ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the button to clear the form or
* Cancel editing actions on a selected news.
*
* @ Return javax.swing.JButton - the button above.
*/

private JButton getBtnReset ()

public void actionPerformed (ActionEvent arg0)

/**
* This method initializes the panel's online help.
*
* @ Return javax.swing.JPanel
*/

private JPanel getPanelHelp ()

/**
* This method initializes the table with all the news these
* In the system.
*
* @ Return javax.swing.JTable
*/

private JScrollPane getTableNews ()

public void ValueChanged (ListSelectionEvent event)

public void keyPressed (KeyEvent PKEY)

/**
* This method initializes the text area that contains the text of a news.
*
* @ Return javax.swing.JTextArea - the text area.
*/

private JTextArea getTestoNews ()

public void keyTyped (KeyEvent pKeyEvent)

public void keyPressed (KeyEvent pKeyEvent)

/**
* This method resets the form fields.
*/

private void azzeraForm ()

/**
* This method imports the news downloaded from the server in the table.
*/

private void caricaTabella ()

// Setting up dell'help manager to manage the news.
// Setting up objects for remote asset management
// Cultural.
// Load data.
// In this way I know if she was
// Edit
// Construction of the dialog for confirmation
// Elimination
// The dialog screen appears
// If you chose to confirm the deletion
// We're making a change
// Construction of the dialog for confirmation of
// Edit
// The dialog screen appears
// If you chose to confirm the change
// We are posting
// If an error displays an error message.
// Text of news
// Priority
// Date of entry
// End Date</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_NewsTableModelTest</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables.test;

import java.util.ArrayList;
import java.util.Date;
import unisa.gps.etour.bean.BeanNews;
import unisa.gps.etour.gui.operatoreagenzia.tables.NewsTableModel;
import junit.framework.TestCase;

public class TestCase extends NewsTableModelTest

/**
* Class tests for NewsTableModel
*
* @ Author Mario Gallo
* @ Version 0.1
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
*/
package unisa.gps.etour.gui.operatoreagenzia.tables.test;

import java.util.ArrayList;
import java.util.Date;

import unisa.gps.etour.bean.BeanNews;
import unisa.gps.etour.gui.operatoreagenzia.tables.NewsTableModel;
import junit.framework.TestCase;

public class TestCase extends NewsTableModelTest
(

private NewsTableModel TableModel;
Private BeanNews aNews;
Private BeanNews aNewsModificata;

public NewsTableModelTest (String pName)
(
super (pName);
aNews = new BeanNews ( &quot;An example of news&quot;, new Date (), new Date (), 2,1);
aNewsModificata = new BeanNews ( &quot;A news amended sample&quot;, new Date (), new Date (), 3,1);
)

protected void setUp () throws Exception
(
super.setUp ();
NewsTableModel = new TableModel ();
)

/** Verify the behavior of the manufacturer with an ArrayList of BeanNews.
*/

public void testCostruttoreConArrayList ()

/** Verify the manufacturer with an ArrayList Compor zero.
*/

public void testCostruttoreConArrayListNull ()

/** Verify the behavior of the manufacturer with an empty ArrayList.
*/

public void testCostruttoreConArrayListVuoto ()

/** Verify the behavior of the method with the correct parameters.
*/

public void testGetValueAtParametriCorretti ()

/** Verify Compor the method with an index row fold.
*/

public void testGetValueAtRigaSballata ()

/** Verify Compor of the method with a column index busted.
*/

public void testGetValueAtColonnaSballata ()

/** Verify Compor method with proper parameter.
*/

public void testInsertNewsParametroCorretto ()

/** Verify Compor method with parameter to null
*/

public void testInsertNewsParametroNull ()

/** Verify Compor method with proper parameter.
*/

public void testUpdateNewsParametroCorretto ()

/** Verify Compor method with parameter to null
*/

public void testUpdateNewsParametroNull ()

/** Verify Compor method with proper parameter.
*/

public void testRemoveNewsParametroCorretto ()

/** Verify Compor of the method with row index busted.
*/

public void testRemoveNewsRigaSballata ()

// Put bean in two model test.
// Verify the data entered.</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_OperatoreAgenzia</id>
      <content>package beans;

import java.sql.Date;

public class OperatoreAgenzia

public class OperatoreAgenzia
(
private String Name, Last Name, Citt-Residenza, Phone, Zip, Address, Email, Password, username;
private Date DoB;

public OperatoreAgenzia ()

public void setNome (String par1)

public String getName ()

public void setCognome (String par1)

public String getCognome ()

public void setCitt-Residenza (String par1)

public String getCitt-Residenza ()

public void setTelefono (String par1)

public String getTelefono ()

public void setCap (String par1)

public String getCap ()

public void setIndirizzo (String par1)

public String getIndirizzo ()

public void setEmail (String par1)

public String getEmail ()

public void setPassword (String par1)

public String getPassword ()

public void setUsername (String par1)

public String GetUserName ()

public void setDataNascita (Date par1)

public Date getDataNascita ()</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_PRNode</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables;

import javax.swing.tree.DefaultMutableTreeNode;

class creates

/**
* &lt;b&gt; PRNode &lt;/ b&gt;
&lt;p&gt; * This class creates a node in a JTree to store
* Information for a refreshment. &lt;/ P&gt;
*
* @ See javax.swing.JTree;
* @ See javax.swing.tree.DefaultMutableTreeNode;
* @ Version 1.0
* @ Author Mario Gallo
*
*/

public class DefaultMutableTreeNode extends PRNode
(
private int id;

public PRNode ()

/**
* Create a node with the name of refreshment and
* Your id supplied as parameters.
*
PNomePR * @ param String - the name of refreshment.
PID * @ param int - the id of refreshment.
* @ Throws IllegalArgumentException - if the name provided as input is invalid.
*/
public PRNode (Phnom String, int pid) throws IllegalArgumentException
(
super ();
if (Phnom == null | | pNome.equals (&quot;&quot;))
(
throw new IllegalArgumentException (
&quot;Name of refreshment supplied invalid input.&quot;);
)
setUserObject (Phnom);
id = pid;
)

/**
*
* Returns the id of the point of comfort for which information
* Are stored in this node.
*
* @ Return int - the id of refreshment.
*/

public int getID ()

/**
*
* Stores the id of the refreshment provided input.
*
* @ Param int PID - an ID of an eating place.
*/

public void setID (int pid)

/**
*
* Return the name of refreshment.
*
* @ Return String - the name of refreshment.
*/

public String getName ()

/**
*
* Stores the name of the refreshment provided input.
*
Pnom * @ param String - the name of a refreshment.
* @ Throws IllegalArgumentException - if the name provided as input is invalid.
*/

public void setNome (String Pnom) throws IllegalArgumentException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_PrioritaRenderer</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.awt.Component;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

class creates

/** PrioritaRenderer.java
*
* 1.0
*
* 22/05/2007
*
* 2007 eTour Project - Copyright by SE @ SA Lab - DMI University of Salerno
*/
package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.awt.Component;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

/**
* &lt;b&gt; PrioritRenderer &lt;/ b&gt;
&lt;p&gt; * This class creates a custom renderer JSlider as
* Of the priorities in the table of news. &lt;/ P&gt;
*
* @ Version 1.0
* @ See javax.swing.JSlider
* @ See javax.swing.table.TableCellRenderer
* @ Author Mario Gallo
*
*/

public class extends PrioritaRenderer JSlider implements TableCellRenderer
(
/**
* This default constructor.
*
*/
public PrioritaRenderer ()

/**
* This method returns the display component of the cell identified
* From the row and column provided input.
*
* @ Param pTable JTable - the table.
* @ Param pValue Object - the object contained in the selected cell.
* @ Param pIsSelected boolean - true if the object selected.
* False otherwise.
* @ Param pHasFocus boolean - true if the object has the focus.
* False otherwise.
* @ Param pRow int - the row index.
* @ Param pColumn int - the index of the column.
* @ Return Component - the component to display
*/

public Component getTableCellRendererComponent (pTable JTable, Object pValue,
pIsSelected boolean, boolean pHasFocus, pRow int, int pColumn) throws IllegalArgumentException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_PuntiDiRistoro</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt.BorderLayout;
import javax.swing.JDesktopPane;
import javax.swing.JPanel;
import javax.swing.JInternalFrame;
import java.awt.Dimension;
import javax.swing.ImageIcon;
import java.awt.GridBagLayout;
import javax.swing.JToolBar;
import javax.swing.JLabel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JCheckBox;
import javax.swing.BorderFactory;
import java.awt.Color;
import javax.swing.border.BevelBorder;
import javax.swing.JButton;
import java.awt.GridBagConstraints;
import java.awt.Point;
import javax.swing.JScrollPane;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.font;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import java.awt.Insets;
import java.util.Date;
import javax.swing.SwingConstants;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.util.Punto3D;
import javax.swing.JTable;
import java.awt.Rectangle;

public class PuntiDiRistoro

/**
* This is the default constructor xxx
*/
public PuntiDiRistoro () (
super ();
initialize ();
)

/**
* This method initializes this
*
* @ Return void
*/

private void initialize ()

/**
* This method initializes jContentPane
*
* @ Return javax.swing.JPanel
*/
getJContentPane private JPanel () (
if (jContentPane == null) (
jContentPane = new JPanel ();
jContentPane.setLayout (new BorderLayout ());
jContentPane.add (getRightPanel (), BorderLayout.EAST);
jContentPane.add (getToolbarPR (), BorderLayout.NORTH);
jContentPane.add (getCentrePanel (), BorderLayout.CENTER);
)
jContentPane return;
)

/**
* This method initializes RightPanel
*
* @ Return javax.swing.JPanel
*/
getRightPanel private JPanel () (
if (RightPanel == null) (
RightPanel = new JPanel ();
RightPanel.setLayout (new BorderLayout ());
RightPanel.add (getHelpPanel (), BorderLayout.CENTER);
RightPanel.add (getRicercaPanel (), BorderLayout.CENTER);
)
RightPanel return;
)

/**
* This method initializes jJToolBarBar
*
* @ Return javax.swing.JToolBar
*/
Private JToolBar getToolbarPR () (
if (toolbarPR == null) (
toolbarPR JToolBar = new ();
toolbarPR.setLayout (null);
toolbarPR.setPreferredSize (new Dimension (1, 49));
toolbarPR.setFloatable (false);
toolbarPR.add (getBtnAttiva ());
toolbarPR.addSeparator ();
toolbarPR.add (getBtnStorico ());
toolbarPR.addSeparator ();
toolbarPR.add (getBtnModifica ());
toolbarPR.addSeparator ();
toolbarPR.add (getBtnSkeda ());
toolbarPR.addSeparator ();
toolbarPR.add (getBtnElimina ());
)
toolbarPR return;
)

/**
* This method initializes CentrePanel
*
* @ Return javax.swing.JPanel
*/
getCentrePanel private JPanel () (
if (CentrePanel == null) (
GridBagConstraints = GridBagConstraints new GridBagConstraints ();
gridBagConstraints.fill = GridBagConstraints.BOTH;
gridBagConstraints.weighty = 1.0;
gridBagConstraints.weightx = 1.0;
CentrePanel = new JPanel ();
CentrePanel.setLayout (new GridBagLayout ());
CentrePanel.setPreferredSize (new Dimension (1, 30));
CentrePanel.add (getJScrollPane (), GridBagConstraints);

)
CentrePanel return;
)

/**
* This method initializes btnSkeda
*
* @ Return javax.swing.JButton
*/

private JButton getBtnSkeda ()

public void actionPerformed (ActionEvent arg0)

/**
* This method initializes btnModifica
*
* @ Return javax.swing.JButton
*/

private JButton getBtnModifica ()

/**
* This method initializes btnElimina
*
* @ Return javax.swing.JButton
*/

private JButton getBtnElimina ()

/**
* This method initializes JScrollPane
*
* @ Return javax.swing.JScrollPane
*/

private JScrollPane getJScrollPane ()

/** @ Param pId
* @ Param pNumeroVoti
* @ Param Pnom
* @ Param pCitta
* @ Param pTelefono
* @ Param pDescrizione
* @ Param pLocalita
* @ Param pVia
* @ Param pcap
* @ Param pProvincia
* @ Param pPosizione
* @ Param pOrarioApertura
* @ Param pOrarioChiusura
* @ Param pGiornoChiusura
* @ Param pCostoBiglietto
* @ Param pMediaVoti
*/

BeanPuntoDiRistoro [] test = new BeanPuntoDiRistoro [30];
for (int i = 0; i &lt;30; i + +) (
test [i] = new BeanPuntoDiRistoro (1, 12, 3.5,
&quot;Arturo&quot;, &quot;Near the sea, great view, romantic and Miao,
&quot;089203202&quot;, &quot;the mountains&quot;, &quot;Amalfi&quot;, &quot;Via Principe 35&quot;, &quot;84123rd&quot;
&quot;Salerno&quot;, &quot;1234567898741&quot;, new Punto3D (34,34,34),
new Date (2,23,3), new Date (3,3,4), &quot;Monday&quot;);
)

SitoTableModel new SitoTableModel = new (test);

TablePr = new ScrollableTable (new);
// Name
TablePr.getColumnModel (). GetColumn (0). SetPreferredWidth (140);
// Description
TablePr.getColumnModel (). GetColumn (1). SetPreferredWidth (80);
// Location
TablePr.getColumnModel (). GetColumn (2). SetPreferredWidth (140);
// City
TablePr.getColumnModel (). GetColumn (3). SetPreferredWidth (80);
// State
TablePr.getColumnModel (). GetColumn (4). SetPreferredWidth (70);
// Number of Votes
TablePr.getColumnModel (). GetColumn (5). SetPreferredWidth (70);
// Average Ratings
TablePr.getColumnModel (). GetColumn (6). SetPreferredWidth (60);
// PosGeo
TablePr.getColumnModel (). GetColumn (7). SetPreferredWidth (30);
TablePr.setDefaultRenderer (String.class, new DefaultTableCellRenderer ());
TablePr.setRowHeight (32);
TablePr.setShowVerticalLines (false);
TablePr.setDefaultRenderer (Double.class, new MediaVotiRenderer ());
TablePr.setSelectionMode (javax.swing.ListSelectionModel.SINGLE_SELECTION);
TablePr.setSelectionForeground (Color.RED);
TablePr.setSelectionBackground (Color.white);
TablePr.setColumnSelectionAllowed (false);
final javax.swing.ListSelectionModel this TablePr.getSelectionModel = ();
questo.addListSelectionListener (new ListSelectionListener () (

public void ValueChanged (ListSelectionEvent event) (
btnElimina.setEnabled (true);
btnModifica.setEnabled (true);
btnAttiva.setEnabled (true);
btnStorico.setEnabled (true);
)

));

TablePr.addKeyListener (new KeyListener () (

public void keyPressed (KeyEvent arg0) (
System.out.println ( &quot;keyPressed&quot;);

)

public void keyReleased (KeyEvent arg0) (
System.out.println ( &quot;keyRelased&quot;);

)

public void keyTyped (KeyEvent arg0) (
System.out.println ( &quot;keyTyped&quot;);

)

));

// private static final String [] headers = ( &quot;Name&quot;, &quot;Phone&quot;, &quot;Gone&quot;, &quot;Location&quot;, &quot;City&quot;, &quot;CPC&quot;, &quot;Province&quot;, &quot;Media Votes&quot;, &quot;Number Votes&quot;);

)

JScrollPane = new JScrollPane (TablePr);
jScrollPane.setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
jScrollPane.setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

)
JScrollPane return;
)

/**
* This method initializes HelpPanel
*
* @ Return javax.swing.JPanel
*/
getHelpPanel private JPanel () (
if (HelpPanel == null) (
GridBagConstraints gridBagConstraints1 = new GridBagConstraints ();
gridBagConstraints1.fill = GridBagConstraints.BOTH;
gridBagConstraints1.gridy = 0;
gridBagConstraints1.weightx = 1.0;
gridBagConstraints1.weighty = 1.0;
gridBagConstraints1.ipadx = 0;
gridBagConstraints1.gridwidth = 1;
gridBagConstraints1.ipady = 0;
gridBagConstraints1.gridx = 0;
HelpPanel = new JPanel ();
HelpPanel.setLayout (new GridBagLayout ());
HelpPanel.setBorder (BorderFactory.createTitledBorder (BorderFactory.createLineBorder (new Color (51, 153, 255), 3), &quot;Help&quot;, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font ( &quot;Dialog&quot;, Font.BOLD, 12), new Color (51, 102, 255)));
HelpPanel.setPreferredSize (new Dimension (100, 100));
HelpPanel.add (getJTextPane (), gridBagConstraints1);
)
HelpPanel return;
)

/**
* This method initializes jTextPane
*
* @ Return javax.swing.JTextPane
*/

private JTextPane getJTextPane ()

/**
* This method initializes ricercaPanel1
*
* @ Return javax.swing.JPanel
*//**
* This method initializes btnRicerca2
*
* @ Return javax.swing.JButton
*/

private JButton getBtnRicerca2 ()

/**
* This method initializes btnAzzera2
*
* @ Return javax.swing.JButton
*/

private JButton getBtnAzzera2 ()

/**
* This method initializes RicercaPanel
*
* @ Return javax.swing.JPanel
*/
getRicercaPanel private JPanel () (
if (RicercaPanel == null) (
GridBagConstraints gridBagConstraints5 = new GridBagConstraints ();
gridBagConstraints5.fill = GridBagConstraints.BOTH;
gridBagConstraints5.gridy = 4;
gridBagConstraints5.weightx = 1.0;
gridBagConstraints5.weighty = 1.0;
gridBagConstraints5.gridwidth = 2;
gridBagConstraints5.gridx = 0;
GridBagConstraints gridBagConstraints8 = new GridBagConstraints ();
gridBagConstraints8.gridwidth = 2;
gridBagConstraints8.insets = new Insets (5, 5, 5, 5);
GridBagConstraints gridBagConstraints7 = new GridBagConstraints ();
gridBagConstraints7.gridx = 0;
gridBagConstraints7.insets = new Insets (5, 5, 5, 5);
gridBagConstraints7.gridy = 6;
GridBagConstraints gridBagConstraints6 = new GridBagConstraints ();
gridBagConstraints6.gridx = 1;
gridBagConstraints6.gridwidth = 2;
gridBagConstraints6.insets = new Insets (5, 5, 5, 5);
gridBagConstraints6.gridy = 6;
GridBagConstraints gridBagConstraints4 = new GridBagConstraints ();
gridBagConstraints4.gridx = 0;
gridBagConstraints4.gridwidth = 2;
gridBagConstraints4.insets = new Insets (5, 5, 5, 5);
gridBagConstraints4.gridy = 3;
LabelTag = new JLabel ();
LabelTag.setText ( &quot;Select search tags:&quot;);
GridBagConstraints gridBagConstraints3 = new GridBagConstraints ();
gridBagConstraints3.fill = GridBagConstraints.VERTICAL;
gridBagConstraints3.gridx = 0;
gridBagConstraints3.gridy = 2;
gridBagConstraints3.gridwidth = 2;
gridBagConstraints3.insets = new Insets (5, 5, 5, 5);
gridBagConstraints3.weightx = 1.0;
LabelPr = new JLabel ();
LabelPr.setText ( &quot;Name Refreshments:&quot;);
RicercaPanel = new JPanel ();
RicercaPanel.setLayout (new GridBagLayout ());
RicercaPanel.setBorder (BorderFactory.createTitledBorder (BorderFactory.createLineBorder (new Color (51, 153, 255), 3), &quot;Searching for refreshments:&quot; TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font ( &quot;Dialog&quot;, Font. BOLD, 12), new Color (51, 102, 255)));
RicercaPanel.add (LabelPr, gridBagConstraints8);
RicercaPanel.add (getNomePR (), gridBagConstraints3);
RicercaPanel.add (LabelTag, gridBagConstraints4);
BeanTag [] test = new BeanTag [8];
test [0] = new BeanTag (0, &quot;castle&quot;, &quot;really a castle&quot;);
test [1] = new BeanTag (1, &quot;stronghold&quot;, &quot;really a hostel&quot;);
test [2] = new BeanTag (3, &quot;Pub&quot;, &quot;really a basket&quot;);
test [3] = new BeanTag (4, &quot;Restaurant&quot;, &quot;really a basket&quot;);
test [4] = new BeanTag (5, &quot;Pizza&quot;, &quot;really a basket&quot;);
test [5] = new BeanTag (6, &quot;Trattoria&quot;, &quot;really a basket&quot;);
test [6] = new BeanTag (7, &quot;range&quot;, &quot;really a basket&quot;);
test [7] = new BeanTag (8, &quot;Romantic&quot;, &quot;really a basket&quot;);
PannelloTag = new TagPanel (test);
PannelloTag.setPreferredSize (new Dimension (180.40));
RicercaPanel.add (getBtnAzzera2 (), gridBagConstraints6);
RicercaPanel.add (getBtnRicerca2 (), gridBagConstraints7);
RicercaPanel.add (PannelloTag, gridBagConstraints5);
)
RicercaPanel return;
)

/**
* This method initializes nomePR
*
* @ Return javax.swing.JTextField
*/

private JTextField getNomePR ()

/**
* This method initializes btnAttiva
*
* @ Return javax.swing.JButton
*/

private JButton getBtnAttiva ()

/**
* This method initializes btnStorico
*
* @ Return javax.swing.JButton
*/

private JButton getBtnStorico ()

public void actionPerformed (java.awt.event.ActionEvent e)

// Name
// Description
// Location
// City
// State
// Number of Votes
// Average Ratings
// PosGeo
// private static final String [] headers = ( &quot;Name&quot;, &quot;Phone&quot;, &quot;Gone&quot;, &quot;Location&quot;, &quot;City&quot;, &quot;CPC&quot;, &quot;Province&quot;, &quot;Media Votes&quot;, &quot;Number Votes&quot;);
//**
// @ JVE: decl-index = 0: visual-constraint = &quot;10.10&quot;</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_Punto3D</id>
      <content>package unisa.gps.etour.util;

public class Punto3D

/**
* Bean that contains the coordinates of a point on the surface of the earth &quot;and
* That it realizes the calculation of the distance from the system. The values of
* Coordinates must be represented in radians and must fall in
* Target range: 0 to greek-Pi / 4 for the latitude south of the equator
* 0 to + Pi greek / 4 for the latitude north of the equator from 0 to Pi-greek /
* 2 for the meridian of longitude west of Greenwitch greek from 0 to + Pi / 2
* For the meridian of longitude east of Greenwitch
*
* @ Author Mauro Miranda
* @ Version 0.1 2007 eTour Project - Copyright by SE @ SA Lab DMI University
* Of Salerno
*/

public class Punto3D
(
// Radius of the earth
final double EARTH_RADIUS = 6371.0;
private double latitude, longitude, altitude;

public Punto3D ()

/**
* Returns the latitude
*
* @ Return
*/

public double getLatitudine ()

/**
* Sets the latitude
*
* @ Param pLatitudine
*/

public void setLatitudine (double pLatitudine)

/**
* Returns the longitude
*
* @ Return
*/

public double getLongitudine ()

/**
* Sets the longitude
*
* @ Param pLongitudine
*/

public void setLongitudine (double pLongitudine)

/**
* Returns the altitude
*
* @ Return
*/

public double getAltitudine ()

/**
* Sets the altitude
*
* @ Param pAltitudine
*/

public void setAltitudine (double pAltitudine)

/**
* Calculate the distance between the point and another point given as argument
*
* @ Param p
* @ Return
*/

public double distance (Punto3D p)

/**
* Method which creates a 3D point from coordinates measured in degrees. The
* 3D point instead represents the coordinates in radians
*
* @ Param pLatitudine latitude in degrees
* @ Param pLongitudine Longitude in degrees *
* @ Param pAltitudine
* @ Return Punto3D with the coordinates in radians
*/

public static Punto3D gradiRadianti (double pLatitudine,
pLongitudine double, double pAltitudine)

// Radius of the earth</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_Punto3DRenderer</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.awt.Component;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.TableCellRenderer;
import unisa.gps.etour.util.Punto3D;

class creates

/**
* &lt;b&gt; Punto3DRenderer &lt;/ b&gt;
&lt;p&gt; * This class creates a custom renderer for
* Objects of type Punto3D. &lt;/ P&gt;
*
* @ See javax.swing.table.TableCellRenderer
* @ See unisa.gps.etour.util.Punto3D
* @ Version 1.0
* @ Author Mario Gallo
*
*
*/

public class Punto3DRenderer implements TableCellRenderer
(
/**
* Method that returns the custom component for the
* Display of the data contained in the cell of a table.
*
* @ Param pTable JTable - the table.
* @ Param Object pValue - the data.
* @ Param boolean pSelected -
* &lt;ul&gt;
* &lt;li&gt; &lt;i&gt; True &lt;/ i&gt; if the cell is selected.
* &lt;li&gt; &lt;i&gt; False &lt;/ i&gt; otherwise.
* &lt;/ Ul&gt;
* @ Param boolean pHasFocus -
* &lt;ul&gt;
* &lt;li&gt; &lt;i&gt; True &lt;/ i&gt; if the cell has the focus.
* &lt;li&gt; &lt;i&gt; False &lt;/ i&gt; otherwise.
* &lt;/ Ul&gt;
* @ Param int pRow - the line number.
* @ Param int pColumn - the column number.
* @ Return Component - the component that customizes render the cell.
* @ Throws IllegalArgumentException - if the value of the cell can not
* Be rendered by this renderer.
*/
public Component getTableCellRendererComponent (JTable pTable,
Object pValue, boolean pSelected, boolean pHasFocus, int prow,
int pColumn)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_ReportTableModel</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.util.Vector;
import javax.swing.table.AbstractTableModel;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.util.Punto3D;

public class extends

public class extends ReportTableModel AbstractTableModel (

/**
*
*/
private static final long serialVersionUID = 1L;
private static final String [] headers =
( &quot;Name&quot;, &quot;Description&quot;, &quot;Address&quot;, &quot;City&quot;, &quot;Province&quot;)

public int getColumnCount ()

public int GetRowCount ()

public String getColumnName (int col)

public Object getValueAt (int row, int col)

public class getColumnClass (int col)

public boolean isCellEditable (int row, int col)

public void setValueAt (Object value, int row, int col)

public void setValueAt (Object [] value, int row) throws IllegalArgumentException</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_Ricerca</id>
      <content>package unisa.gps.etour.control.GestioneRicerche;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Hashtable;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.repository.DBBeneCulturale;
import unisa.gps.etour.repository.DBPuntoDiRistoro;
import unisa.gps.etour.repository.DBTag;
import unisa.gps.etour.repository.IDBBeneCulturale;
import unisa.gps.etour.repository.IDBPuntoDiRistoro;
import unisa.gps.etour.repository.IDBTag;
import unisa.gps.etour.util.ControlloDati;
import unisa.gps.etour.util.MessaggiErrore;
import unisa.gps.etour.util.Punto3D;

public class Search extends UnicastRemoteObject implements IRicerca

public class Search extends UnicastRemoteObject implements IRicerca
(

private static final long serialVersionUID =-6009809097302884655L;

public Search () throws RemoteException

public int search (int pIdTurista, pParoleChiave String, int [] pTagsId,
pRaggioMax double, int pElementiPerPagina,
Punto3D pPosizioneUtente, byte pTipologiaSito)
throws RemoteException

public BeanBeneCulturale [] ottieniPaginaRisultatiBeneCulturale (int pPagina)
throws RemoteException

public BeanPuntoDiRistoro [] ottieniPaginaRisultatiPuntoDiRistoro (int pPagina)
throws RemoteException

public int ottieniNumeroElementiRicerca () throws RemoteException

public int ottieniNumeroPagineRicerca () throws RemoteException

/**
* Method for returning the number of findings from research
*
* @ Return number of findings from research. On error
* Returns -1
* @ Throws SQLException Exception Connecting to Database
*/

private int ottieniNumeroElementiRicercaSpecializzato () throws SQLException

/**
* Method for returning the list of results
*
* @ Param pNumeroPagina range of results to return
* @ Return Container sites emerged in the research phase as the interval
* @ Throws RemoteException Exception Remote
*/
private ArrayList &lt;?&gt; ricercaPerPagina (int pNumeroPagina)
throws RemoteException
(

// Declare the list of sites related to the page input
ArrayList &lt;?&gt; RisultatiPaginaCorrente = null;
TRY
(
if (controllaIdTurista ())
(
// Check the type of site
switch (pTipologiaSito)
(
homes BENE_CULTURALE:
// If the list has not already been obtained previously
// Search
if ((risultatiPaginaCorrente = risultatiRicercaBeniCulturali
. get (pNumeroPagina)) == null)
(
risultatiPaginaCorrente = (ArrayList &lt;?&gt;) (pIdTurista&gt; 0? BeneCulturale
. ricercaAvanzata (pIdTurista, pParoleChiave,
pTags, pNumeroPagina,
pElementiPerPagina,
pPosizioneUtente, pRaggioMax)
: BeneCulturale.ricerca (pParoleChiave,
pTags, pNumeroPagina,
pElementiPerPagina,
pPosizioneUtente, pRaggioMax));
risultatiRicercaBeniCulturali
. put (
pNumeroPagina,
(ArrayList &lt;BeanBeneCulturale&gt;) risultatiPaginaCorrente);
)
break;

homes PUNTO_DI_RISTORO:
// If the list has not already been obtained previously
// Search
if ((risultatiPaginaCorrente = risultatiRicercaPuntiDiRistoro
. get (pNumeroPagina)) == null)
(
risultatiPaginaCorrente = (ArrayList &lt;?&gt;) (pIdTurista&gt; 0? PuntoDiRistoro
. ricercaAvanzata (pIdTurista, pParoleChiave,
pTags, pNumeroPagina,
pElementiPerPagina,
pPosizioneUtente, pRaggioMax)
: PuntoDiRistoro.ricerca (pParoleChiave,
pTags, pNumeroPagina,
pElementiPerPagina,
pPosizioneUtente, pRaggioMax));
risultatiRicercaPuntiDiRistoro
. put (
pNumeroPagina,
(ArrayList &lt;BeanPuntoDiRistoro&gt;) risultatiPaginaCorrente);
)
break;
)
)
// Return the results
risultatiPaginaCorrente return;
)

catch (SQLException e)
(
throw new RemoteException (MessaggiErrore.ERRORE_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessaggiErrore.ERRORE_SCONOSCIUTO);
)

)

/**
* Method for calculating the number of pages found at
* Search
*
* @ Return many pages in the research phase
*/

private int calcolaNumeroPagineRicerca ()

/**
* Method for calculating the number of elements of nell'intevallo
* A given page
*
* @ Param interval nPagina results
* @ Return number of elements in a page
*/

private int calcolaNumeroElementiPagina (int nPagina)

/**
* Method for checking the validity of a page
*
* @ Param pPagina page to check
* @ Return true if the page is valid
*/

private boolean controllaPagina (int pPagina)

/**
* Method for checking the correctness of the identifier Tourist
*
* @ Return true if the identifier is valid, false otherwise
*/

private boolean controllaIdTurista ()

/**
* Method to reset all the variables related to a search
*
* @ Return A constant that indicates the correct zero
*/

private int azzeraParametri ()

/**
* Method for the detection and conversion of data tags in struttara List
*
* @ Param list of identifiers pTagsId Search Tags
* @ Return List Search Tags
* @ Throws SQLException
*/

private ArrayList &lt;BeanTag&gt; arrayToArrayListTag (int [] pTagsId)
throws SQLException

// Search Parameters
// Objects for the database connection
// List of tags obtained
// Search Results pages for partitioned
// Quantity of items and pages results in the research phase
// Reset the parameters of the previous search
// Start checking the correctness of the search parameters
// If the parameters are valid, I get the number of results
// Otherwise returns -1
// Check that the type of site is valid and that the page is
// In the range
// Transform the list obtained in array
// Results = ricercaBeniCulturaliPerPagina (pPagina). ToArray (
// Results);
// Check that the type of site is valid and that the page is
// In the range
// Transform the list obtained in array
// Results = ricercaPuntiDiRistoroPerPagina (pPagina). ToArray (
// Results);
// Check the type of site and gets the number of results
// Declare the list of sites related to the page input
// Check the type of site
// If the list has not already been obtained previously
// Search
// If the list has not already been obtained previously
// Search
// Return the results
// If the number of pages is greater than or equal to 0 returns the number of
// Pages
// If the number of elements is a multiple of the number of items per page
// Return their relationship
// Otherwise returns their relationship + 1
// If page number is the last return their form
// Otherwise returns the number of items per page
// If page number is in the range returns true
// Clears all the search parameters
// Initialize the list of Tags
// If the list of identifiers of the tag is empty I get the tags
// Loop for the insertion of tags found in the list
// If the identifier is greater than 0
// Check correctness on tags
// Return the list of tags</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_RicercaAvanzata</id>
      <content>public class RicercaAvanzataextends

public class RicercaAvanzataextends RicercaClasse for managing the Advanced Search

BENE_CULTURALE, PUNTO_DI_RISTORO

RicercaAvanzata (int pIdTurista)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_RicercaStandard</id>
      <content>package unisa.gps.etour.control.GestioneRicerche;

import java.sql.SQLException;
import java.util.ArrayList;

public class Search extends RicercaStandard

/**
* Class for managing Standard Search
*
* @ Author Joseph Penna
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class Search extends RicercaStandard
(

/** Constructor of the class
*
*/
public RicercaStandard ()

protected int ottieniNumeroElementiRicercaSpecializzato ()
throws SQLException

// Check the type of site and gets the number of results
// Check the type of site and search</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_SchedaBC</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt .*;
import java.awt.event .*;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing .*;
import java.util .*;
import javax.swing.table.TableColumn;
import javax.swing.text.JTextComponent;
import javax.swing.border .*;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.BeanVisitaBC;
import unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliAgenzia;
import unisa.gps.etour.control.GestioneTag.IGestioneTagComune;
import unisa.gps.etour.gui.operatoreagenzia.document.LimitedDocument;
import unisa.gps.etour.gui.operatoreagenzia.document.NumericDocument;
import unisa.gps.etour.gui.operatoreagenzia.document.OnlyCharactersDocument;
import unisa.gps.etour.gui.operatoreagenzia.tables.FeedBackTableModel;
import unisa.gps.etour.gui.operatoreagenzia.tables.MediaVotiRenderer;
import unisa.gps.etour.util.Punto3D;

public class SchedaBC extends JInternalFrame implements IScheda

/**
* Class that models the interface for viewing the card,
* Modify the data and the insertion of a new cultural object.
*
* @ Version 1.0
* @ Author Mario Gallo
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*
*/

public class SchedaBC extends JInternalFrame implements IScheda
(

private static final String [] txts = ( &quot;Name&quot;, &quot;Address&quot;, &quot;City&quot;, &quot;Location&quot;, &quot;CAP&quot;
&quot;Province&quot;, &quot;Geographical Location&quot;, &quot;Phone&quot;,
&quot;Opening Hours&quot;, &quot;Closing Time&quot;
&quot;Closing Date&quot;, &quot;Ticket price&quot;, &quot;Description&quot;)

/**
* The default constructor for inclusion of the interface model
* A new cultural object.
*
*/
public SchedaBC (Beniculturali pParent)
(
super ( &quot;New Cultural Heritage&quot;);
frameIcon = new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;nuovoBC.png&quot;));
closable = true;
resizable = false;
iconable = true;
setSize (600, 560);
setDefaultCloseOperation (WindowConstants.DO_NOTHING_ON_CLOSE);
suggestions &lt;JLabel&gt; = new Vector ();
parent = pParent;
bc = null;

// Initialize the content pane
jContentPane = new JPanel ();
jContentPane.setLayout (new BorderLayout ());
jContentPane.add (getToolbarSchedaBC (), BorderLayout.CENTER);
JTabbedPane = new JTabbedPane ();
jTabbedPane.addTab ( &quot;Data Cultural Heritage&quot;
new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;dati.png&quot;)),
getDatiBCForm (), null);
jContentPane.add (JTabbedPane, BorderLayout.CENTER);
setContentPane (jContentPane);

// Dialog closure to close the entry window.
addInternalFrameListener (new InternalFrameAdapter ()
(
/** Inclusion of the frame on the desktop desktop retrieves bread bread
* And desktop manager and initializes the remote objects for managing
* Cultural heritage.
*/

public void internalFrameOpened (InternalFrameEvent pEvent)

/** Two exceptions: RemoteException and NotBoundException. The
* Result is the same. The management is not operable and
* After the error message window closes.
*/
catch (Exception ex)
(
JLabel error = new JLabel (
&quot;&lt;html&gt; &lt;h2&gt; Unable to communicate with the server eTour. &lt;/ h2&gt;&quot;
+ &quot;&lt;h3&gt; &lt;u&gt; Card for entering a new cultural asset will be closed. &lt;/ U&gt; &lt;/ h3&gt;&quot;
+ &quot;&lt;p&gt; &lt;b&gt; Possible Causes: &lt;/ b&gt;&quot;
+ &quot;&lt;ul&gt; &lt;li&gt; No connection to the network. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; inactive. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; clogged. &lt;/ Li&gt; &lt;/ ul&gt;&quot;
+ &quot;&lt;p&gt; Please try again later. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; If the error persists, please contact technical support. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; We apologize for the inconvenience. &lt;/ Html&gt;&quot;);
Err = new ImageIcon ImageIcon (getClass (). GetResource (
Home.URL_IMAGES + &quot;error48.png&quot;));
JOptionPane.showMessageDialog (frame, error,
&quot;Error!&quot; JOptionPane.ERROR_MESSAGE, err);
frame.dispose ();
)
)

public void internalFrameClosing (InternalFrameEvent pEvent)
(
Root = new JPanel JPanel (new BorderLayout ());
JLabel message = new JLabel (
&quot;Are you sure you want to cancel the creation of a new cultural asset?&quot;);
message.setFont (new Font ( &quot;Dialog&quot;, Font.BOLD, 14));
JLabel alert = new JLabel (
&quot;Warning! Unsaved data will be lost.&quot; SwingConstants.CENTER);
avviso.setIcon (new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;warning16.png &quot;)));
root.add (message, BorderLayout.NORTH);
root.add (notice, BorderLayout.CENTER);
String [] options = ( &quot;Close&quot;, &quot;Cancel&quot;);
int choice = JOptionPane.showInternalOptionDialog (jContentPane, root,
&quot;Confirm closure&quot;,
JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, frameIcon, options, options [1]);
if (choice == JOptionPane.OK_OPTION)
(
parent.closeScheda ((SchedaBC) pEvent.getInternalFrame ());
)
)
));

// Initialize button
btnModifica.setVisible (false);
btnSalva.setVisible (true);
btnAnnulla.setVisible (true);
btnAnnulla.setText ( &quot;Clear&quot;);

)

/**
* This interface models the manufacturer regarding modification of data and
* Display of the tab of a cultural object.
*
* @ Param BeanBeneCulturale pbc - the bean contains the data of
* Selected cultural.
* @ Param boolean pModifica &lt;ul&gt; &lt;li&gt; true - the fields will be editable, and then you are
* To amend the data of a cultural object. &lt;li&gt; False - the fields will not be
* Edit, and then you are viewing the tab of a cultural object. &lt;/ Ul&gt;
*
*/
public SchedaBC (Beniculturali pParent, BeanBeneCulturale PBC, boolean pModifica)
(
super ();
frameIcon = new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;scheda.png&quot;));
closable = true;
resizable = false;
iconable = true;
setSize (600, 560);
setDefaultCloseOperation (WindowConstants.DO_NOTHING_ON_CLOSE);

// Initialize instance variables
bc = pbc;
this.parent = pParent;
suggestions &lt;JLabel&gt; = new Vector ();
initializeSchedaBC ();

if (pModifica) // Are we change the cultural property.
(
btnModifica.setSelected (true);
btnSalva.setVisible (true);
btnAnnulla.setVisible (true);
btnAnnulla.setText ( &quot;Reset&quot;);
)
else // We're viewing the tab of a cultural object.
(
mostraNascondiSuggerimenti ();
attivaDisattivaEdit ();
)

)

/**
* This method returns the id of the cultural property for which you are viewing the
* Contact or changing data.
*
* @ Return int - the id of the cultural property.
*
*/

public int getId ()

/**
*
* This method initializes the interface for display board
* A cultural object.
*
* @ Return void
*/

private void initializeSchedaBC ()

/** Inclusion of the frame on the desktop desktop retrieves bread bread
* And desktop manager and initializes the remote objects for managing
* Cultural heritage.
*/

public void internalFrameOpened (InternalFrameEvent pEvent)

/** Two exceptions: RemoteException and NotBoundException. The
* Result is the same. The management is not operable and
* After the error message window closes.
*/
catch (Exception ex)
(
JLabel error = new JLabel (
&quot;&lt;html&gt; &lt;h2&gt; Unable to communicate with the server eTour. &lt;/ h2&gt;&quot;
+ &quot;&lt;h3&gt; &lt;u&gt; The board of the cultural inquiry will be closed. &lt;/ U&gt; &lt;/ h3&gt;&quot;
+ &quot;&lt;p&gt; &lt;b&gt; Possible Causes: &lt;/ b&gt;&quot;
+ &quot;&lt;ul&gt; &lt;li&gt; No connection to the network. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; inactive. &lt;/ Li&gt;&quot;
+ &quot;Server &lt;li&gt; clogged. &lt;/ Li&gt; &lt;/ ul&gt;&quot;
+ &quot;&lt;p&gt; Please try again later. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; If the error persists, please contact technical support. &lt;/ P&gt;&quot;
+ &quot;&lt;p&gt; We apologize for the inconvenience. &lt;/ Html&gt;&quot;);
Err = new ImageIcon ImageIcon (getClass (). GetResource (
Home.URL_IMAGES + &quot;error48.png&quot;));
JOptionPane.showMessageDialog (frame, error,
&quot;Error!&quot; JOptionPane.ERROR_MESSAGE, err);
frame.dispose ();
)
)

public void internalFrameClosing (InternalFrameEvent pEvent)
(
// If you are an amendment asks for confirmation.
if (btnModifica.isSelected ())
(
Root = new JPanel JPanel (new BorderLayout ());
JLabel message = new JLabel (
&quot;Are you sure you want to close the tab of this cultural asset?&quot;);
message.setFont (new Font ( &quot;Dialog&quot;, Font.BOLD, 14));
JLabel alert = new JLabel (
&quot;Warning! Unsaved data will be lost.&quot; SwingConstants.CENTER);
avviso.setIcon (new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;warning16.png &quot;)));
root.add (message, BorderLayout.NORTH);
root.add (notice, BorderLayout.CENTER);
String [] options = ( &quot;Close&quot;, &quot;Cancel&quot;);
int choice = JOptionPane.showInternalOptionDialog (jContentPane, root,
&quot;Confirm closing tab Cultural Heritage&quot; bc.getNome + (),
JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, frameIcon, options, options [1]);
if (choice == JOptionPane.OK_OPTION)
(
parent.closeScheda ((SchedaBC) pEvent.getInternalFrame ());
)
)
// Otherwise directly closes the window.
else
(
parent.closeScheda ((SchedaBC) pEvent.getInternalFrame ());
)
)
));

// Initialize the content pane.
jContentPane = new JPanel ();
jContentPane.setLayout (new BorderLayout ());
jContentPane.add (getToolbarSchedaBC (), BorderLayout.CENTER);
JTabbedPane = new JTabbedPane ();
jTabbedPane.addTab ( &quot;Data Cultural Heritage&quot;
new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;dati.png&quot;)),
getDatiBCForm (), null);
New = new JScrollPane JScrollPane (getStatistiche ());
nuovo.setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
jTabbedPane.addTab ( &quot;Statistics&quot;
new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;stat24.png&quot;)), new, null);
jTabbedPane.addTab ( &quot;Feedback received&quot;
new ImageIcon (getClass (). getResource (
Home.URL_IMAGES + &quot;feedback.png&quot;)),
getFeedback (), null);
jContentPane.add (JTabbedPane, BorderLayout.CENTER);
setContentPane (jContentPane);
jTabbedPane.addChangeListener (new ChangeListener ()
(

public void stateChanged (ChangeEvent pChange)
(
// Data cultural
if (jTabbedPane.getSelectedIndex () == 0)
(
toolbarSchedaBC.setVisible (true);
btnModifica.setVisible (true);
if (btnModifica.isSelected ())
(
btnSalva.setVisible (true);
btnAnnulla.setVisible (true);
)
btnModificaCommento.setVisible (false);
)
// Statistics
else if (jTabbedPane.getSelectedIndex () == 1)
(
toolbarSchedaBC.setVisible (false);
)
// Feedback received
else
(
if (btnModifica.isSelected ())
(
btnSalva.setVisible (false);
btnAnnulla.setVisible (false);
)
toolbarSchedaBC.setVisible (true);
btnModificaCommento.setVisible (true);
btnModifica.setVisible (false);

)

)

));

// Load the data of the cultural and statistics.
caricaDatiForm ();
)

/**
*
* This method loads the data supplied to the constructor of the cultural
* In the form.
*
*/

private void caricaDatiForm ()

/**
*
* This method loads the statistics provided cultural
* Input to the constructor of the class.
*
*/

private void caricaStatistiche ()

/**
*
* This method shows or hides the label next to the suggestions
* Of the form.
*
*/

private void mostraNascondiSuggerimenti ()

/**
*
* This method makes the form editable or not.
*
*/

private void attivaDisattivaEdit ()

/**
* This method initializes the toolbar tab of a cultural object.
*
* @ Return javax.swing.JToolBar - the toolbar.
*/
Private JToolBar getToolbarSchedaBC ()
(
if (null == toolbarSchedaBC)
(
toolbarSchedaBC JToolBar = new ();
toolbarSchedaBC.setFloatable (false);
toolbarSchedaBC.add (getBtnModifica ());
toolbarSchedaBC.addSeparator ();
toolbarSchedaBC.add (getBtnSalva ());
toolbarSchedaBC.addSeparator ();
toolbarSchedaBC.add (getBtnAnnulla ());
toolbarSchedaBC.addSeparator ();
if (bc! = null)
(
toolbarSchedaBC.add (getBtnModificaCommento ());
toolbarSchedaBC.addSeparator ();
)
)
toolbarSchedaBC return;
)

/**
* This method initializes the button to modify data of good
* Cultural.
*
* @ Return javax.swing.JToggleButton - the button for the change.
*
*/
Private JToggleButton getBtnModifica ()
(
if (null == btnModifica)
(
btnModifica JToggleButton = new ();
btnModifica.setText ( &quot;Change Data&quot;);
btnModifica
. setIcon (new ImageIcon (
getClass ()
. getResource (
Home.URL_IMAGES + &quot;ModificaBC32.png &quot;)));
btnModifica.setCursor (Cursor.getPredefinedCursor (Cursor.HAND_CURSOR));
btnModifica.addActionListener (new ActionListener ()
(

public void actionPerformed (ActionEvent arg0)
(
mostraNascondiSuggerimenti ();
attivaDisattivaEdit ();
btnSalva.setVisible ((btnModifica.isSelected ()? true
: False));
btnAnnulla.setVisible ((btnModifica.isSelected ()? true
: False));

)

));
)
btnModifica return;
)

/**
* This method initializes btnSalva
*
* @ Return javax.swing.JButton
*/

private JButton getBtnSalva ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the button to clear the form (well again
* Culture) or reload the data of the cultural (change data).
*
* @ Return javax.swing.JButton - the button above.
*
*/

private JButton getBtnAnnulla ()

public void actionPerformed (ActionEvent arg0)

/**
* This method initializes the button to edit a comment.
*
* @ Return javax.swing.JButton - the button to edit a comment.
*/

private JButton getBtnModificaCommento ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the format for the data of a cultural object.
*
* @ Return javax.swing.JPanel - the form for the data.
*
*/

private JPanel getDatiBCForm ()

/**
* This method initializes the statistics of a container panel
* Cultural.
*
* @ Return javax.swing.JPanel - the panel statistics.
*
*/

private JPanel getStatistiche ()

/**
* This method initializes the panel to display feedback
* Received from a cultural object.
*
* @ Return javax.swing.JPanel - the panel of feedback.
*
*/

private JPanel getFeedback ()

public void ValueChanged (ListSelectionEvent event)

/**
* This method initializes the panel of statistics for the current month.
*
* @ Return javax.swing.JPanel - the panel of statistics for the current month.
*
*/

private JPanel getStatMeseCorrente ()

/**
* This method initializes the panel on the total statistics
* The cultural property.
*
* @ Return javax.swing.JPanel - the panel statistics totals.
*
*/

private JPanel getStatTotali ()

private void caricaTags ()

// Initialize the content pane
// Dialog closure to close the entry window.
// Setting up of remote objects for the management of cultural heritage.
// Load data.
// Initialize button
// Initialize instance variables
// Are we change the cultural property.
// We're viewing the tab of a cultural object.
// Dialog closed frame
// Setting up of remote objects for the management of cultural heritage.
// Load data.
// If you are an amendment asks for confirmation.
// Otherwise directly closes the window.
// Initialize the content pane.
// Data cultural
// Statistics
// Feedback received
// Load the data of the cultural and statistics.
// END TEST
// Construction of the dialog for confirmation of the change
// The dialog screen appears
// If you chose to confirm the change
// Creation Tips
// Name of Cultural Heritage
// Address
// City
// Location
// CAP
// Geographical Location
// State
// Description
// Phone
// Opening
// Closed
// Cost
// PannelloTag
// Rating
// Comment
// Release Date
// Username
// Date (int year, int month, int date, int hrs, int min)
// If an error panel tag remains blank.</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_SchedaPR</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt.BorderLayout;
import javax.swing.BorderFactory;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JInternalFrame;
import javax.swing.ImageIcon;
import javax.swing.WindowConstants;
import java.awt.Dimension;
import javax.swing.JTabbedPane;
import java.awt.GridBagLayout;
import javax.swing.JLabel;
import java.awt.GridBagConstraints;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import java.awt.Color;
import java.awt.Component;
import java.awt.Insets;
import java.awt.Rectangle;
import javax.swing.JToolBar;
import javax.swing.JToggleButton;
import javax.swing.JButton;
import java.awt.font;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.StringTokenizer;
import javax.swing.JComboBox.KeySelectionManager;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import unisa.gps.etour.bean .*;
import unisa.gps.etour.bean.util.Punto3D;

public class SchedaPR

/** SchedaPR.java
*
* 1.0
*
* 28/05/2007
*
* (C) 2007 eTour Project - Copyright by SE @ SA Lab - DMI - University of Salerno
*/

package unisa.gps.etour.gui.operatoreagenzia;

import java.awt.BorderLayout;

import javax.swing.BorderFactory;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JInternalFrame;
import javax.swing.ImageIcon;
import javax.swing.WindowConstants;
import java.awt.Dimension;
import javax.swing.JTabbedPane;
import java.awt.GridBagLayout;
import javax.swing.JLabel;
import java.awt.GridBagConstraints;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import java.awt.Color;
import java.awt.Component;
import java.awt.Insets;
import java.awt.Rectangle;
import javax.swing.JToolBar;
import javax.swing.JToggleButton;
import javax.swing.JButton;
import java.awt.font;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.StringTokenizer;

import javax.swing.JComboBox.KeySelectionManager;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import unisa.gps.etour.bean .*;
import unisa.gps.etour.bean.util.Punto3D;
/**
* Class that models the interface for viewing the card,
* Modify the data and the insertion of a new resting spot.
*
* @ Author Lello
*
*/
extends JInternalFrame (public class SchedaPR

private JPanel jContentPane = null;
Private JToolBar toolbarSchedaBC = null;
Private JToggleButton btnModifica = null;
private JButton btnSalva = null;
private JButton btnAnnulla = null;
btnModificaCommento JButton private = null;
private JTabbedPane JTabbedPane = null;
private JPanel statistics = null;
private JPanel feedback = null;
private JLabel txtNome = null;
private JLabel txtIndirizzo = null;
private JLabel txtCAP = null;
private JLabel txtCitta = null;
private JLabel txtLocalit- = null;
private JLabel txtProvincia = null;
private JLabel txtPos = null;
private JLabel txtTel = null;
private JLabel txtOraAp = null;
private JLabel txtOraCh = null;

private JLabel JLabel = null;
private JTextField indirizzoPR = null;
private JComboBox indirizzoPR1 = null;
private JTextField cittaPR = null;
private JComboBox localitaPR = null;
private JTextField capPR = null;
private JScrollPane JScrollPane = null;
private JTextArea descrizionePR = null;
private JTextField telefonoPR = null;
private JComboBox orarioAPOrePR = null;
private JLabel jLabel1 = null;
private JComboBox orarioApMinPR = null;
Private TagPanel pannelloTag;
private JTextField costoBC = null;

private JLabel jLabel3 = null;
private JComboBox orarioCHMinPR = null;
private JComboBox provPR = null;
private JPanel datiPR = null;
private JTextField nomePR = null;
private JPanel JPanel = null;
private JScrollPane jScrollPane2 = null;
private JTable feedbackTable = null;
private JLabel txtNomeBene = null;
private JLabel mediaVotoPR = null;
private JPanel statisticheMeseCorrente = null;
private JPanel statisticheTotali = null;
private JLabel jLabel4 = null;
private JLabel jLabel41 = null;
private ActionListener campoCompilato;
Private FocusListener validating;
Private JToolBar ToolbarSchedaPR = null;
private JTextField posGeoX = null;
private JTextField posGeoY = null;
private JTextField posGeoZ = null;
private JLabel jLabel2 = null;
private JComboBox orarioCHOrePR = null;
/**
* The default constructor for inclusion of the interface model
* A new refreshment.
*
*/
public SchedaPR ()
(
super ( &quot;New Refreshment&quot;);
campoCompilato = new ActionListener () (

public void actionPerformed (ActionEvent actionEvent)
(
((JComponent) actionEvent.getSource ()). TransferFocus ();
)

);
validating FocusListener = new () (

private final ERROR_BACKGROUND Color = new Color (255, 215, 215);
private final WARNING_BACKGROUND Color = new Color (255, 235, 205);
private String text;

public void focusGained (FocusEvent fe) (
if (fe.getSource () instanceof JTextField) (
JTextField textbox = (JTextField) fe.getSource ();
textbox.getText text = ();
)

)

public void focusLost (FocusEvent fe) (
if (fe.getSource () instanceof JTextField) (
JTextField textbox = (JTextField) fe.getSource ();
if (! text.equals (textbox.getText ())) (
textbox.getText text = ();
if (text.equals (&quot;&quot;)) (
textbox.setBackground (ERROR_BACKGROUND);
Rectangle bounds = textbox.getBounds ();
JLabel new = new JLabel ();
nuova.setIcon (new ImageIcon (getClass (). getResource ( &quot;/ unisa / gps / eTour / gui / images / error.png &quot;)));
nuova.setBounds (bounds.x-24, bounds.y, 24.24);
nuova.setToolTipText ( &quot;Field&quot; + textbox.getName () + &quot;can not be empty!&quot;);
datiPR.add (new, null);
datiPR.repaint ();
)
)
)

)

);
initialize ();
)
/**
* This interface models the manufacturer regarding modification of data and
* Display board a refreshment.
* @ Param unisa.gps.etour.bean.BeanPuntoDiRistoro PR - the bean contains the data of
* PuntoDiRistoro selected.
* @ Param boolean change - indicates whether the fields should be editable, so if
* You are viewing a card or change the cultural property.
*
*/
public SchedaPR (BeanPuntoDiRistoro pr, boolean edit)
(
this ();

nomePR.setText (pr.getNome ());
setTitle (pr.getNome ());
capPR.setText (pr.getCap ());
cittaPR.setText (pr.getCitta ());

descrizionePR.setText (pr.getDescrizione ());
StringTokenizer tokenizer = new StringTokenizer (pr.getVia ());
/** IndirizzoPR1.addItem ( &quot;Via&quot;);
indirizzoPR1.addItem (P.zza &quot;);
indirizzoPR1.addItem ( &quot;V.le&quot;);
indirizzoPR1.addItem (V.co &quot;);
indirizzoPR1.addItem ( &quot;Largo&quot;);
indirizzoPR1.addItem ( &quot;Course&quot;);
*/
String [] path = ( &quot;Street&quot;, &quot;P.zza&quot;, &quot;V.le&quot;, &quot;V.co&quot;, &quot;Largo&quot;, &quot;Course&quot;);
String string = tokenizer.nextToken ();
int i;
for (i = 0; i &lt;via.length i + +)
if (stringa.equalsIgnoreCase (via [i]))
break;
this.indirizzoPR1.setSelectedIndex (i);
while (tokenizer.hasMoreTokens ())
this.indirizzoPR.setText (indirizzoPR.getText () + &quot;&quot; + tokenizer.nextToken ());
this.provPR.setSelectedItem (pr.getProvincia ());
Punto3D pos = pr.getPosizione ();
this.posGeoX.setText ( &quot;&quot; + pos.getX ());
this.posGeoY.setText ( &quot;&quot; + pos.getY ());
this.posGeoZ.setText ( &quot;&quot; + pos.getZ ());
this.telefonoPR.setText (pr.getTelefono ());
int minutes = pr.getOrarioApertura (). getMinutes ();
if (minutes == 0)
this.orarioApMinPR.setSelectedIndex (0);
else
this.orarioApMinPR.setSelectedItem (minutes);
int hours = pr.getOrarioApertura (). getHours ();
if (hours &lt;10)
this.orarioAPOrePR.setSelectedItem ( &quot;0&quot; + hours);
else
this.orarioAPOrePR.setSelectedItem (hours);
this.orarioCHMinPR.setSelectedItem (pr.getOrarioChiusura (). getMinutes ());
this.orarioAPOrePR.setSelectedItem (pr.getOrarioApertura (). getHours ());
this.orarioCHOrePR.setSelectedItem (pr.getOrarioChiusura (). getHours ());
if (change) (
btnModifica.setSelected (true);
)
else (
makeEditabled ();
)

)
/**
* Method called by the constructor
*
* @ Return void
*/

private void initialize ()

private void makeEditabled ()

/**
* Method which initializes a jContentPane
*
* @ Return javax.swing.JPanel
*/
getJContentPane private JPanel () (
if (jContentPane == null) (
jContentPane = new JPanel ();
jContentPane.setLayout (new BorderLayout ());

jContentPane.add (getJTabbedPane (), BorderLayout.CENTER);
jContentPane.add (getToolbarSchedaPR (), BorderLayout.CENTER);
)
jContentPane return;
)

/**
* This method initializes the button (ToggleButton) the alteration
* Data for puntoDiRistoro
*
* @ Return javax.swing.JToggleButton
*/
Private JToggleButton getBtnModifica () (
if (btnModifica == null) (
btnModifica JToggleButton = new ();
btnModifica.setText ( &quot;Change Data&quot;);
btnModifica.setIcon (new ImageIcon (getClass (). getResource ( &quot;/ unisa / gps / eTour / gui / operatoreagenzia / images / modifica.png &quot;)));
btnModifica.addActionListener (new ActionListener () (

public void actionPerformed (ActionEvent arg0) (
makeEditabled ();
btnSalva.setVisible ((btnModifica.isSelected ()? true: false));
btnAnnulla.setVisible ((btnModifica.isSelected ()? true: false));

)

));
)
btnModifica return;
)

/**
* Method to initialize the Save button (btnSalva)
*
* @ Return javax.swing.JButton
*/

private JButton getBtnSalva ()

/**
* Method to initialize the Cancel button (btnAnnulla)
*
* @ Return javax.swing.JButton
*/

private JButton getBtnAnnulla ()

/**
* Method to initialize the button for
* Changing a comment (btnModificaCommento)
*
* @ Return javax.swing.JButton
*/

private JButton getBtnModificaCommento ()

/**
* Create and initialize a JTabbedPane
*
* @ Return javax.swing.JTabbedPane
*/

private JTabbedPane getJTabbedPane ()

/**
* Method to initialize a panel (datiPR)
*
* @ Return javax.swing.JPanel
*/
getDatiPR private JPanel () (
if (datiPR == null) (
GridBagConstraints gridBagConstraints27 = new GridBagConstraints ();
gridBagConstraints27.fill = GridBagConstraints.VERTICAL;
gridBagConstraints27.gridy = 9;
gridBagConstraints27.weightx = 1.0;
gridBagConstraints27.anchor = GridBagConstraints.WEST;
gridBagConstraints27.insets = new Insets (5, 5, 36, 0);
gridBagConstraints27.ipadx = 18;
gridBagConstraints27.gridx = 1;
GridBagConstraints gridBagConstraints34 = new GridBagConstraints ();
gridBagConstraints34.gridx = 7;
gridBagConstraints34.insets = new Insets (0, 0, 0, 0);
gridBagConstraints34.gridy = 6;
jLabel2 = new JLabel ();
jLabel2.setText ( &quot;z&quot;);
GridBagConstraints gridBagConstraints33 = new GridBagConstraints ();
gridBagConstraints33.fill = GridBagConstraints.VERTICAL;
gridBagConstraints33.gridy = 6;
gridBagConstraints33.weightx = 1.0;
gridBagConstraints33.ipadx = 50;
gridBagConstraints33.insets = new Insets (5, 5, 5, 5);
gridBagConstraints33.anchor = GridBagConstraints.WEST;
gridBagConstraints33.gridx = 6;
GridBagConstraints gridBagConstraints38 = new GridBagConstraints ();
gridBagConstraints38.fill = GridBagConstraints.VERTICAL;
gridBagConstraints38.gridy = 6;
gridBagConstraints38.weightx = 1.0;
gridBagConstraints38.ipadx = 50;
gridBagConstraints38.insets = new Insets (5, 5, 5, 5);
gridBagConstraints38.anchor = GridBagConstraints.WEST;
gridBagConstraints38.gridx = 4;
GridBagConstraints gridBagConstraints22 = new GridBagConstraints ();
gridBagConstraints22.fill = GridBagConstraints.VERTICAL;
gridBagConstraints22.gridy = 6;
gridBagConstraints22.weightx = 0.0;
gridBagConstraints22.ipadx = 50;
gridBagConstraints22.anchor = GridBagConstraints.WEST;
gridBagConstraints22.insets = new Insets (5, 5, 5, 5);
gridBagConstraints22.gridx = 1;
GridBagConstraints gridBagConstraints36 = new GridBagConstraints ();
gridBagConstraints36.insets = new Insets (0, 5, 0, 5);
gridBagConstraints36.gridy = 6;
gridBagConstraints36.ipadx = 0;
gridBagConstraints36.ipady = 0;
gridBagConstraints36.gridwidth = 1;
gridBagConstraints36.gridx = 5;
GridBagConstraints gridBagConstraints35 = new GridBagConstraints ();
gridBagConstraints35.insets = new Insets (0, 0, 0, 0);
gridBagConstraints35.gridy = 6;
gridBagConstraints35.ipadx = 0;
gridBagConstraints35.ipady = 0;
gridBagConstraints35.gridwidth = 1;
gridBagConstraints35.anchor = GridBagConstraints.WEST;
gridBagConstraints35.gridx = 3;
GridBagConstraints gridBagConstraints32 = new GridBagConstraints ();
gridBagConstraints32.insets = new Insets (15, 20, 5, 0);
gridBagConstraints32.gridx = 16;
gridBagConstraints32.gridy = 4;
gridBagConstraints32.ipadx = 172;
gridBagConstraints32.ipady = 125;
gridBagConstraints32.gridwidth = 0;
gridBagConstraints32.gridheight = 6;
GridBagConstraints gridBagConstraints31 = new GridBagConstraints ();
gridBagConstraints31.fill = GridBagConstraints.VERTICAL;
gridBagConstraints31.gridwidth = 9;
gridBagConstraints31.gridx = 1;
gridBagConstraints31.gridy = 0;
gridBagConstraints31.weightx = 0.0;
gridBagConstraints31.ipadx = 240;
gridBagConstraints31.anchor = GridBagConstraints.WEST;
gridBagConstraints31.insets = new Insets (20, 5, 5, 0);
GridBagConstraints gridBagConstraints30 = new GridBagConstraints ();
gridBagConstraints30.fill = GridBagConstraints.BOTH;
gridBagConstraints30.gridwidth = 17;
gridBagConstraints30.gridx = 1;
gridBagConstraints30.gridy = 10;
gridBagConstraints30.ipadx = 265;
gridBagConstraints30.ipady = 70;
gridBagConstraints30.weightx = 1.0;
gridBagConstraints30.weighty = 1.0;
gridBagConstraints30.gridheight = 4;
gridBagConstraints30.anchor = GridBagConstraints.WEST;
gridBagConstraints30.insets = new Insets (5, 5, 2, 5);
GridBagConstraints gridBagConstraints29 = new GridBagConstraints ();
gridBagConstraints29.fill = GridBagConstraints.VERTICAL;
gridBagConstraints29.gridwidth = 3;
gridBagConstraints29.gridx = 4;
gridBagConstraints29.gridy = 9;
gridBagConstraints29.weightx = 1.0;
gridBagConstraints29.ipadx = 18;
gridBagConstraints29.anchor = GridBagConstraints.WEST;
gridBagConstraints29.insets = new Insets (5, 5, 36, 2);
GridBagConstraints gridBagConstraints28 = new GridBagConstraints ();
gridBagConstraints28.insets = new Insets (3, 5, 34, 4);
gridBagConstraints28.gridy = 9;
gridBagConstraints28.gridx = 3;
GridBagConstraints gridBagConstraints26 = new GridBagConstraints ();
gridBagConstraints26.fill = GridBagConstraints.VERTICAL;
gridBagConstraints26.gridwidth = 3;
gridBagConstraints26.gridx = 4;
gridBagConstraints26.gridy = 8;
gridBagConstraints26.weightx = 1.0;
gridBagConstraints26.anchor = GridBagConstraints.WEST;
gridBagConstraints26.ipadx = 18;
gridBagConstraints26.insets = new Insets (6, 5, 4, 2);
GridBagConstraints gridBagConstraints25 = new GridBagConstraints ();
gridBagConstraints25.insets = new Insets (4, 5, 2, 4);
gridBagConstraints25.gridy = 8;
gridBagConstraints25.anchor = GridBagConstraints.WEST;
gridBagConstraints25.gridx = 3;
GridBagConstraints gridBagConstraints24 = new GridBagConstraints ();
gridBagConstraints24.fill = GridBagConstraints.VERTICAL;
gridBagConstraints24.gridx = 1;
gridBagConstraints24.gridy = 8;
gridBagConstraints24.weightx = 1.0;
gridBagConstraints24.ipadx = 18;
gridBagConstraints24.gridwidth = 3;
gridBagConstraints24.anchor = GridBagConstraints.WEST;
gridBagConstraints24.insets = new Insets (6, 5, 4, 1);
GridBagConstraints gridBagConstraints23 = new GridBagConstraints ();
gridBagConstraints23.fill = GridBagConstraints.VERTICAL;
gridBagConstraints23.gridwidth = 9;
gridBagConstraints23.gridx = 1;
gridBagConstraints23.gridy = 7;
gridBagConstraints23.weightx = 1.0;
gridBagConstraints23.ipadx = 120;
gridBagConstraints23.anchor = GridBagConstraints.WEST;
gridBagConstraints23.insets = new Insets (4, 5, 4, 17);
GridBagConstraints gridBagConstraints21 = new GridBagConstraints ();
gridBagConstraints21.fill = GridBagConstraints.VERTICAL;
gridBagConstraints21.gridwidth = 7;
gridBagConstraints21.gridx = 1;
gridBagConstraints21.gridy = 5;
gridBagConstraints21.ipadx = 70;
gridBagConstraints21.ipady = 0;
gridBagConstraints21.weightx = 1.0;
gridBagConstraints21.anchor = GridBagConstraints.WEST;
gridBagConstraints21.insets = new Insets (5, 5, 5, 6);
GridBagConstraints gridBagConstraints20 = new GridBagConstraints ();
gridBagConstraints20.fill = GridBagConstraints.VERTICAL;
gridBagConstraints20.gridwidth = 7;
gridBagConstraints20.gridx = 1;
gridBagConstraints20.gridy = 4;
gridBagConstraints20.weightx = 1.0;
gridBagConstraints20.ipadx = 60;
gridBagConstraints20.anchor = GridBagConstraints.WEST;
gridBagConstraints20.insets = new Insets (0, 5, 0, 0);
GridBagConstraints gridBagConstraints19 = new GridBagConstraints ();
gridBagConstraints19.fill = GridBagConstraints.VERTICAL;
gridBagConstraints19.gridwidth = 4;
gridBagConstraints19.gridx = 1;
gridBagConstraints19.gridy = 3;
gridBagConstraints19.weightx = 1.0;
gridBagConstraints19.ipadx = 20;
gridBagConstraints19.anchor = GridBagConstraints.WEST;
gridBagConstraints19.insets = new Insets (6, 5, 5, 18);
GridBagConstraints gridBagConstraints18 = new GridBagConstraints ();
gridBagConstraints18.fill = GridBagConstraints.VERTICAL;
gridBagConstraints18.gridwidth = 6;
gridBagConstraints18.gridx = 1;
gridBagConstraints18.gridy = 2;
gridBagConstraints18.weightx = 1.0;
gridBagConstraints18.ipadx = 100;
gridBagConstraints18.anchor = GridBagConstraints.WEST;
gridBagConstraints18.insets = new Insets (0, 5, 0, 0);
GridBagConstraints gridBagConstraints17 = new GridBagConstraints ();
gridBagConstraints17.fill = GridBagConstraints.VERTICAL;
gridBagConstraints17.gridwidth = 9;
gridBagConstraints17.gridx = 2;
gridBagConstraints17.gridy = 1;
gridBagConstraints17.weightx = 1.0;
gridBagConstraints17.ipadx = 200;
gridBagConstraints17.anchor = GridBagConstraints.WEST;
gridBagConstraints17.insets = new Insets (5, 5, 5, 0);
GridBagConstraints gridBagConstraints16 = new GridBagConstraints ();
gridBagConstraints16.fill = GridBagConstraints.VERTICAL;
gridBagConstraints16.gridwidth = 3;
gridBagConstraints16.gridx = 1;
gridBagConstraints16.gridy = 1;
gridBagConstraints16.weightx = 1.0;
gridBagConstraints16.anchor = GridBagConstraints.WEST;
gridBagConstraints16.ipadx = 0;
gridBagConstraints16.insets = new Insets (5, 5, 5, 0);
GridBagConstraints gridBagConstraints15 = new GridBagConstraints ();
gridBagConstraints15.insets = new Insets (5, 15, 5, 0);
gridBagConstraints15.gridy = 10;
gridBagConstraints15.gridwidth = 1;
gridBagConstraints15.gridheight = 0;
gridBagConstraints15.gridx = 0;
GridBagConstraints gridBagConstraints14 = new GridBagConstraints ();
gridBagConstraints14.insets = new Insets (5, 15, 36, 0);
gridBagConstraints14.gridy = 9;
gridBagConstraints14.gridx = 0;
GridBagConstraints gridBagConstraints13 = new GridBagConstraints ();
gridBagConstraints13.insets = new Insets (5, 15, 5, 0);
gridBagConstraints13.gridy = 8;
gridBagConstraints13.gridx = 0;
GridBagConstraints gridBagConstraints12 = new GridBagConstraints ();
gridBagConstraints12.insets = new Insets (5, 15, 5, 0);
gridBagConstraints12.gridy = 7;
gridBagConstraints12.gridx = 0;
GridBagConstraints gridBagConstraints11 = new GridBagConstraints ();
gridBagConstraints11.insets = new Insets (5, 15, 5, 0);
gridBagConstraints11.gridy = 6;
gridBagConstraints11.gridx = 0;
GridBagConstraints gridBagConstraints10 = new GridBagConstraints ();
gridBagConstraints10.insets = new Insets (5, 15, 5, 0);
gridBagConstraints10.gridy = 5;
gridBagConstraints10.gridx = 0;
GridBagConstraints gridBagConstraints9 = new GridBagConstraints ();
gridBagConstraints9.insets = new Insets (5, 15, 5, 0);
gridBagConstraints9.gridy = 4;
gridBagConstraints9.gridx = 0;
GridBagConstraints gridBagConstraints8 = new GridBagConstraints ();
gridBagConstraints8.insets = new Insets (5, 15, 5, 0);
gridBagConstraints8.gridy = 3;
gridBagConstraints8.gridx = 0;
GridBagConstraints gridBagConstraints7 = new GridBagConstraints ();
gridBagConstraints7.insets = new Insets (5, 15, 5, 0);
gridBagConstraints7.gridy = 2;
gridBagConstraints7.gridx = 0;
GridBagConstraints gridBagConstraints6 = new GridBagConstraints ();
gridBagConstraints6.insets = new Insets (5, 15, 5, 0);
gridBagConstraints6.gridy = 1;
gridBagConstraints6.gridx = 0;
GridBagConstraints gridBagConstraints5 = new GridBagConstraints ();
gridBagConstraints5.insets = new Insets (20, 15, 5, 0);
gridBagConstraints5.gridy = 0;
gridBagConstraints5.gridwidth = 1;
gridBagConstraints5.gridx = 0;
jLabel41 = new JLabel ();
jLabel41.setFont (new Font ( &quot;Dialog&quot;, Font.BOLD, 14));
jLabel41.setText ( &quot;y&quot;);
jLabel4 = new JLabel ();
jLabel4.setFont (new Font ( &quot;Dialog&quot;, Font.BOLD, 14));
jLabel4.setText ( &quot;x&quot;);
jLabel3 = new JLabel ();
jLabel3.setFont (new Font ( &quot;Dialog&quot;, Font.BOLD, 18));
jLabel3.setText (&quot;:&quot;);

jLabel1 = new JLabel ();
jLabel1.setFont (new Font ( &quot;Dialog&quot;, Font.BOLD, 18));
jLabel1.setText (&quot;:&quot;);
JButton = new JLabel ();
jLabel.setText ( &quot;Description&quot;);
txtOraCh = new JLabel ();
txtOraCh.setText ( &quot;Closing Time&quot;);
txtOraAp = new JLabel ();
txtOraAp.setText ( &quot;Opening Hours&quot;);
txtTel = new JLabel ();
txtTel.setText ( &quot;Phone&quot;);
txtPos = new JLabel ();
txtPos.setText ( &quot;Geographic Position&quot;);
txtProvincia = new JLabel ();
txtProvincia.setText ( &quot;Province&quot;);
txtLocalit- = new JLabel ();
txtLocalit-.setText ( &quot;Location&quot;);
txtCitta = new JLabel ();
txtCitta.setText ( &quot;City&quot;);
txtCAP = new JLabel ();
txtCAP.setText ( &quot;CAP&quot;);
txtIndirizzo = new JLabel ();
txtIndirizzo.setText ( &quot;Address&quot;);
txtNome = new JLabel ();
txtNome.setText ( &quot;Name Refreshment&quot;);
datiPR = new JPanel ();
datiPR.setLayout (new GridBagLayout ());
datiPR.setBorder (new SoftBevelBorder (SoftBevelBorder.LOWERED));
datiPR.add (txtNome, gridBagConstraints5);
datiPR.add (txtIndirizzo, gridBagConstraints6);
datiPR.add (txtCitta, gridBagConstraints7);
datiPR.add (txtLocalit-, gridBagConstraints8);
datiPR.add (txtCAP, gridBagConstraints9);
datiPR.add (txtProvincia, gridBagConstraints10);
datiPR.add (txtPos, gridBagConstraints11);
datiPR.add (txtTel, gridBagConstraints12);
datiPR.add (txtOraAp, gridBagConstraints13);
datiPR.add (txtOraCh, gridBagConstraints14);
datiPR.add (JLabel, gridBagConstraints15);
datiPR.add (getIndirizzoPR1 (), gridBagConstraints16);
datiPR.add (getIndirizzoPR (), gridBagConstraints17);
datiPR.add (getCittaPR (), gridBagConstraints18);
datiPR.add (getLocalitaPR (), gridBagConstraints19);
datiPR.add (getCapPR (), gridBagConstraints20);
datiPR.add (getProvPR (), gridBagConstraints21);
datiPR.add (getTelefonoPR (), gridBagConstraints23);
datiPR.add (getOrarioAPOrePR (), gridBagConstraints24);
datiPR.add (jLabel1, gridBagConstraints25);
datiPR.add (getOrarioApMinPR (), gridBagConstraints26);
datiPR.add (jLabel3, gridBagConstraints28);
datiPR.add (getOrarioCHMinPR (), gridBagConstraints29);
datiPR.add (getJScrollPane (), gridBagConstraints30);
datiPR.add (getNomePR (), gridBagConstraints31);
datiPR.add (getJPanel (), gridBagConstraints32);
datiPR.add (jLabel4, gridBagConstraints35);
datiPR.add (jLabel41, gridBagConstraints36);
datiPR.add (getPosGeoX (), gridBagConstraints22);
datiPR.add (getPosGeoY (), gridBagConstraints38);
datiPR.add (getPosGeoZ (), gridBagConstraints33);
datiPR.add (jLabel2, gridBagConstraints34);
datiPR.add (getOrarioCHOrePR (), gridBagConstraints27);
)
datiPR return;
)

/**
* Method for iniziailizzare a panel (statistics)
*
* @ Return javax.swing.JPanel
*/
getStatistiche private JPanel () (
if (statistics == null) (
GridBagConstraints gridBagConstraints4 = new GridBagConstraints ();
gridBagConstraints4.gridx = 0;
gridBagConstraints4.gridwidth = 0;
gridBagConstraints4.fill = GridBagConstraints.HORIZONTAL;
gridBagConstraints4.insets = new Insets (20, 0, 0, 0);
gridBagConstraints4.gridy = 2;
GridBagConstraints gridBagConstraints3 = new GridBagConstraints ();
gridBagConstraints3.gridx = 0;
gridBagConstraints3.gridwidth = 2;
gridBagConstraints3.fill = GridBagConstraints.HORIZONTAL;
gridBagConstraints3.insets = new Insets (0, 0, 20, 0);
gridBagConstraints3.gridy = 1;
GridBagConstraints gridBagConstraints2 = new GridBagConstraints ();
gridBagConstraints2.gridx = 1;
gridBagConstraints2.insets = new Insets (0, 30, 30, 0);
gridBagConstraints2.anchor = GridBagConstraints.WEST;
gridBagConstraints2.gridy = 0;
mediaVotoPR = new JLabel ();
mediaVotoPR.setText ( &quot;JLabel&quot;);
GridBagConstraints gridBagConstraints1 = new GridBagConstraints ();
gridBagConstraints1.gridx = 0;
gridBagConstraints1.insets = new Insets (0, 0, 30, 0);
gridBagConstraints1.gridy = 0;
txtNomeBene = new JLabel ();
txtNomeBene.setText ( &quot;Well name&gt; Culturale&gt;&quot;);
txtNomeBene.setFont (new Font ( &quot;Dialog&quot;, Font.BOLD, 18));
statistics = new JPanel ();
statistiche.setLayout (new GridBagLayout ());
statistiche.add (txtNomeBene, gridBagConstraints1);
statistiche.add (mediaVotoPR, gridBagConstraints2);
statistiche.add (getStatisticheMeseCorrente (), gridBagConstraints3);
statistiche.add (getStatisticheTotali (), gridBagConstraints4);
)
return statistics;
)

/**
* Method to initialize a panel (feedback)
*
* @ Return javax.swing.JPanel
*/
getFeedback private JPanel () (
if (feedback == null) (
GridBagConstraints = GridBagConstraints new GridBagConstraints ();
gridBagConstraints.fill = GridBagConstraints.BOTH;
gridBagConstraints.gridy = 0;
gridBagConstraints.weightx = 1.0;
gridBagConstraints.weighty = 1.0;
gridBagConstraints.gridx = 0;
feedback = new JPanel ();
feedback.setLayout (new GridBagLayout ());
feedback.add (getJScrollPane2 (), GridBagConstraints);
)
return feedback;
)

/**
* Initialize a JexField (indirizzoPR)
*
* @ Return javax.swing.JTextField
*/

private JTextField getIndirizzoPR ()

/**
* Method to initialize the type field address (indirizzoPR)
* Or via, piazza ....
*
* @ Return javax.swing.JComboBox
*/

private JComboBox getIndirizzoPR1 ()

/**
* Initialize a JTextField for entering
* Uan city CittaPR
*
* @ Return javax.swing.JTextField
*/

private JTextField getCittaPR ()

/**
* This method initializes localitaPR
*
* @ Return javax.swing.JComboBox
*/

private JComboBox getLocalitaPR ()

/**
* Code of refreshment. Definition capPR JTextField
*
* @ Return javax.swing.JTextField
*/

private JTextField getCapPR ()

/**
* Creation JScrollPane
*
* @ Return javax.swing.JScrollPane
*/

private JScrollPane getJScrollPane ()

/**
* Method to create JTextArea's whole descrizionePR
*
* @ Return javax.swing.JTextArea
*/
getDescrizionePR private JTextArea () (
if (descrizionePR == null) (
descrizionePR = new JTextArea ();
descrizionePR.setColumns (12);
descrizionePR.setCursor (new Cursor (Cursor.TEXT_CURSOR));

)
descrizionePR return;
)

/**
* Method to create the JTextField telefonoPR
*
* @ Return javax.swing.JTextField
*/

private JTextField getTelefonoPR ()

/**
* method to initialize a JComboBox with the hours (orarioAPOrePR)
*
* @ Return javax.swing.JComboBox
*/

private JComboBox getOrarioAPOrePR ()

/**
* Method to initialize a JComboBox with the minutes (orarioApMinPR)
*
* @ Return javax.swing.JComboBox
*/

private JComboBox getOrarioApMinPR ()

/**
* Method to initialize a JComboBox with the minutes (orarioCHMinPR)
*
* @ Return javax.swing.JComboBox
*/

private JComboBox getOrarioCHMinPR ()

/**
* Create and initialize a jCombo Box with all the provinces (provPR)
*
* @ Return javax.swing.JTextField
*/

private JComboBox getProvPR ()

/**
* Initialization and management position
*
* @ Param integer pOffset
* @ Param String pString
* @ Param Attribute Pattra
*
*/

public void insertString (int pOffset, String pStr, AttributeSet Pattra) throws BadLocationException

/**
* Initialization of a data point of the snack (nomePR)
*
* @ Return javax.swing.JTextField
*/

private JTextField getNomePR ()

/**
* Initialize and create a panel (JPanel)
*
* @ Return javax.swing.JPanel
*/
getJPanel private JPanel () (
if (JPanel == null) (
JPanel = new JPanel ();
jPanel.setLayout (new BorderLayout ());
jPanel.setBorder (BorderFactory.createTitledBorder (
BorderFactory.createEmptyBorder (),
&quot;Tag the 'Search TitledBorder.DEFAULT_JUSTIFICATION,
TitledBorder.DEFAULT_POSITION, new Font ( &quot;Dialog&quot;, Font.BOLD, 12),
Color.black));
BeanTag [] test = new BeanTag [8];
test [0] = new BeanTag (0, &quot;castle&quot;, &quot;really a castle&quot;);
test [1] = new BeanTag (1, &quot;stronghold&quot;, &quot;really a hostel&quot;);
test [2] = new BeanTag (3, &quot;statue&quot;, &quot;really a basket&quot;);
test [3] = new BeanTag (4, &quot;Column&quot;, &quot;really a basket&quot;);
test [4] = new BeanTag (5, &quot;internal&quot;, &quot;really a basket&quot;);
test [5] = new BeanTag (6, &quot;external&quot;, &quot;really a basket&quot;);
test [6] = new BeanTag (7, &quot;eight hundred&quot;, &quot;really a basket&quot;);
test [7] = new BeanTag (8, &quot;Novecento&quot;, &quot;really a basket&quot;);
pannelloTag = new TagPanel (test);
jPanel.add (pannelloTag, BorderLayout.CENTER);
)
JPanel return;
)

/**
* Creating a JScrollPane (jScrollPane2)
*
* @ Return javax.swing.JScrollPane
*/

private JScrollPane getJScrollPane2 ()

/**
* Create a JTable (feedbackTable)
*
* @ Return javax.swing.JTable
*/

private JTable getFeedbackTable ()

/**
* Creation of a panel (statisticheMeseCorrente)
*
* @ Return javax.swing.JPanel
*/
getStatisticheMeseCorrente private JPanel () (
if (statisticheMeseCorrente == null) (
statisticheMeseCorrente = new JPanel ();
statisticheMeseCorrente.setLayout (new GridBagLayout ());
statisticheMeseCorrente.setPreferredSize (new Dimension (500, 120));
)
statisticheMeseCorrente return;
)

/**
* Creation of a panel (statisticheTotali)
*
* @ Return javax.swing.JPanel
*/
getStatisticheTotali private JPanel () (
if (statisticheTotali == null) (
statisticheTotali = new JPanel ();
statisticheTotali.setLayout (new GridBagLayout ());
statisticheTotali.setPreferredSize (new Dimension (500, 120));
)
statisticheTotali return;
)
/**
* Method for creating a toolbar
* (ToolbarSchedaPR)
*
* @ Return javax.swing.JToolBar
*/
Private JToolBar getToolbarSchedaPR () (
if (ToolbarSchedaPR == null) (

ToolbarSchedaPR JToolBar = new ();
ToolbarSchedaPR.setFloatable (false);
ToolbarSchedaPR.add (getBtnModifica ());
ToolbarSchedaPR.addSeparator ();
ToolbarSchedaPR.add (getBtnSalva ());
ToolbarSchedaPR.addSeparator ();
ToolbarSchedaPR.add (getBtnAnnulla ());
ToolbarSchedaPR.addSeparator ();
ToolbarSchedaPR.add (getBtnModificaCommento ());
ToolbarSchedaPR.addSeparator ();
)
ToolbarSchedaPR return;
)
/**
* Method to initialize posGeoX
* The X position of the GPS
*
* @ Return javax.swing.JTextField
*/

private JTextField getPosGeoX ()

/**
* Method to initialize posGeoY
* The Y position of the GPS
*
* @ Return javax.swing.JTextField
*/

private JTextField getPosGeoY ()

/**
* Method to initialize posGeoZ
* The Z position of the GPS
*
* @ Return javax.swing.JTextField
*/

private JTextField getPosGeoZ ()

/**
* Method to initialize a JComboBox with the hours (orarioCHOrePR)
*
* @ Return javax.swing.JComboBox
*/

private JComboBox getOrarioCHOrePR ()</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_SchedaTurista</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt .*;
import java.awt.event .*;
import java.util.Date;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing .*;
import java.util .*;
import javax.swing.border .*;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.util.Data;

public class SchedaTurista extends JInternalFrame implements IScheda tourist

/**
* Class that models the interface for displaying the card and
* Modify the data of an account tourist.
*
* @ Version 1.0
* @ Author Mario Gallo
*
* (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/

public class SchedaTurista extends JInternalFrame implements IScheda tourist
(

private static final String [] help = ( &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot;
&quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot;)

/**
*
* The only card manufacturer model of a tourist or modification of data
* From the bean.
*
* @ Param pParent unisa.gps.etour.gui.operatoreagenzia.Turisti - the window &quot;father.&quot;
* @ Param pTurista unisa.gps.etour.bean.BeanTurista - the bean contentente data
* Of the tourist.
* @ Param boolean pModifica &lt;ul&gt; &lt;li&gt; true - if amendments are made to the
* Data. &lt;li&gt; False - if you are viewing the card.
*
*/
Public profile tourists (tourism pParent, BeanTurista pTurista,
boolean pModifica)
(
super ();
this.parent = pParent;
setIconifiable (true);
setSize (560, 520);
suggestions &lt;JLabel&gt; = new Vector ();
setDefaultCloseOperation (WindowConstants.DO_NOTHING_ON_CLOSE);
setClosable (true);
tourist = pTurista;
if (turista.isAttiva ())
(
frameIcon = new ImageIcon (
getClass ()
. getResource (
&quot;/ unisa / gps / eTour / gui / operatoreagenzia / images / tab turista.png&quot;));
)
else
(
frameIcon = new ImageIcon (
getClass ()
. getResource (
&quot;/ unisa/gps/etour/gui/operatoreagenzia/images/DisattivaTurista32.png&quot;));
)
initialize ();
if (pModifica)
(
btnModifica.setSelected (true);
btnSalva.setVisible (true);
btnReimposta.setVisible (true);
)
else
(
mostraNascondiSuggerimenti ();
attivaDisattivaEdit ();
)
addInternalFrameListener (new InternalFrameAdapter ()
(
public void internalFrameClosing (InternalFrameEvent pEvent)
(
if (btnModifica.isSelected ())
(
Root = new JPanel JPanel (new BorderLayout ());
JLabel message = new JLabel (
&quot;Are you sure you want to close the tab of this tourist?&quot;);
message.setFont (new Font ( &quot;Dialog&quot;, Font.BOLD, 14));
JLabel alert = new JLabel (
&quot;Warning! Unsaved data will be lost.&quot; SwingConstants.CENTER);
avviso.setIcon (new ImageIcon (getClass (). getResource (
&quot;/ unisa/gps/etour/gui/operatoreagenzia/images/warning16.png &quot;)));
root.add (message, BorderLayout.NORTH);
root.add (notice, BorderLayout.CENTER);
String [] options = ( &quot;Close&quot;, &quot;Cancel&quot;);
int choice = JOptionPane.showInternalOptionDialog (jContentPane, root,
&quot;Confirm closing Tourist Card&quot; + turista.getNome () + &quot;&quot; + turista.getCognome (),
JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, frameIcon, options, options [1]);
if (choice == JOptionPane.OK_OPTION)
(
parent.closeScheda ((tourist board) pEvent.getInternalFrame ());
)
)
else
(
parent.closeScheda ((tourist board) pEvent.getInternalFrame ());
)
)
));
)

/**
*
* This method initializes the interface card for tourists.
*
* @ Return void
*
*/

private void initialize ()

/**
*
* This method loads the bean data provided tourist camps
* Of the form.
*
* @ Return void
*
*/

private void caricaDatiForm ()

/**
*
* This method shows or hides the suggestions relating to the form fields.
*
* @ Return void
*
*/

private void mostraNascondiSuggerimenti ()

/**
*
* This method makes it or not editable form fields.
*
* @ Return void
*
*/

private void attivaDisattivaEdit ()

/**
* This method initializes the toolbar for the functionality of the card
* Tourist.
*
* @ Return javax.swing.JToolBar
*
*/
Private tourist JToolBar getToolbarscheda ()
(
if (toolbarscheda tourist == null)
(
tourist toolbarscheda JToolBar = new ();
toolbarscheda turista.setFloatable (false);
toolbarscheda turista.add (getBtnModifica ());
toolbarscheda turista.addSeparator ();
toolbarscheda turista.add (getBtnSalva ());
toolbarscheda turista.addSeparator ();
toolbarscheda turista.add (getBtnReimposta ());
toolbarscheda turista.addSeparator ();
)
return toolbarscheda tourist;
)

/**
* This method initializes the button for editing data.
*
* @ Return javax.swing.JToggleButton
*
*/
Private JToggleButton getBtnModifica ()
(
if (null == btnModifica)
(
btnModifica JToggleButton = new ();
btnModifica.setText ( &quot;Change Data&quot;);
btnModifica
. setIcon (new ImageIcon (
getClass ()
. getResource (
&quot;/ unisa/gps/etour/gui/operatoreagenzia/images/ModificaTurista32.png &quot;)));
btnModifica
. setToolTipText ( &quot;Enable or disable data modification tourists selected.&quot;);
btnModifica.addActionListener (new ActionListener ()
(

public void actionPerformed (ActionEvent arg0)
(
mostraNascondiSuggerimenti ();
attivaDisattivaEdit ();
btnSalva.setVisible ((btnModifica.isSelected ()? true
: False));
btnReimposta.setVisible ((btnModifica.isSelected ()? true
: False));

)

));
)
btnModifica return;
)

/**
* This method initializes the button to save the changes
* Made to the data of the tourist.
*
* @ Return javax.swing.JButton
*/

private JButton getBtnSalva ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the button to reset the data of the tourist
* In the form.
*
* @ Return javax.swing.JButton
*/

private JButton getBtnReimposta ()

public void actionPerformed (ActionEvent arg0)

/**
* This method initializes the form contentente data of the tourist.
*
* @ Return javax.swing.JPanel
*
*/

private JPanel getDatiTuristaForm ()

public void actionPerformed (ActionEvent pEvent)

public void actionPerformed (ActionEvent arg0)

/**
* This method returns the id of the tourist who is viewing /
* Edit.
*
* @ Return int - the id of the tourist.
*
*/

public int getId ()

// Construction of the dialog for confirmation of the change
// The dialog screen appears
// If you chose to confirm the change
// Creation Tips
// Name
// Surname
// Date of Birth
// Place of Birth
// Phone
// Address
// City
// CAP
// State
// E-Mail
// Username
// Password
// Data entry</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_ScrollableTable</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.awt .*;
import javax.swing.JTable;
import javax.swing.Scrollable;
import javax.swing.SwingConstants;

public class ScrollableTable extends JTable implements Scrollable

/**
* Create a custom JTable that can be displayed through
* Components that enable scrolling.
* @ See javax.swing.JTable
* @ See javax.swing.Scrollable
* @ Author _OniZuKa_
* @ Version 1.0
*/

public class ScrollableTable extends JTable implements Scrollable
(

private static final int maxUnitIncrement = 20;

public ScrollableTable ()

public int getScrollableUnitIncrement (Rectangle visibleRect,
int orientation, int direction)

public int getScrollableBlockIncrement (Rectangle visibleRect,
int orientation, int direction)

public boolean getScrollableTracksViewportWidth ()

public boolean getScrollableTracksViewportHeight ()</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_SitoTableModel</id>
      <content>import Bean.BeanPuntoDiRistoro;
import javax.swing.table.AbstractTableModel;
import Bean .*;
import Util.Punto3D;

public class extends

/** SitoTableModel.java
*
* 1.0
*
* 21/05/2007
*
* (C) 2007 eTour Project - Copyright by SE @ SA Lab - DMI - University of Salerno
*/
Handheld Package;

import Bean.BeanPuntoDiRistoro;
import javax.swing.table.AbstractTableModel;
import Bean .*;
import Util.Punto3D;

/**
* &lt;b&gt; SitoTableModel &lt;/ b&gt;
* Serves as a data container &lt;p&gt; of cultural or refreshment areas that need
* Be displayed in a JTable. &lt;/ P&gt;
* @ See javax.swing.table.AbstractTableModel
* @ See javax.swing.JTable
* @ See unisa.gps.etour.bean.BeanBeneCulturale
* @ See unisa.gps.etour.bean.BeanPuntoDiRistoro
* @ Version 1.0
* @ Author Raphael Landi
*/

public class extends SitoTableModel AbstractTableModel (
String [] columnNames = ( &quot;Name&quot;,
&quot;City&quot;, &quot;Distance&quot;)

public int GetRowCount ()

public int getColumnCount ()

public Object getValueAt (int r, int c)

public String getColumnName (int c)

// First value = second rows = columns
// First value = second rows = columns</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_TAGTableModel</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.util.Vector;
import javax.swing.table.AbstractTableModel;
import unisa.gps.etour.bean.BeanTag;

public class extends

/** TAGTableModel.java
*
* 1.0
*
* 28/05/2007
*
* (C) 2007 eTour Project - Copyright by SE @ SA Lab - DMI - University of Salerno
*/
package unisa.gps.etour.gui.operatoreagenzia;

import java.util.Vector;
import javax.swing.table.AbstractTableModel;
import unisa.gps.etour.bean.BeanTag;
/**
* &lt;p&gt;
* &lt;B&gt; Title: &lt;/ B&gt; TagTableModel
* &lt;/ P&gt;
* &lt;p&gt;
* &lt;B&gt; Description: &lt;/ B&gt; TableModel for dynamic management of Table
* Within the section GestioneTag
* &lt;/ P&gt;
*
* @ Author _Lello_
* @ Version 1.0
*/

public class extends TAGTableModel AbstractTableModel (

private static final long serialVersionUID = 1L;
private static final String [] headers =
( &quot;Name&quot;, &quot;Description&quot;)

/**
* Constructor for class TagTableModel
*
* @ Param BeanTag []
*
*/
public TAGTableModel (BeanTag [] tags)
(
&lt;Object[]&gt; data = new Vector ();
for (int i = 0; i &lt;tag.length i + +)
(
Object [] new = new Object [10];
new [0] = tag [i]. getId ();
New [1] = tag [i]. getName ();
new [2] = tag [i]. getDescrizione ();

)
)

/**
* Returns the number of columns
*
*/

public int getColumnCount ()

/**
* Returns the number of rows
*
*/

public int GetRowCount ()

/**
* Returns the column heading i_esima
*
* @ Param pCol
*
*/

public String getColumnName (int pCol)

/**
* Returns the coordinates given by the pair of row, column
*
* @ Param pCol
* @ Param pRow
*
*/

public Object getValueAt (int prow, int pCol)

/**
* Returns the column pCol
*
* @ Param pCol
*
*/

public class getColumnClass (int pCol)

/**
* Always returns false because the cells in the table are not editable
*
* @ Param pCol
* @ Param pRow
*
* @ Return false
*
*/

public boolean isCellEditable (int row, int col)

/**
* This method is empty.
* Can not be included an element within a cell
*
* @ Deprecated
*
*/

public void setValueAt (Object value, int row, int col)</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_Tag</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JInternalFrame;
import unisa.gps.etour.bean.BeanTag;
import java.awt.GridBagLayout;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import java.awt.GridBagConstraints;
import java.awt.Dimension;
import javax.swing.JToolBar;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import javax.swing.JTextPane;
import javax.swing.BorderFactory;
import javax.swing.border.TitledBorder;
import java.awt.Color;
import java.awt.font;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import java.awt.Insets;

public class Tag extends JInternalFrame

public class Tag extends JInternalFrame
(

private JPanel jContentPane = null;
private JPanel CenterPanel = null;
private JPanel EastPanel = null;
private JScrollPane JScrollPane = null;
private JTable JTable = null;
Private JToolBar jJToolBarBar = null;
private JButton btnModifica = null;
private JButton btnElimina = null;
private JButton btnExit = null;
private JPanel jPanelUp = null;
private JPanel jPanelHelp = null;
private JTextPane jTextPane = null;
private JLabel tagname = null;
private JTextField JTextField = null;
private JLabel description = null;
private JTextArea JTextArea = null;
private JButton btnOK = null;
private JButton btnResetta = null;

/**
* This is the default constructor xxx
*/
public Tag ()

/**
* This method initializes this
*
* @ Return void
*/

private void initialize ()

/**
* This method initializes jContentPane
*
* @ Return javax.swing.JPanel
*/

private JPanel getJContentPane ()

/**
* This method initializes CenterPanel
*
* @ Return javax.swing.JPanel
*/

private JPanel getCenterPanel ()

/**
* This method initializes EastPanel
*
* @ Return javax.swing.JPanel
*/

private JPanel getEastPanel ()

/**
* This method initializes JScrollPane
*
* @ Return javax.swing.JScrollPane
*/

private JScrollPane getJScrollPane ()

/**
* This method initializes JTable
*
* @ Return javax.swing.JTable
*/

private JTable getJTable ()

/**
* This method initializes jJToolBarBar
*
* @ Return javax.swing.JToolBar
*/
Private JToolBar getJJToolBarBar ()
(
if (null == jJToolBarBar)
(
jJToolBarBar JToolBar = new ();
jJToolBarBar.add (getBtnModifica ());
jJToolBarBar.add (getBtnElimina ());
jJToolBarBar.addSeparator ();
jJToolBarBar.add (getBtnExit ());

)
jJToolBarBar return;
)

/**
* This method initializes btnModifica
*
* @ Return javax.swing.JButton
*/

private JButton getBtnModifica ()

/**
* This method initializes btnElimina
*
* @ Return javax.swing.JButton
*/

private JButton getBtnElimina ()

/**
* This method initializes btnExit
*
* @ Return javax.swing.JButton
*/

private JButton getBtnExit ()

/**
* This method initializes jPanelUp
*
* @ Return javax.swing.JPanel
*/

private JPanel getJPanelUp ()

/**
* This method initializes jPanelHelp
*
* @ Return javax.swing.JPanel
*/

private JPanel getJPanelHelp ()

/**
* This method initializes jTextPane
*
* @ Return javax.swing.JTextPane
*/

private JTextPane getJTextPane ()

/**
* This method initializes JTextField
*
* @ Return javax.swing.JTextField
*/

private JTextField getJTextField ()

/**
* This method initializes JTextArea
*
* @ Return javax.swing.JTextArea
*/

private JTextArea getJTextArea ()

/**
* This method initializes btnOK
*
* @ Return javax.swing.JButton
*/

private JButton getBtnOk ()

/**
* This method initializes btnResetta
*
* @ Return javax.swing.JButton
*/

private JButton getBtnResetta ()

// @ JVE: decl-index = 0: visual-constraint = &quot;10.10&quot;</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_TestoNewsRendererTest</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables.test;

import java.util.Date;
import javax.swing.JTable;
import javax.swing.JTextArea;
import unisa.gps.etour.bean.BeanNews;
import unisa.gps.etour.gui.operatoreagenzia.tables.NewsTableModel;
import unisa.gps.etour.gui.operatoreagenzia.tables.TestoNewsRenderer;
import junit.framework.TestCase;

class TestoNewsRenderer

/**
* Test case for class TestoNewsRenderer
*
* @ Author Mario Gallo
* @ Version 0.1 (C) 2007 eTour Project - Copyright by DMI SE @ SA Lab -
* University of Salerno
*/
package unisa.gps.etour.gui.operatoreagenzia.tables.test;

import java.util.Date;
import javax.swing.JTable;
import javax.swing.JTextArea;
import unisa.gps.etour.bean.BeanNews;
import unisa.gps.etour.gui.operatoreagenzia.tables.NewsTableModel;
import unisa.gps.etour.gui.operatoreagenzia.tables.TestoNewsRenderer;
import junit.framework.TestCase;

public class TestCase extends TestoNewsRendererTest
(

Private TestoNewsRenderer renderer;
Private BeanNews aNewsAttiva;
Private BeanNews aNewsScaduta;
private JTable aTable;

public TestoNewsRendererTest ()
(
super ();
renderer = new TestoNewsRenderer ();
aNewsAttiva = new BeanNews ( &quot;Here's a news active&quot;, new Date (),
new Date (120, 1, 1), 5, 0);
aNewsScaduta = new BeanNews ( &quot;Here's a news Expired&quot;, new Date (),
new Date (), 5, 0);
aTable = new JTable (new NewsTableModel ());
)

/** Verify the behavior of the method with the correct parameters.
*/

public void testGetTableCellRendererParametriCorretti ()

/** Verification Compor the table with a table without NewsTableModel
* Associated.
*/

public void testGetTabelCellRendererNoNewsModel ()

/** Verify the behavior of the method with a parameter to null.
*/

public void testGetTableCellRendererParametroNull ()

/** Verify the behavior of the method with a data type unexpected.
*/

public void testGetTableCellRendererTipoInatteso ()

// Test the renderer with a news active.
// Test the renderer with a news expired.</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_Turisti</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JInternalFrame;
import java.awt.Dimension;
import javax.swing.JDesktopPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.Color;
import java.awt.Insets;
import javax.swing.JTextField;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.font;
import javax.swing.ImageIcon;
import unisa.gps.etour.util.Data;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.gui.DeskManager;
import unisa.gps.etour.gui.operatoreagenzia.tables.AttivazioneTuristaRenderer;
import unisa.gps.etour.gui.operatoreagenzia.tables.ScrollableTable;
import unisa.gps.etour.gui.operatoreagenzia.tables.TuristiTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Date;

class implements

/** Tourists.java
*
* 1.0
*
* 26/05/2007
*
* (C) 2007 eTour Project - Copyright by SE @ SA Lab - DMI - University of Salerno
*/
package unisa.gps.etour.gui.operatoreagenzia;

import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JInternalFrame;
import java.awt.Dimension;

import javax.swing.JDesktopPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.Color;
import java.awt.Insets;
import javax.swing.JTextField;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.font;
import javax.swing.ImageIcon;
import unisa.gps.etour.util.Data;
import unisa.gps.etour.bean.BeanTurista;
import unisa.gps.etour.gui.DeskManager;
import unisa.gps.etour.gui.operatoreagenzia.tables.AttivazioneTuristaRenderer;
import unisa.gps.etour.gui.operatoreagenzia.tables.ScrollableTable;
import unisa.gps.etour.gui.operatoreagenzia.tables.TuristiTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Date;

/**
* This class implements the interface for the management of tourists
* Agency by the Operator.
*
* @ Version 1.0
* @ See javax.swing.JInternalFrame
* @ Author Mario Gallo
*
*/

public class JInternalFrame extends Tourists
(

private JPanel jContentPane = null;
Private JToolBar toolbarTuristi = null;
private JButton btnModificaDati = null;
private JScrollPane scrollTableTuristi = null;
private JTable tableTuristi = null;
private JPanel searchPanel = null;
private JTextField cognomeTurista = null;
private JPanel panelHelp = null;
private JTextPane textGuida = null;
private JPanel rightPanel = null;
private JButton btnAttiva;
private JButton btnVisualizzaScheda;
private JButton btnElimina;
private TuristiTableModel TableModel;
Private JToggleButton turistiDisattivati;
Private JToggleButton turistiAttivati;
private JButton btnAzzera;
private JButton btnRicerca;
protected DeskManager desktopManager;
protected JDesktopPane JDesktopPane;
&lt;schedaturista&gt; private ArrayList children;

/**
* This is the default constructor.
*
*/
public Tourists ()

public void internalFrameOpened (InternalFrameEvent pEvent)

public void internalFrameClosing (InternalFrameEvent pEvent)

/**
* This method initializes the internal frame's content pane.
*
* @ Return javax.swing.JPanel - the content pane.
*
*/

private JPanel getJContentPane ()

/**
* This method initializes the toolbar on the management of
* Tourists.
*
* @ Return javax.swing.JToolBar - the toolbar.
*
*/
Private JToolBar getToolbarTuristi ()
(
if (null == toolbarTuristi)
(
toolbarTuristi JToolBar = new ();
toolbarTuristi.setLayout (null);
toolbarTuristi.setPreferredSize (new Dimension (1, 50));
toolbarTuristi.setOrientation (JToolBar.HORIZONTAL);
toolbarTuristi.setFloatable (false);
toolbarTuristi.add (getBtnAttiva ());
toolbarTuristi.add (getBtnModificaDati ());
toolbarTuristi.add (getBtnVisualizzaScheda ());
toolbarTuristi.add (getBtnElimina ());

)
toolbarTuristi return;
)

/**
* This method initializes the button to activate
* A tourist.
*
* @ Return javax.swing.JButton - the button.
*
*/

private JButton getBtnAttiva ()

public void actionPerformed (ActionEvent arg0)

/**
* This method initializes the button for changing
* Data of a tourist.
*
* @ Return javax.swing.JButton - the button.
*/

private JButton getBtnModificaDati ()

public void actionPerformed (ActionEvent arg0)

/**
* This method initializes the button to display the
* Board a tourist.
*
* @ Return javax.swing.JButton - the button.
*/

private JButton getBtnVisualizzaScheda ()

public void actionPerformed (ActionEvent arg0)

/**
*
* This method initializes the delete button for a tourist.
*
* @ Return javax.swing.JButton - the button.
*/

private JButton getBtnElimina ()

public void actionPerformed (ActionEvent arg0)

/**
* This method initializes the scroll with the table bread tourists.
*
* @ Return javax.swing.JScrollPane - the scroll pane.
*/

private JScrollPane getScrollTableTuristi ()

public void ValueChanged (ListSelectionEvent event)

/**
* This method initializes the form to the search for tourists.
*
* @ Return javax.swing.JPanel
*
*/

private JPanel getSearchPanel ()

public void actionPerformed (ActionEvent pEvent)

/**
* This method initializes the panel's online help.
*
* @ Return javax.swing.JPanel
*
*/

private JPanel getPanelHelp ()

/**
* This method initializes the side panel of the interface.
*
* @ Return javax.swing.JPanel
*
*/

private JPanel getRightPanel ()

/**
* This method initializes the search button tourists.
*
* @ Return javax.swing.JButton
*
*/

private JButton getBtnRicerca ()

/**
* This method initializes the button to reset form
* Search.
*
* @ Return javax.swing.JButton
*/

private JButton getBtnAzzera ()

public void actionPerformed (ActionEvent pAcEvent)

/**
*
* This method opens a tab for the bean tourists supplied input.
*
* @ Param pTurista BeanTurista - the bean tourists
* @ Param boolean pModifica &lt;ul&gt; &lt;li&gt; true - if you change the data.
&lt;li&gt; * False - if you receive the card. &lt;/ Ul&gt;
* @ Return void
*/
private void OpenOffice.org Messenger MSN Gaim (BeanTurista pTurista, boolean pModifica)
(
for (int i = 0; i &lt;figli.size (); i + +)
(
filing current figli.get = (i);
if (pTurista.getId () == corrente.getId ())
(
desktopManager.activateFrame (current);
return;
)
)
new = new filing filing (this, pTurista, pModifica);
jDesktopPane.add (new, Integer.MAX_VALUE);
nuova.setVisible (true);
figli.add (new);
)

/**
*
* Closes the selected tab.
*
* @ Param pScheda profiling - the tab to close.
* @ Return void
*/

protected void closeScheda (filing pScheda)

/**
*
* Update the table model of the tourists with the bean supplied
* Input.
*
* @ Param pTurista BeanTurista - the bean of the tourist.
* @ Return void
*/

protected void updateTableModel (BeanTurista pTurista)

// Date of Birth
// The process of decommissioning
// The process of activation
// TEST
// TEST
// TEST
// TEST
// TEST
// END TEST
// Status
// Name
// Surname
// Email
// Phone
// Date of Birth
// City of Birth
// Address
// Residence
// CAP
// State
// Data entry
// Create Panel, choose tourists
// Create search panel</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_TuristiTableModel</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.table.AbstractTableModel;
import unisa.gps.etour.bean.BeanTurista;

public class extends

/** TuristiTableModel.java
*
* 1.0
*
* 27/05/2007
*
* 2007 eTour Project - Copyright by SE @ SA Lab - DMI University of Salerno
*/
package unisa.gps.etour.gui.operatoreagenzia.tables;

import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.table.AbstractTableModel;

import unisa.gps.etour.bean.BeanTurista;

/**
* &lt;b&gt; TuristiTableModel &lt;/ b&gt;
* &lt;p&gt; Acts as a container of data from the tourists who have
* Be displayed in a JTable. &lt;/ P&gt;
* @ See javax.swing.table.AbstractTableModel
* @ See javax.swing.JTable
* @ See unisa.gps.etour.bean.BeanTurista
* @ Version 1.0
* @ Author Mario Gallo
*/

public class extends TuristiTableModel AbstractTableModel
(
private static final String [] headers = ( &quot;Status&quot;, &quot;Name&quot;, &quot;Name&quot;, &quot;E-Mail&quot;, &quot;Phone&quot;,
&quot;Date of Birth&quot;, &quot;City of Birth&quot;,
&quot;Address&quot;, &quot;City&quot;, &quot;CPC&quot;, &quot;test&quot;, &quot;Save&quot;)

/**
* Default Constructor. We only provide the template without loading
* No data in it.
*
*/
public TuristiTableModel ()
(
&lt;Object[]&gt; data = new Vector ();
)

/**
* Create a model of the table and loads the data provided through an array of BeanBeneCulturale.
*
* @ Param pTuristi java.util.ArrayList &lt;BeanTurista&gt; - an ArrayList of BeanTurista.
*
*/
public TuristiTableModel (ArrayList &lt;BeanTurista&gt; pTuristi)
(
this ();
if (null == pTuristi)
(
return;
)
for (int i = 0; i &lt;pTuristi.size (); i + +)
(
insertTurista (pTuristi.get (i));
)
)

/**
* Returns the number of columns provided by the model.
*
* @ Return int - the number of columns.
*
*/

public int getColumnCount ()

/**
* Returns the number of rows currently in the model.
*
* @ Return int - the number of rows.
*
*/

public int GetRowCount ()

/**
* Returns the column name from the index provided.
*
* @ Return String - the name of the column.
* @ Exception IllegalArgumentException - if the column index is not provided
* In the model.
*
*/

public String getColumnName (int pColumn) throws IllegalArgumentException

/**
* Returns the object in the model to the row and column provided.
*
* @ Param pRow - the line number.
* @ Param pColumn - the column number.
* @ Return Object - the object contained in the selected cell.
* @ Exception IllegalArgumentException - if the index or the row or column not provided
* Are present in the model.
*
*/

public Object getValueAt (pRow int, int pColumn)
throws IllegalArgumentException

/**
* Returns the class of objects in the column of which is provided in the index.
*
* @ Param pColumn - the column number.
* @ Return Class - the class of objects of the selected column.
* @ Exception IllegalArgumentException - if the index column does not pro
* In the model.
*
*/

public class getColumnClass (int pColumn) throws IllegalArgumentException

/**
* Returns whether the selected cell editable.
*
* @ Return boolean - true if the cell editable
* False otherwise
* @ Param pRow - the line number.
* @ Param pColumn - the column number.
* @ Exception IllegalArgumentException - if the index or the row or column are not provided
* In the model.
*
*/

public boolean isCellEditable (pRow int, int pColumn)
throws IllegalArgumentException

/**
* The method is inherited by the TableModel not setValueAt
* Necessary because not provided for the possibility of amending a
* Single cell.
*
* @ Deprecated
*/

public void setValueAt (Object value, int row, int col)

/**
* Enables or disables the tourist in the selected row.
*
* @ Param int pRow - the selected row.
* @ Return int - the id of the tourist on / off.
*
*/

public int attivaTurista (int pRow) throws IllegalArgumentException

/**
* Determines if a visitor to the selected row is enabled or disabled.
*
* @ Param int pRow - the selected row.
* @ Return &lt;ul&gt; &lt;li&gt; &lt;i&gt; true &lt;/ i&gt; - enabled &lt;/ li&gt;
* &lt;li&gt; &lt;i&gt; False &lt;/ i&gt; - disabled &lt;/ li&gt; &lt;/ ul&gt;
*/

public boolean isAttivato (int pRow) throws IllegalArgumentException

/**
*
* Enter data for a tourist in the model since its Bean.
*
* @ Param pTurista BeanTurisa - the bean that contains the data of the tourist.
*
*/

public void insertTurista (BeanTurista pTurista) throws IllegalArgumentException

/**
*
* Update the information of the tourist in the model (if any)
* With the bean supplied input.
*
* @ Param pTurista BeanTurista - the bean that contains the data of the tourist.
*
*/

public void updateTurista (BeanTurista pTurista) throws IllegalArgumentException

/**
*
* Returns the id of the visitor whose data are displayed in row
* Provided input.
*
* @ Param pRow - the line number.
* @ Return - the id of the tourist.
* @ Exception IllegalArgumentException - if the row index does not pro
* In the model.
*/

public int getID (int pRow) throws IllegalArgumentException

/**
*
* Returns the id of the tourist at the line number provided as input and removes it from the model.
*
* @ Param pRow - the line number.
* @ Return - the id of the tourist.
* @ Exception IllegalArgumentException - if the row index does not pro
* In the model.
*
*/

public int removeTurista (int pRow) throws IllegalArgumentException

// Found</content>
      <parent_id/>
    </artifact>
    <artifact>
      <id>CC_reportStatistici</id>
      <content>package unisa.gps.etour.gui.operatoreagenzia;

import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JInternalFrame;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import javax.swing.JToolBar;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTabbedPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import java.awt.GridBagConstraints;
import javax.swing.BorderFactory;
import java.awt.Color;
import javax.swing.border.TitledBorder;
import java.awt.font;
import javax.swing.JTextPane;
import javax.swing.JCheckBox;
import javax.swing.JRadioButton;
import java.awt.Insets;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.util.Punto3D;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;

public class reportStatistici

/**
*
*/
private static final long serialVersionUID = 1L;
&lt;String&gt; private Vector data;
private JPanel jContentPane = null;
Private JToolBar JToolBar = null;
private JComboBox JComboBox = null;
private JPanel centralPanel = null;
private JScrollPane JScrollPane = null;
private JTable tabellas = null;
private JPanel southPanel = null;
private JTabbedPane JTabbedPane = null;
private JPanel guidainlinea = null;
private JTextPane jTextPane = null;
private JPanel genStat = null;
private JPanel evdStat = null;
private JPanel stat = null;
private JPanel JPanel = null;
private JButton JButton = null;
private JButton jButton1 = null;
private JButton jButton2 = null;
private JLabel jLabel1 = null;
private JLabel jLabel2 = null;
private JLabel jLabel3 = null;
private JLabel jLabel4 = null;
private JLabel jLabel5 = null;
private JLabel jLabel6 = null;
private JLabel jLabel7 = null;
private JLabel jLabel8 = null;
private JLabel jLabel9 = null;
private JPanel jPanel1 = null;
private JLabel jLabel10 = null;
private JLabel jLabel11 = null;
private JLabel jLabel12 = null;
private JLabel jLabel13 = null;
private JLabel jLabel14 = null;
private JLabel jLabel15 = null;
private JLabel jLabel16 = null;
private JLabel jLabel17 = null;
private JLabel jLabel18 = null;
private JLabel jLabel19 = null;
private JLabel jLabel20 = null;
private JLabel jLabel21 = null;
private JLabel jLabel22 = null;
private JButton btnVisualizza = null;
private JLabel JLabel = null;

/**
* This is the default constructor xxx
*/
public reportStatistici () (
super ();
initialize ();
)

/**
* This method initializes this
*
* @ Return void
*/

private void initialize ()

/**
* This method initializes jContentPane
*
* @ Return javax.swing.JPanel
*/
getJContentPane private JPanel () (
if (jContentPane == null) (
BorderLayout BorderLayout = new BorderLayout ();
borderLayout.setHgap (0);
borderLayout.setVgap (5);
jContentPane = new JPanel ();
jContentPane.setLayout (BorderLayout);
jContentPane.add (getJToolBar (), BorderLayout.NORTH);
jContentPane.add (getCentralPanel (), BorderLayout.CENTER);
jContentPane.add (getSouthPanel (), BorderLayout.CENTER);
)
jContentPane return;
)

/**
* This method initializes JToolBar
*
* @ Return javax.swing.JToolBar
*/
Private JToolBar getJToolBar () (
if (JToolBar == null) (
JButton = new JLabel ();
jLabel.setText ( &quot;Select Location&quot;);
jLabel.setLocation (new Point (16, 6));
JToolBar JToolBar = new ();
jToolBar.setFloatable (false);
jToolBar.setLayout (new GridBagLayout ());
jToolBar.setPreferredSize (new Dimension (1, 30));
jToolBar.add (JLabel);
jToolBar.addSeparator ();
jToolBar.add (getJComboBox ());
)
JToolBar return;
)

/**
* This method initializes JComboBox
*
* @ Return javax.swing.JComboBox
*/

private JComboBox getJComboBox ()

public void caricaCombo (JComboBox combo)

/**
* This method initializes centralPanel
*
* @ Return javax.swing.JPanel
*/
getCentralPanel private JPanel () (
if (centralPanel == null) (
centralPanel = new JPanel ();
centralPanel.setLayout (new BorderLayout ());
centralPanel.add (getJScrollPane (), BorderLayout.CENTER);
centralPanel.add (getJPanel (), BorderLayout.EAST);
)
centralPanel return;
)

/**
* This method initializes JScrollPane
*
* @ Return javax.swing.JScrollPane
*/

private JScrollPane getJScrollPane ()

/**
* This method initializes tabellas
*
* @ Return javax.swing.JTable
*/

private JTable getTabellaSiti ()

/**
* This method initializes southPanel
*
* @ Return javax.swing.JPanel
*/

private JPanel getSouthPanel ()

/**
* This method initializes JTabbedPane
*
* @ Return javax.swing.JTabbedPane
*/

private JTabbedPane getJTabbedPane ()

/**
* This method initializes guidainlinea
*
* @ Return javax.swing.JPanel
*/

private JPanel getGuidainlinea ()

/**
* This method initializes jTextPane
*
* @ Return javax.swing.JTextPane
*/

private JTextPane getJTextPane ()

/**
* This method initializes genStat
*
* @ Return javax.swing.JPanel
*/

private JPanel getGenStat ()

/**
* This method initializes evdStat
*
* @ Return javax.swing.JPanel
*/

private JPanel getEvdStat ()

/**
* This method initializes stat
*
* @ Return javax.swing.JPanel
*/

private JPanel getStat ()

/**
* This method initializes JPanel
*
* @ Return javax.swing.JPanel
*/

private JPanel getJPanel ()

/**
* This method initializes JButton
*
* @ Return javax.swing.JButton
*/

private JButton getJButton ()

/**
* This method initializes jButton1
*
* @ Return javax.swing.JButton
*/

private JButton getJButton1 ()

/**
* This method initializes jButton2
*
* @ Return javax.swing.JButton
*/

private JButton getJButton2 ()

/**
* This method initializes jPanel1
*
* @ Return javax.swing.JPanel
*/

private JPanel getJPanel1 ()

/**
* This method initializes btnVisualizza
*
* @ Return javax.swing.JButton
*/

private JButton getBtnVisualizza ()

// jComboBox.addItem ( &quot;Salerno&quot;);
// @ JVE: decl-index = 0: visual-constraint = &quot;-7, -61&quot;</content>
      <parent_id/>
    </artifact>
  </artifacts>
</artifacts_collection>
