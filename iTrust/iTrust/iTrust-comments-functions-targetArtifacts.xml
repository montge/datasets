<?xml version="1.0" ?>
<artifacts_collection>
    <collection_info>
        <id>CC</id>
        <name>iTrust Documentation Artifacts</name>
        <version>1.1</version>
        <description>Java documentation and interfaces</description>
        <content_location>external</content_location>
    </collection_info>
    <artifacts>
        <artifact>
            <id>CC_BeanBuilder</id>
            <content>package edu.ncsu.csc.itrust;

import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
/**
 * Takes a parameter map and creates a bean from that map of the appropriate type.
 * @param &lt;T&gt; The type to be returned from the appropriate parameter map.
 */
public class BeanBuilder&lt;T&gt; {

/**
	 * The code here is not obvious, but this method should not need rewriting unless a bug is found
	 * 
	 * @param map -
	 *            typically a request.getParameterMap; also can be a HashMap
	 * @param bean -
	 *            an instantiated bean to be loaded. Loaded bean is returned.
	 * @return a loaded &quot;bean&quot;
	 * @throws Exception -
	 *             Several exceptions are thrown here, so promotion seemed fitting
	 */
// this warning is only suppressed because Map isn't parameterized (old JSP)
public T build(Map map, T bean) throws Exception {;

/**
	 * Checks for overloaded methods
	 * 
	 * @param bean item to check
	 */
private void checkOverloadedMethods(T bean) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DBUtil</id>
            <content>package edu.ncsu.csc.itrust;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import edu.ncsu.csc.itrust.dao.DAOFactory;
/**
 * Provides a few database utilties
 * 
 * @author Andy
 * 
 */
public class DBUtil {

/**
	 * Used to check if we can actually obtain a connection.
	 * 
	 * @return
	 */
public static boolean canObtainProductionInstance() {;

/**
	 * Close the prepared statement and the connection in a proper way
	 * 
	 * @param conn
	 * @param ps
	 */
public static void closeConnection(Connection conn, PreparedStatement ps) {;

/**
	 * Returns the last ID that was generated for an auto-increment column. Please note that this does NOT
	 * cause transaction problems! last_insert_id() returns the last generated ID on a per-connection basis.
	 * See the MySQL documentation at the following location to confirm this:
	 * {@link http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html}
	 * 
	 * Don't believe me? see {@link AutoIncrementTest}
	 * 
	 * @param conn
	 * @return last generated id
	 * @throws SQLException
	 */
public static long getLastInsert(Connection conn) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DateUtil</id>
            <content>package edu.ncsu.csc.itrust;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
/**
 * Provides a few extra date utilities
 * 
 * @author Andy
 * 
 */
public class DateUtil {

public static final long YEAR_IN_MS ;
/**
	 * Returns a MM/dd/yyyy format of the date for the given years ago
	 * 
	 * @param years
	 * @return
	 */
public static String yearsAgo(long years) {;

/**
	 * Checks to see if a given date is within a range of months &lt;strong&gt;INCLUSIVELY&lt;/strong&gt;, agnostic of
	 * the year. &lt;br /&gt;
	 * &lt;br /&gt;
	 * 
	 * The range &quot;wraps&quot; so that if the first month is after the second month, then the definition of &quot;is in
	 * month range&quot; is:&lt;br /&gt;
	 * the date falls outside of secondMonth, firstMonth, but including secondMonth and firstMonth.
	 * 
	 * Modular arithmetic is used to adjust month values into the valid range.
	 * 
	 * @param date
	 * @param firstMonth
	 * @param secondMonth
	 * @return
	 */
public static boolean isInMonthRange(java.util.Date date, int firstMonth, int secondMonth) {;

/**
	 * Same as isInMonthRange but uses the current date as the date value.
	 * 
	 * @see DateUtil#isInMonthRange(Date, int, int)
	 * @param firstMonth
	 * @param secondMonth
	 * @return
	 */
public static boolean currentlyInMonthRange(int firstMonth, int secondMonth) {;

/**
	 * Returns the date a certain number of years ago
	 * @param years how many years ago
	 * @return the date it was however many years ago
	 */
public static Date getDateXyearsAgoFromNow(int years) {;

/**
	 * Returns the date a certain number of years ago
	 * @param years how many years ago
	 * @return the date it was however many years ago
	 */
public static java.sql.Date getSQLdateXyearsAgoFromNow(int years) {;

/**
	 * Returns the date a certain number of days ago
	 * @param days how many days ago
	 * @return the date it was however many days ago
	 */
public static Date getDateXDaysAgoFromNow(int days) {;

/**
	 * Returns the date a certain number of days ago
	 * @param days how many days ago
	 * @return the date it was however many days ago
	 */
public static java.sql.Date getSQLdateXDaysAgoFromNow(int days) {;

/**
	 * &lt;!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM
	 * &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; - yearsAgo2/monthValue2/&lt;last day of
	 * month2&gt;--&gt; Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM
	 * &amp;lt;current year&amp;gt; - yearsAgo1/monthValue1/01 TO &amp;lt;current year&amp;gt; -
	 * yearsAgo2/monthValue2/&amp;lt;last day of month2&amp;gt;
	 * 
	 * @param month1
	 *            First sql.Date object to be set
	 * @param monthValue1
	 * @param yearsAgo1
	 * @param month2
	 *            Second sql.Date object to be set
	 * @param monthValue2
	 * @param yearsAgo2
	 */
public static void setSQLMonthRange(java.sql.Date month1, int monthValue1, int yearsAgo1, java.sql.Date month2, int monthValue2, int yearsAgo2) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EmailUtil</id>
            <content>package edu.ncsu.csc.itrust;

import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Sends email to users. Since we don't want to train spammers in 326, this just inserts into a database. If
 * we put this into an actual system, we would replace this class with stuff from javax.mail
 * 
 * @author Andy
 * 
 */
public class EmailUtil {

private DAOFactory factory;
public EmailUtil(DAOFactory factory) {;

// DO NOT SEND REAL EMAILS!!!!!
// Sending emails - even to a throwaway account, is a waste of bandwidth and looks very suspicious.
// If you want to know how to send emails from Java, just Google it on your own time.
public void sendEmail(Email email) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_HtmlEncoder</id>
            <content>package edu.ncsu.csc.itrust;

/**
 * Escapes a few key HTML characters and does some other checking
 * 
 * @author Andy
 * 
 */
public class HtmlEncoder {

/**
	 *  Escapes a few key HTML characters
	 * @param input String to check and escape
	 * @return
	 */
public static String encode(String input) {;

/**
	 * Checks URL
	 * 
	 * @param input URL to check
	 * @return false if the input contains http://, true otherwise
	 */
public static boolean URLOnSite(String input) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_Localization</id>
            <content>package edu.ncsu.csc.itrust;

import java.util.Locale;
/** Provides a singleton for accessing the current locale of iTrust
 *  Could possibly load the country and language from a file.
 *
 */
public class Localization {

private Locale currentLocale;
public Localization(){;

/**
	 * Returns the current locale
	 * @return the current locale
	 */
public Locale getCurrentLocale(){;

/**
	 * singleton method, may want to make this thread safe, as far as I know
	 * iTrust doesn't do any multithreading though...
	 * @return Localization instance
	 */
public static Localization instance(){;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_Messages</id>
            <content>package edu.ncsu.csc.itrust;

import java.util.MissingResourceException;
import java.util.ResourceBundle;
public class Messages {

private static final String BUNDLE_NAME ; //$NON-NLS-1$
private static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME,Localization.instance().getCurrentLocale());

public static String getString(String key) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ParameterUtil</id>
            <content>package edu.ncsu.csc.itrust;

import java.util.HashMap;
import java.util.Map;
/**
 * Provides a utility method that converts the &quot;Map&quot; from the JSP container to a type-checked hashmap
 * 
 * @author Andy
 * 
 */
public class ParameterUtil {

/**
	 * Provides a utility method that converts the &quot;Map&quot; from the JSP container to a type-checked hashmap
	 * @param params Map to convert
	 * @return converted Map
	 */
public static HashMap&lt;String, String&gt; convertMap(Map params) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_RandomPassword</id>
            <content>package edu.ncsu.csc.itrust;

import java.util.Random;
/**
 * Generates a random string of characters
 * 
 * @author Andy
 * 
 */
public class RandomPassword {

private static final Random rand = new Random();

/**
	 * Returns a string of random characters
	 * 
	 * @return a string of random characters
	 */
public static String getRandomPassword() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SessionTimeoutListener</id>
            <content>package edu.ncsu.csc.itrust.server;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionEvent;
import javax.servlet.http.HttpSessionListener;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * A listener which will time the user out after a pre-specified time limit. 
 */
public class SessionTimeoutListener implements HttpSessionListener {

private DAOFactory factory;
/**
	 * The default constructor.
	 */
public SessionTimeoutListener() {;

/**
	 * The specialized constructor, which takes a particular DAOFactory to be used when checking for the pre-specified
	 * timeout limit.
	 * @param factory The DAOFactory to be used.
	 */
public SessionTimeoutListener(DAOFactory factory) {;

/**
	 * Called when the HttpSession is created, this method pulls the pre-specified limit from the
	 * database and sets it as a property of the HttpSession.
	 * @param arg0 The HttpSessionEven which just occurred.
	 */
public void sessionCreated(HttpSessionEvent arg0) {;

/**
	 * Must be declared for compliance with the interface. Not implemented.
	 */
public void sessionDestroyed(HttpSessionEvent arg0) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddApptAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.sql.Timestamp;
import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ApptDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.ApptBeanValidator;
public class AddApptAction {

private long loggedInMID;
private ApptDAO apptDAO;
private TransactionDAO transDAO;
private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
private ApptBeanValidator validator = new ApptBeanValidator();

public AddApptAction(DAOFactory factory, long loggedInMID) {;

public String addAppt(ApptBean appt) throws FormValidationException, SQLException {;

/**
	 * Gets a users's name from their MID
	 * 
	 * @param mid the MID of the user
	 * @return the user's name
	 * @throws iTrustException
	 */
public String getName(long mid) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddERespAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AddPersonnelValidator;
/**
 * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password
 * for them.
 * 
 * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
 * 
 * @author Andy Meneely
 * 
 * Copied from AddHCPAction 
 */
public class AddERespAction {

private PersonnelDAO personnelDAO;
private AuthDAO authDAO;
private TransactionDAO transDAO;
private long loggedInMID;
/**
 * Sets up the defaults for the class
 * 
 * @param factory factory for creating the defaults.
 * @param loggedInMID person currently logged in 
 * @author Andy Meneely
 */	
public AddERespAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Adds the new user.  Event is logged.
	 * 
	 * @param p bean containing the information for the new user
	 * @return MID of the new user.
	 * @throws FormValidationException
	 * @throws iTrustException
	 */
public long add(PersonnelBean p) throws FormValidationException, iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddHCPAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AddPersonnelValidator;
/**
 * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password
 * for them.
 * 
 * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
 * 
 * @author Andy Meneely
 * 
 */
public class AddHCPAction {

private PersonnelDAO personnelDAO;
private AuthDAO authDAO;
private TransactionDAO transDAO;
private long loggedInMID;
/**
	 * Sets up the defaults for the class
	 * 
	 * @param factory factory for creating the defaults.
	 * @param loggedInMID person currently logged in 
	 * @author Andy Meneely
	 */	
public AddHCPAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Adds the new user.   Event is logged.
	 * 
	 * @param p bean containing the information for the new user
	 * @return MID of the new user.
	 * @throws FormValidationException
	 * @throws iTrustException
	 */
public long add(PersonnelBean p) throws FormValidationException, iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddOfficeVisitAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Used for Document Office Visit page (documentOfficeVisit.jsp). This just adds an empty office visit, and
 * provides a list of office visits in case you want to edit an old office visit.
 * 
 * Very similar to {@link AddPatientAction}
 * 
 * @author Andy Meneely
 * 
 */
public class AddOfficeVisitAction extends PatientBaseAction {

private DAOFactory factory;
private OfficeVisitDAO ovDAO;
private TransactionDAO transDAO;
/**
	 * Sets up the defaults for the class
	 * @param factory
	 * @param pidString
	 *            Patient ID to be validated by the superclass, {@link PatientBaseAction}
	 * @throws iTrustException
	 */
public AddOfficeVisitAction(DAOFactory factory, String pidString) throws iTrustException {;

/**
	 * Adds an empty office visit
	 * 
	 * @param loggedInMID
	 *            For logging purposes
	 * @return Office visit ID (primary key) of the new office visit
	 * @throws DBException
	 */
public long addEmptyOfficeVisit(long loggedInMID) throws DBException {;

/**
	 * Lists all office visits for a particular patient, regardless of who originally documented the office
	 * visit.
	 * 
	 * @return List of office visits,
	 * @throws iTrustException
	 */
public List&lt;OfficeVisitBean&gt; getAllOfficeVisits() throws iTrustException {;

/**
	 * Returns the full name of the patient with this MID
	 * 
	 * @return name in the form of a string
	 * @throws DBException
	 * @throws iTrustException
	 */
public String getUserName() throws DBException, iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddPHAAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AddPersonnelValidator;
/**
 * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty PHA, creates a random password
 * for them.
 * 
 * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
 * 
 */
public class AddPHAAction {

private PersonnelDAO personnelDAO;
private AuthDAO authDAO;
private TransactionDAO transDAO;
private long loggedInMID;
/**
	 * Sets up the defaults for the class
	 * 
	 * @param factory factory for creating the defaults.
	 * @param loggedInMID person currently logged in 
	 * @author Andy Meneely
	 */	
public AddPHAAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Adds the new user.   Event is logged.
	 * 
	 * @param p bean containing the information for the new user
	 * @return MID of the new user.
	 * @throws FormValidationException
	 * @throws iTrustException
	 */
public long add(PersonnelBean p) throws FormValidationException, iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddPatientAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.validate.AddPatientValidator;
/**
 * Used for Add Patient page (addPatient.jsp). This just adds an empty patient, creates a random password for
 * that patient.
 * 
 * Very similar to {@link AddOfficeVisitAction}
 * 
 * @author Andy Meneely
 * 
 */
public class AddPatientAction {

private TransactionDAO transDAO;
private PatientDAO patientDAO;
private AuthDAO authDAO;
private long loggedInMID;
/**
	 * Just the factory and logged in MID
	 * 
	 * @param factory
	 * @param loggedInMID
	 */
public AddPatientAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Creates a new patient, returns the new MID. Adds a new user to the table along with a random password.
	 * 
	 * @return the new MID of the patient
	 * @throws DBException
	 * @throws FormValidationException
	 */
public long addPatient(PatientBean p) throws DBException, FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddRemoteMonitoringDataAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator;
/**
 * Handles adding remote monitoring patient data to the database
 * 
 */
public class AddRemoteMonitoringDataAction {

private RemoteMonitoringDataBeanValidator validator = new RemoteMonitoringDataBeanValidator();

private RemoteMonitoringDAO rmDAO;
private TransactionDAO transDAO;
private AuthDAO authDAO;
private long loggedInMID;
private long patientMID;
/**
	 * Constructor
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person recording the patient's data.
	 * @param patientMID The MID of the patient
	 */
public AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {;

/**
	 * Adds a patients remote monitoring data to the database.
	 * 
	 * @param glucoseLevel
	 * @throws DBException
	 */
public void addRemoteMonitoringData(int glucoseLevel) throws DBException, FormValidationException,iTrustException {;

/**
	 * Adds a patients remote monitoring data to the database.
	 * 
	 * @param systolicBloodPressure
	 * @param diastolicBloodPressure
	 * @throws DBException
	 */
public void addRemoteMonitoringData(int systolicBloodPressure, int diastolicBloodPressure) throws DBException, FormValidationException,iTrustException {;

/**
	 * Adds a patients remote monitoring data to the database.
	 * 
	 * @param systolicBloodPressure
	 * @param diastolicBloodPressure
	 * @param glucoseLevel
	 * @throws DBException
	 */
public void addRemoteMonitoringData(int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel) throws DBException, FormValidationException,iTrustException {;

/**
	 * returns the patient name
	 * 
	 * @return patient name
	 * @throws DBException
	 * @throws iTrustException
	 */
public String getPatientName(long pid) throws DBException, iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddUAPAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AddPersonnelValidator;
/**
 * Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password
 * for them.
 * 
 * Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
 * 
 * @author Andy Meneely
 * 
 */
public class AddUAPAction {

private PersonnelDAO personnelDAO;
private AuthDAO authDAO;
private TransactionDAO transDAO;
private long loggedInMID;
/**
	 * Sets up the defaults for the class
	 * 
	 * @param factory factory for creating the defaults.
	 * @param loggedInMID person currently logged in 
	 * @author Andy Meneely
	 */	
public AddUAPAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Adds the new user.  Event is logged.
	 * 
	 * @param p bean containing the information for the new user
	 * @return MID of the new user.
	 * @throws FormValidationException
	 * @throws iTrustException
	 */
public long add(PersonnelBean p) throws FormValidationException, iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ChangeSessionTimeoutAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AccessDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Used to change the session timeout, sessionTimeout.jsp. Note that a change to this timeout only gets
 * reflected on new sessions.
 * 
 * @author Andy Meneely
 * 
 */
public class ChangeSessionTimeoutAction {

private AccessDAO accessDAO;
/**
	 * Sets up defualts.
	 * 
	 * @param factory
	 * @author Andy Meneely
	 */
public ChangeSessionTimeoutAction(DAOFactory factory) {;

/**
	 * Changes the session timeout, the complicated logic of this is somewhat regrettably in the DAO,
	 * {@link AccessDAO}
	 * 
	 * @param minuteString
	 *            Pass the number of minutes in the form of a string, greater than 0.
	 * @throws FormValidationException
	 * @throws DBException
	 * @author Andy Meneely
	 */
public void changeSessionTimeout(String minuteString) throws FormValidationException, DBException {;

/**
	 * Returns the current session timeout in minutes, as reflected in the database
	 * 
	 * @return the number of minutes it would take for an inactive session to timeout
	 * @throws DBException
	 * @author Andy Meneely
	 */
public int getSessionTimeout() throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ChronicDiseaseRiskAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator;
import edu.ncsu.csc.itrust.risk.RiskChecker;
/**
 * 
 * Used for chronicDiseaseRisks.jsp. Passes most of the logic off to {@link ChronicDiseaseMediator}, and the
 * various subclasses of {@link RiskChecker}.
 * 
 * @author Andy Meneely
 * 
 */
public class ChronicDiseaseRiskAction extends PatientBaseAction {

private AuthDAO authDAO;
private long loggedInMID;
private ChronicDiseaseMediator diseaseMediator;
private TransactionDAO transDAO;
/**
	 * 
	 * @param factory
	 * @param loggedInMID
	 * @param pidString
	 *            The patient ID to be validated and used
	 * @throws iTrustException
	 * @throws DBException
	 * @throws NoHealthRecordsException
	 *             This is thrown if a patient is added without any health records to be checked. Try to avoid
	 *             having this exception be thrown in a normal flow of events.
	 * @author Andy Meneely
	 */
public ChronicDiseaseRiskAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException, DBException, NoHealthRecordsException {;

/**
	 * Returns the ID of the patient to be checked.
	 * 
	 * @return patient ID whose risk we are checking
	 * @author Andy Meneely
	 */
public long getPatientID() {;

/**
	 * Gives the full name of the patient
	 * 
	 * @return Full name of the patient who we are checking
	 * @throws DBException
	 * @throws iTrustException
	 * @author Andy Meneely
	 */
public String getUserName() throws DBException, iTrustException {;

/**
	 * Returns the risks for which this patient is at risk for. All logic has been passed to
	 * {@link ChronicDiseaseMediator} and the subclasses of {@link RiskChecker}.
	 * 
	 * @return List of risks
	 * @throws iTrustException
	 * @throws DBException
	 * @author Andy Meneely
	 */
public List&lt;RiskChecker&gt; getDiseasesAtRisk() throws iTrustException, DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DeclareHCPAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Used by the patient to declare HCPs as &quot;designated&quot;, in editHCPs.jsp.
 * 
 * @author Andy Meneely
 * 
 */
public class DeclareHCPAction {

private TransactionDAO transDAO;
private PatientDAO patientDAO;
private AuthDAO authDAO;
private long loggedInMID;
/**
	 * Sets up defaults
	 * 
	 * @param factory The DAO factory to be used for generating the DAOs for this action.
	 * @param loggedInMID
	 *            This patient
	 * @author Andy Meneely
	 */
public DeclareHCPAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Lists the declared HCPs for this current patient
	 * 
	 * @return Returns a list of the declared HCPs
	 * @throws iTrustException
	 * @author Andy Meneely
	 */
public List&lt;PersonnelBean&gt; getDeclaredHCPS() throws iTrustException {;

/**
	 * Validate an HCP's MID and declare them, if possible
	 * 
	 * @param hcpStr
	 *            The MID of an HCP to declare
	 * @return A status message,
	 * @throws iTrustException
	 * @author Andy Meneely
	 */
public String declareHCP(String hcpStr) throws iTrustException {;

/**
	 * Validate an HCP's MID and undeclare them, if possible
	 * 
	 * @param input
	 *            The MID of an HCP to undeclare
	 * @return
	 * @throws iTrustException
	 * @author Andy Meneely
	 */
public String undeclareHCP(String input) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DrugInteractionAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.DrugInteractionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.DrugInteractionValidator;
/**
 * Used by EditDrugInteraction.jsp to edit and get information about drug interactions.
 * 
 */
public class DrugInteractionAction {

private DrugInteractionDAO drugDAO;
private TransactionDAO tranDAO;
private DrugInteractionValidator validator;
/**
	 * Sets up defaults
	 * 
	 * @param factory The DAO factory to be used for generating the DAOs for this action.
	 * 
	 */
public DrugInteractionAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Method to report an interaction
	 * @param firstDrug
	 * @param secondDrug
	 * @param description
	 * @return
	 */
public String reportInteraction(String firstDrug, String secondDrug, String description) throws iTrustException,FormValidationException{;

/**
	 * Method to delete an interaction
	 * @param firstDrug
	 * @param secondDrug
	 * @return
	 */
public String deleteInteraction(String firstDrug,String secondDrug) throws iTrustException, FormValidationException{;

/**
	 * Method to return a list of drug interactions for a given drug
	 * @param drugCode - The ND Code of the drug
	 * @return
	 */
public List&lt;DrugInteractionBean&gt; getInteractions(String drugCode) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditApptTypeAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ApptTypeBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator;
public class EditApptTypeAction {

private long loggedInMID;
private ApptTypeDAO apptTypeDAO;
private TransactionDAO transDAO;
private ApptTypeBeanValidator validator = new ApptTypeBeanValidator();

public EditApptTypeAction(DAOFactory factory, long loggedInMID) {;

public List&lt;ApptTypeBean&gt; getApptTypes() throws SQLException {;

public String addApptType(ApptTypeBean apptType) throws SQLException, FormValidationException {;

public String editApptType(ApptTypeBean apptType) throws SQLException, FormValidationException {;

public int getDurationByType(String at) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditHealthHistoryAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.forms.HealthRecordForm;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.HealthRecordFormValidator;
/**
 * Edits the health history of a patient, used by editBasicHealth.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditHealthHistoryAction extends PatientBaseAction {

private TransactionDAO transDAO;
private HealthRecordsDAO hrDAO;
private AuthDAO authDAO;
private long loggedInMID;
private HealthRecordFormValidator validator = new HealthRecordFormValidator();

/**
	 * The patient ID is validated by the superclass
	 * 
	 * @param factory The DAOFactory which will be used to generate the DAOs used for this action.
	 * @param loggedInMID The user authorizing this action.
	 * @param pidString The patient (or other user) who is being edited.
	 * @throws iTrustException
	 */
public EditHealthHistoryAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {;

/**
	 * returns the patient name
	 * 
	 * @return patient name
	 * @throws DBException
	 * @throws iTrustException
	 */
public String getPatientName() throws DBException, iTrustException {;

/**
	 * Adds a health record for the given patient
	 * 
	 * @param pid  The patient record who is being edited.
	 * @param hr  The filled out health record form to be added.
	 * @return message - &quot;Information Recorded&quot; or exception's message
	 * @throws FormValidationException
	 */
public String addHealthRecord(long pid, HealthRecordForm hr) throws FormValidationException, iTrustException {;

/**
 * Moves the information from the form to a HealthRecord
 * 
 * @param pid Patient of interest
 * @param form Form to be translated
 * @return a HealthRecord containing all the information in the form
 * @throws FormValidationException
 */
private HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {;

/**
	 * Returns a list of all HealthRecords for the given patient
	 * 
	 * @param pid  The ID of the patient to look up
	 * @return list of HealthRecords
	 * @throws iTrustException
	 */
public List&lt;HealthRecord&gt; getAllHealthRecords(long pid) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditMonitoringListAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Handles changes (adds and removes) to the monitoring list for a certain HCP.
 * 
 */
public class EditMonitoringListAction {

private RemoteMonitoringDAO rmDAO;
private TransactionDAO transDAO;
private AuthDAO authDAO;
private long loggedInMID;
/**
	 * Constructor
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the HCP editing their monitoring list.
	 */
public EditMonitoringListAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Adds a patient to the current HCP's remote monitoring list
	 * 
	 * @param patientMID the patient
	 * @return true if added successfully. False if already in list.
	 * @throws DBException
	 */
public boolean addToList(long patientMID) throws DBException {;

/**
	 * Removes a patient from the current HCP's remote monitoring list
	 * 
	 * @param patientMID the patient
	 * @return true if removed successfully. False if not in list.
	 * @throws DBException
	 */
public boolean removeFromList(long patientMID) throws DBException {;

/**
	 * Returns whether a patient is in an HCP's list already
	 * @param patientMID the patient
	 * @return true if in DB, false otherwise
	 * @throws DBException
	 */
public boolean isPatientInList(long patientMID) throws DBException {;

/**
	 * returns the patient name
	 * 
	 * @return patient name
	 * @throws DBException
	 * @throws iTrustException
	 */
public String getPatientName(long pid) throws DBException, iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditOfficeVisitAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.DrugInteractionBean;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.PrescriptionReportBean;
import edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO;
import edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator;
/**
 * Edits the office visits of a patient Used by editOfficeVisit.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditOfficeVisitAction extends OfficeVisitBaseAction {

private EditOfficeVisitValidator validator = new EditOfficeVisitValidator();

private PersonnelDAO personnelDAO;
private HospitalsDAO hospitalDAO;
private OfficeVisitDAO ovDAO;
private LabProcedureDAO lpDAO;
private TransactionDAO transDAO;
private DrugInteractionDAO drugDAO;
private AllergyDAO allergyDAO;
private PatientDAO patDAO;
private NDCodesDAO ndcDAO;
private long loggedInMID;
private long pid;
/**
	 * Used to identify the subactions that can comprise an office visit action.
	 * Subactions help direct the action's logic because sometimes multiple 
	 * office visit actions can occur within one transaction.
	 */
/**
	 * Patient id and office visit id validated by super class
	 * 
	 * @param factory The DAOFactory to be used in creating the DAOs for this action.
	 * @param loggedInMID The MID of the user who is authorizing this action.
	 * @param pidString The patient who this action is performed on.
	 * @param ovIDString The ID of the office visit in play.
	 * @throws iTrustException
	 */
public EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString) throws iTrustException {;

/**
	 * Returns the office visit bean for the office visit
	 * 
	 * @return the OfficeVisitBean of the office visit
	 * @throws iTrustException
	 */
public OfficeVisitBean getOfficeVisit() throws iTrustException {;

/**
	 * Returns a list of the lab procedures that have been done in an office visit.
	 * 
	 * @param mid the doctor the visit was with
	 * @param ovid the office visit's id
	 * @return a list of the lab procedures that were done in that visit
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getLabProcedures(long mid, long ovid) throws DBException {;

/**
	 * This is a list of all hospitals, ordered by the office visit's hcp FIRST
	 * 
	 * @param hcpID
	 * @return
	 * @throws iTrustException
	 */
public List&lt;HospitalBean&gt; getHospitals(long hcpID) throws iTrustException {;

/**
	 * Combines two lists of hospitals
	 * 
	 * @param hcpsHospitals hospitals the HCP is assigned to
	 * @param allHospitals all hopsitals
	 * @return the combined list
	 */
private List&lt;HospitalBean&gt; combineLists(List&lt;HospitalBean&gt; hcpsHospitals, List&lt;HospitalBean&gt; allHospitals) {;

/**
	 * Updates the office visit with information from the form passed in
	 * 
	 * @param form
	 *            information to update
	 * @return &quot;success&quot; or exception's message
	 * @throws FormValidationException
	 */
public String updateInformation(EditOfficeVisitForm form) throws FormValidationException {;

public String hasInteraction(String drug, String pid, String startdate, String enddate) throws iTrustException{;

public String  isAllergyOnList(String patMID, String ndcode) throws iTrustException{;

/**
	 * 
	 * Sends e-mail regarding the prescribed dangerous drug.
	 * 
	 * @param hcpID HCP the prescription is made by
	 * @param patID ID of the patient prescription is for
	 * @param problem The allergy and/or interaction that is the problem
	 * @return the sent e-mail
	 * @throws DBException
	 */	
public Email makeEmailApp(long hcpID, String patID, String problem) throws DBException, iTrustException {;

/**
 * Adds a prescription to an office visit
 * 
 * @param form the information about the prescription
 * @param ovID the id for the office visit
 * @throws DBException
 * @throws FormValidationException
 */
private void checkAddPrescription(EditOfficeVisitForm form, long ovID) throws DBException, FormValidationException {;

/**
	 * Updates the office visit.
	 * 
	 * @param form form with all the information
	 * @throws DBException
	 * @throws FormValidationException
	 */
private void updateOv(EditOfficeVisitForm form) throws DBException, FormValidationException {;

/**
	 * Adds a diagnosis or a procedure to an office visit
	 * 
	 * @param action the type of action to add
	 * @param code the CPT code of the action
	 * @param visitID the office visit to add the action to
	 * @param dateOfDeath the date of death, if needed
	 * @return true if the operation completed; false if the code was null
	 * @throws DBException
	 * @throws iTrustException
	 */
private boolean checkAddSubAction(OVSubAction action, String code, long visitID, String dateOfDeath) throws DBException, iTrustException {;

private boolean checkAddSubAction(OVSubAction action, String code, long visitID, String dateOfDeath, String hcpid) throws DBException, iTrustException {;

/**
	 * Removes an action from an office visit
	 * 
	 * @param action type of action to remove
	 * @param input id for the action to remove
	 * @return true if the operation completed; false if the code was null
	 * @throws DBException
	 */
private boolean checkRemoveSubAction(OVSubAction action, String input) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditPHRAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.FamilyDAO;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator;
import edu.ncsu.csc.itrust.risk.RiskChecker;
import edu.ncsu.csc.itrust.validate.AllergyBeanValidator;
/**
 * Edits the patient health record for a given patient Used by editPHR.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditPHRAction extends PatientBaseAction {

private DAOFactory factory;
private PatientDAO patientDAO;
private AllergyDAO allergyDAO;
private FamilyDAO familyDAO;
private HealthRecordsDAO hrDAO;
private OfficeVisitDAO ovDAO;
private TransactionDAO transDAO;
private ICDCodesDAO icdDAO;
private long loggedInMID;
private ChronicDiseaseMediator diseaseMediator;
private PersonnelDAO personnelDAO;
private PersonnelBean HCPUAP;
private PatientBean patient;
private EmailUtil emailutil;
/**
	 * Super class validates the patient id
	 * 
	 * @param factory The DAOFactory to be used in creating DAOs for this action.
	 * @param loggedInMID The MID of the currently logged in user who is authorizing this action.
	 * @param pidString The MID of the patient whose personal health records are being added.
	 * @throws iTrustException
	 * @throws DBException
	 * @throws NoHealthRecordsException
	 */
public EditPHRAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException, DBException {;

/**
	 * Adds an allergy to the patient's records
	 * 
	 * @param pid
	 * @param description
	 * @return &quot;Allergy Added&quot;, exception message, a list of invalid fields, or &quot;&quot; (only if description is
	 *         null)
	 * @throws iTrustException
	 */
public String updateAllergies(long pid, String description) throws iTrustException {;

/**
	 * Returns a PatientBean for the patient
	 * 
	 * @return PatientBean
	 * @throws iTrustException
	 */
public PatientBean getPatient() throws iTrustException {;

/**
	 * Returns a list of AllergyBeans for the patient
	 * 
	 * @return list of AllergyBeans
	 * @throws iTrustException
	 */
public List&lt;AllergyBean&gt; getAllergies() throws iTrustException {;

/**
	 * Returns a list of FamilyMemberBeans for the patient
	 * 
	 * @return list of FamilyMemberBeans
	 * @throws iTrustException
	 */
public List&lt;FamilyMemberBean&gt; getFamily() throws iTrustException {;

/**
	 * Returns a list of HealthRecords for the patient
	 * 
	 * @return
	 * @throws iTrustException
	 */
public List&lt;HealthRecord&gt; getAllHealthRecords() throws iTrustException {;

/**
	 * Returns a list of OfficeVisitBeans
	 * 
	 * @return
	 * @throws iTrustException
	 */
public List&lt;OfficeVisitBean&gt; getAllOfficeVisits() throws iTrustException {;

/**
	 * Returns a complete OfficeVisitBean given a visitID
	 * 
	 * @return
	 * @throws iTrustException
	 */
public OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {;

/**
	 * Returns a list of diseases for which the patient is at risk
	 * 
	 * @return list of RiskCheckers
	 * @throws iTrustException
	 * @throws DBException
	 */
public List&lt;RiskChecker&gt; getDiseasesAtRisk() throws NoHealthRecordsException,iTrustException,DBException {;

/**
	 * Checks to see if a particular family member has high blood pressure
	 * 
	 * @param member the family member to check
	 * @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure
	 * @throws iTrustException
	 */
public boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if a particular family member has high cholesterol
	 * 
	 * @param member the family member to check
	 * @return true if the family member has high cholesterol.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	
public boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if a particular family member has diabetes
	 * 
	 * @param member the family member to check
	 * @return true if the family member has diabetes.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	
public boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if a particular family member has cancer
	 * 
	 * @param member the family member to check
	 * @return true if the family member has cancer.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	
public boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if a particular family member has heart disease
	 * 
	 * @param member the family member to check
	 * @return true if the family member has heart disease.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	
public boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if a particular family member smokes
	 * 
	 * @param member the family member to check
	 * @return true if the family member smokes.  False if there are no records or the family member does not
	 * @throws iTrustException
	 */	
public boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if the family member is dead and returns their cause of death if so
	 * 
	 * @param member the family member to check
	 * @return the cause of death if there is one; otherwise null
	 * @throws iTrustException
	 */
public String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {;

/**
	 * Creates a fake e-mail to notify the user that their records have been altered.
	 * 
	 * @return the e-mail to be sent
	 * @throws DBException
	 */
private Email makeEmail() throws DBException{;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditPatientAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.PatientValidator;
import edu.ncsu.csc.itrust.EmailUtil;
/**
 * Edits a patient Used by editPatient.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditPatientAction extends PatientBaseAction {

private TransactionDAO transDAO;
private PatientValidator validator = new PatientValidator();

private PatientDAO patientDAO;
private long loggedInMID;
private EmailUtil emailutil;
/**
	 * The super class validates the patient id
	 * 
	 * @param factory The DAOFactory used to create the DAOs for this action.
	 * @param loggedInMID The MID of the user who is authorizing this action.
	 * @param pidString The MID of the patient being edited.
	 * @throws iTrustException
	 */
public EditPatientAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {;

/**
	 * Takes the information out of the PatientBean param and updates the patient's information
	 * 
	 * @param p
	 *            the new patient information
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
public void updateInformation(PatientBean p) throws iTrustException, FormValidationException {;

/**
	 * Returns a PatientBean for the patient
	 * 
	 * @return the PatientBean
	 * @throws DBException
	 */
public PatientBean getPatient() throws DBException {;

/**
	 *  Creates and e-mail to inform the patient that their information has been updated.
	 *  
	 * @return the email with the notice
	 * @throws DBException
	 */
private Email makeEmail() throws DBException{;

public void editMessageFilter(String filter) throws iTrustException, FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditPersonnelAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.action.base.PersonnelBaseAction;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.PersonnelValidator;
/**
 * Edits the designated personnel Used by admin/editPersonnel.jsp, staff/editMyDemographics.jsp,
 * editPersonnel.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditPersonnelAction extends PersonnelBaseAction {

private long loggedInMID;
private PersonnelDAO personnelDAO;
private TransactionDAO transDAO;
private AuthDAO authDAO;
private PersonnelValidator validator = new PersonnelValidator();;

/**
	 * Super class validates the patient id
	 * 
	 * @param factory The DAOFactory used to create the DAOs for this action.
	 * @param loggedInMID The MID of the user editing this personnel.
	 * @param pidString The ID of the user being edited.
	 * @throws iTrustException
	 */
public EditPersonnelAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {;

/**
	 * Takes information from the personnelForm param and updates the patient
	 * 
	 * @param personnelForm
	 *            PersonnelBean with new information
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
public void updateInformation(PersonnelBean personnelForm) throws iTrustException, FormValidationException {;

public void editMessageFilter(String filter) throws iTrustException, FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditPrescriptionAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Edits a patient's prescription information.  Used by hcp-uap/editPrescription.jsp
 * @author Ben Smith
 */
public class EditPrescriptionAction {

private OfficeVisitDAO ovDAO;
/**
	 * Creates a new action by initializing the office visit
	 * database access object.
	 * 
	 * @param factory
	 * @throws iTrustException
	 */
public EditPrescriptionAction(DAOFactory factory) throws iTrustException {;

/**
	 * Edits an existing prescription in the database.
	 * 
	 * @param pres The prescription bean that has been changed.
	 * @throws DBException
	 */
public void editPrescription(PrescriptionBean pres) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditRepresentativesAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Edits a patient's personal representatives. Used by hcp/editRepresentatives.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EditRepresentativesAction extends PatientBaseAction {

private PatientDAO patientDAO;
private TransactionDAO transDAO;
private AuthDAO authDAO;
private long loggedInMID;
/**
	 * Super class validates the patient mid
	 * 
	 * @param factory The DAOFactory used in creating the DAOs for this action.
	 * @param loggedInMID The MID of the patient editing his/her representatives.
	 * @param pidString The MID of the representative in question.
	 * @throws iTrustException
	 */
public EditRepresentativesAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {;

/**
	 * Return a list of patients that pid represents
	 * 
	 * @param pid The id of the personnel we are looking up representees for.
	 * @return a list of PatientBeans
	 * @throws iTrustException
	 */
public List&lt;PatientBean&gt; getRepresented(long pid) throws iTrustException {;

/**
	 * Makes the patient (pid) represent the input mid parameter
	 * 
	 * @param pidString
	 *            the mid of the person who will be represented (the representee)
	 * @return a message
	 * @throws iTrustException
	 */
public String addRepresentative(String pidString) throws iTrustException {;

/**
	 * Makes the patient (pid) no longer represent the input mid param
	 * 
	 * @param input
	 *            the mid of the person be represented (representee)
	 * @return a message
	 * @throws iTrustException
	 */
public String removeRepresentative(String input) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EmergencyReportAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Calendar;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.enums.PrescriptionAlerts;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
/**
 * Creates a new Emergency Report Used by emergencyReport.jsp
 * 
 * @author laurenhayward
 * 
 */
public class EmergencyReportAction extends PatientBaseAction {

private TransactionDAO transDAO;
private PatientDAO patientDAO;
private AllergyDAO allergyDAO;
private OfficeVisitDAO ovDAO;
private PatientBean pb;
private EmailUtil emailutil;
private long loggedInMID;
/**
	 * The super class handles validating the pid Logs viewing of the report
	 * 
	 * @param factory The DAOFactory used in creating the DAOs for this action.
	 * @param loggedInMID The MID of the user who is looking at the emergency report.
	 * @param pidString The ID of the patient whose report is being generated.
	 * @throws iTrustException
	 */
public EmergencyReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {;

/**
	 * Returns the patient's name
	 * 
	 * @return patient's full name
	 */
public String getPatientName() {;

/**
	 * Returns the patient's age
	 * 
	 * @return patient's age
	 */
public String getPatientAge() {;

/**
	 * Returns the patient's gender
	 * 
	 * @return patient's gender
	 */
public String getPatientGender() {;

/**
	 * Returns the patient's emergency contact
	 * 
	 * @return patient's emergency contact
	 */
public String getPatientEmergencyContact() {;

/**
	 * Returns the patient's blood type
	 * 
	 * @return the patient's blood type
	 */
public String getBloodType() {;

/**
	 * Returns a list of allergies for the given patient
	 * 
	 * @return a list of AllergyBeans
	 * @throws iTrustException
	 */
public List&lt;AllergyBean&gt; getAllergies() throws iTrustException {;

/**
	 * Returns a list of prescriptions the patient is currently taking
	 * 
	 * @return a list of PrescriptionBeans for which the patient is currently taking
	 * @throws iTrustException
	 */
public List&lt;PrescriptionBean&gt; getCurrentPrescriptions() throws iTrustException {;

/**
	 * Returns a list of diagnoses that are in the range indicated by the DiagnosisRange enum
	 * 
	 * @return list of DiagnosisBeans
	 * @throws iTrustException
	 */
public List&lt;DiagnosisBean&gt; getWarningDiagnoses() throws iTrustException {;

/**
	 * Returns a list of prescriptions the patient is currently taking
	 * 
	 * @return a list of PrescriptionBeans for which the patient is currently taking
	 * @throws iTrustException
	 */
public List&lt;ProcedureBean&gt; getImmunizations() throws iTrustException {;

/**
	 * Creates a fake e-mail to notify the user that an emergency report has been created and viewed.
	 * 
	 * @return the e-mail to be sent
	 * @throws DBException
	 */
private Email makeEmail() throws DBException{;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_GenerateCalendarAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.action.EditApptTypeAction;
import edu.ncsu.csc.itrust.action.ViewMyApptsAction;
import edu.ncsu.csc.itrust.action.ViewMyRecordsAction;
import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import java.util.List;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Calendar;
/**
 * Action class for calendar.jsp
 * @author Software Engineering Team 13, 2010 &quot;Project Zephyr&quot;
 *
 */
public class GenerateCalendarAction {

private ViewMyApptsAction a_action;
private EditApptTypeAction types;
private ViewMyRecordsAction r_action;
private List&lt;ApptBean&gt; send;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is viewing the calendar
	 */
public GenerateCalendarAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Return the send request for an AppointmentBean
	 * @return the send request for an AppointmentBean
	 */
public List&lt;ApptBean&gt; getSend() {;

/**
	 * Check appointments appearing on the calendar for conflicts 
	 * with other appointments on the calendar. 
	 * 
	 * The array from this method is used to determine what appointments
	 * will appear in bold on the calendar.
	 * 
	 * @return An array of items that are in conflict with other items.
	 * @throws SQLException
	 */
public boolean[] getConflicts() throws SQLException {;

/**
	 * Creates a hash table with all of the Appointments to be 
	 * displayed on the calendar for the month and year being viewed.
	 * 
	 * @param thisMonth The month of the calendar to be rendered
	 * @param thisYear The year of the calendar to be rendered
	 * @return A Hashtable containing the AppointmentBeans to be rendered
	 * @throws SQLException
	 */
public Hashtable&lt;Integer, ArrayList&lt;ApptBean&gt;&gt; getApptsTable(int thisMonth, int thisYear) throws SQLException {;

/**
	 * Creates a hash table with all of the Office Visits to be 
	 * displayed on the calendar for the month and year being viewed.
	 * 
	 * @param thisMonth The month of the calendar to be rendered
	 * @param thisYear The year of the calendar to be rendered
	 * @return A Hashtable containing the OfficeVisitBeans to be rendered
	 * @throws SQLException
	 */
public Hashtable&lt;Integer, ArrayList&lt;OfficeVisitBean&gt;&gt; getOfficeVisitsTable(int thisMonth, int thisYear) throws iTrustException {;

/**
	 * Creates a hash table with all of the lab procedures to be 
	 * displayed on the calendar for the month and year being viewed.
	 * 
	 * @param thisMonth The month of the calendar to be rendered
	 * @param thisYear The year of the calendar to be rendered
	 * @return A Hashtable containing the LabProcedureBeans to be rendered
	 * @throws SQLException
	 */
public Hashtable&lt;Integer, ArrayList&lt;LabProcedureBean&gt;&gt; getLabProceduresTable(int thisMonth, int thisYear) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_GetUserNameAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Handles Getting the person's name associated with a certain mid Used by getUser.jsp
 * 
 * @author laurenhayward
 * 
 */
public class GetUserNameAction {

private DAOFactory factory;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used for creating the DAOs for this action.
	 */
public GetUserNameAction(DAOFactory factory) {;

/**
	 * Returns the person's name that matches the inputMID param
	 * 
	 * @param inputMID The MID to look up.
	 * @return the person's name
	 * @throws DBException
	 * @throws iTrustException
	 */
public String getUserName(String inputMID) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_GetVisitRemindersAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Calendar;
import edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.beans.VisitFlag;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.enums.Gender;
/**
 * Gets the VisitReminders for a given patient Used by visitReminders.jsp
 * 
 * @author laurenhayward
 * 
 */
public class GetVisitRemindersAction {

/**
	 * Reminder Type enumeration.
	 */
private String typeName;
private ReminderType(String typeName) {;

private static final HashMap&lt;String, ReminderType&gt; map = new HashMap&lt;String, ReminderType&gt;();

/**
		 * Gets the ReminderType for the name passed as a param
		 * 
		 * @param name
		 * @return the ReminderType associated with the name
		 */
public static ReminderType getReminderType(String name) {;

/**
		 * Returns the type name as a string
		 * 
		 * @return
		 */
public String getTypeName() {;

/**
	 * 
	 * Begin GetVisitRemindersAction code
	 * 
	 */
private TransactionDAO transDAO;
private VisitRemindersDAO visitReminderDAO;
private PatientDAO patientDAO;
private long loggedInMID;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID MID of the person who is logged in
	 * @throws iTrustException
	 */
public GetVisitRemindersAction(DAOFactory factory, long loggedInMID) throws iTrustException {;

/**
	 * Returns a list of VisitReminderReturnForms for the type passed in as a param
	 * 
	 * @param type
	 *            the ReminderType
	 * @return the list of VisitReminderReturnForms
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
public List&lt;VisitReminderReturnForm&gt; getVisitReminders(ReminderType type) throws iTrustException, FormValidationException {;

/**
	 * Gets a list of anyone who need immunizations
	 * 
	 * @param mid the HCP whose patients are being checked
	 * @return a list of all the people who need immunizations--done in a visit reminder
	 * @throws iTrustException
	 */
private List&lt;VisitReminderReturnForm&gt; getImmunizationNeeders(long mid) throws iTrustException {;

/**
	 * Checks a patient to see what immunizations they need
	 * 
	 * @param pid patient to be checked
	 * @return patient list of those lacking immunizations according to the schedule
	 */
private String checkImmunizations(long pid) throws iTrustException {;

/**
	 * Checks to see if a patient needs the HPV immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the date is
	 * @return when the immunization should be given
	 */
public static String testHPV(int count, long patientAge, long time) {;

/**
	 * Checks to see if a patient needs the Hepatits A immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
public static String testHepA(int count, long patientAge, long time) {;

/**
	 * Checks to see if a patient needs the Varicella immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
public static String testVaricella(int count, long patientAge, long time) {;

/**
	 * Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
public static String testMeasles(int count, long patientAge, long time) {;

/**
	 * Checks to see if a patient needs the Polio immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
public static String testPolio(int count, long patientAge, long time) {;

/**
	 * Checks to see if a patient needs the Pneumococcal immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
public static String testPneumo(int count, long patientAge, long time, long firstDoseTime) {;

/**
	 * Checks to see if a patient needs the Haemophilus Infulenzae immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
public static String testHaemoFlu(int count, long patientAge, long time, long firstDoseTime) {;

/**
	 * Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
public static String testDipTet(int count, long patientAge, long time) {;

/**
	 * Checks to see if a patient needs the Rotavirus immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
public static String testRotaVirus(int count, long patientAge, long time) {;

/**
	 * Checks to see if a patient needs the Hepatitis B immunization
	 * 
	 * @param count which immunization they are on
	 * @param patientAge how old the patient is
	 * @param time what the current date is
	 * @return when the immunization should be given
	 */
public static String testHepB(int count, long patientAge, long time) {;

/**
	 * Removes duplicates from a list of VisitReminderReturnForms
	 * 
	 * @param patients list of visit remindersto be cleaned up
	 * @return cleaned up list of visit reminders
	 */
private List&lt;VisitReminderReturnForm&gt; stripDupes(List&lt;VisitReminderReturnForm&gt; patients) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_LabProcHCPAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import java.util.ArrayList;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.validate.LabProcedureValidator;
/**
 * Action class for LabProcHCP.jsp.
 * 
 * @extends LabProcUAPAction
 */
public class LabProcHCPAction extends LabProcUAPAction {

private TransactionDAO transDAO;
private LabProcedureDAO lpDAO;
private OfficeVisitDAO ovDAO;
private LabProcedureValidator validator;
/**
	 * Sets up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID  MID for the logged in HCP
	 */
public LabProcHCPAction(DAOFactory factory, long loggedInMID) {;

/**
	 * This method sorts by LOINC and returns the list
	 * 
	 * @param id the ID to sort the list by
	 * @return List sorted by LOINC
	 */
public List&lt;LabProcedureBean&gt; sortByLOINC(long id) throws DBException {;

/**
	 * Returns a list of all the lab procedures for the next month
	 * 
	 * @return all the lab procedures for the next month
	 */
public List&lt;LabProcedureBean&gt; getLabProcForNextMonth() throws DBException {;

/**
	 * Changes the privacy settings
	 * 
	 * @param x the ID of the procedure to change 
	 * 
	 */
public void changePrivacy(long x) throws DBException, FormValidationException {;

/**
	 * Checks to see if the logged in HCP is the one who made the procedure.  Used to generate links for page to edit OfficeVisit
	 * 
	 * @param x the ID of the HCP to check
	 * 
	 */
public boolean checkAccess(long x) throws DBException, FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_LabProcUAPAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.Arrays;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.validate.LabProcedureValidator;
/**
 * Class for LabProcUAP.jsp.  Handles lab procedures for UAPs
 */
public class LabProcUAPAction {

private TransactionDAO transDAO;
private LabProcedureDAO lpDAO;
private LabProcedureValidator validator;
private DAOFactory factory;
/**
 * Setup 
 * @param factory The DAOFactory used to create the DAOs used in this action.
 * @param loggedInMID UAP who is logged in
 */
public LabProcUAPAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Updates a lab procedure
	 * 
	 * @param b the procedure to update
	 * @throws DBException
	 * @throws FormValidationException
	 */
public void updateProcedure(LabProcedureBean b) throws DBException, FormValidationException{;

/**
	 * Sends an e-mail informing the patient that their procedure has been updated
	 * 
	 * @param b the procedure that was updated
	 * @return an e-mail to the patient with the notice
	 * @throws DBException
	 */
private Email makeEmail(LabProcedureBean b) throws DBException{;

/**
	 * Returns a list of all the lab procedures
	 * 
	 * @param id MID of the UAP viewing the procedures 
	 * @return a list of all the lab procedures for that UAP
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; viewProcedures(long id) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_LoginFailureAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Please note that this is not the best mitigation for Denial of Service attacks. The better way would be to
 * keep track of password failure attempts per user account, NOT with easily spoofable ip addresses. The
 * reason this feature is implemented with ip addresses is a limitation in Tomcat authentication (actually,
 * it's technically JSP's fault for not specifying a form of account lockout). &lt;br /&gt;
 * &lt;br /&gt;
 * All authentication in this application is done by the container (Tomcat), which doesn't support account
 * lockout. So our options would be (a) to implement our own authentication (yuck!), or (2) to extend the
 * JDBCRealm class in the Tomcat source code and add the logic. I've looked into this and it's actually pretty
 * easy. The ONLY reason it's not implemented here is that the code would be buried in a jar in your Tomcat
 * installation - not very educational for those who want to learn about authentication in webapps. Feel free
 * to change this; extending this would be perfectly acceptable.
 * 
 * @author Andy
 * 
 */
public class LoginFailureAction {

public static final int MAX_LOGIN_ATTEMPTS ;
private AuthDAO authDAO;
private String ipAddr;
private TransactionDAO transactionDAO;
/**
	 * Set up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param ipAddr The IP address of the user making the login attempt.
	 */
public LoginFailureAction(DAOFactory factory, String ipAddr) {;

/**
	 * Calls authDAO to record the login failure in the database
	 * 
	 * @return How many login failure attempts or a DBException message
	 */
public String recordLoginFailure() {;

/**
	 * Checks to see if the current user can login (#failures&lt;3)
	 * 
	 * @return true if the user is valid to login
	 */
public boolean isValidForLogin() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ManageHospitalAssignmentsAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Manages the assignment of HCPs to hospitals Used by hospitalAssignments.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ManageHospitalAssignmentsAction {

private TransactionDAO transDAO;
private PersonnelDAO personnelDAO;
private HospitalsDAO hospitalsDAO;
private long loggedInMID;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user managing hospitals.
	 */
public ManageHospitalAssignmentsAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Returns a list of hospitals to which the given mid is not currently assigned
	 * 
	 * @param midString
	 * @return list of HospitalBeans
	 * @throws iTrustException
	 */
public List&lt;HospitalBean&gt; getAvailableHospitals(String midString) throws iTrustException {;

/**
	 * Returns a list of hospitals to which the given mid is currently assigned
	 * 
	 * @param midString
	 * @return list of HosptialBeans
	 * @throws iTrustException
	 */
public List&lt;HospitalBean&gt; getAssignedHospitals(String midString) throws iTrustException {;

/**
	 * Assigns the mid to the hospital
	 * 
	 * @param midString The MID of the person assigned to the hospital as a String.
	 * @param hospitalID The ID of the hospital.
	 * @return message indicating the status of the assignment
	 * @throws iTrustException
	 */
public String assignHCPToHospital(String midString, String hospitalID) throws iTrustException {;

/**
	 * Removes HCPs assignment to the designated hospital
	 * 
	 * @param midString
	 *            the HCP's mid
	 * @param hospitalID
	 *            the hospital id to be removed
	 * @return Status message
	 * @throws iTrustException
	 */
public String removeHCPAssignmentToHospital(String midString, String hospitalID) throws iTrustException {;

/**
	 * Removes all hospital assignments for the given hcp mid
	 * 
	 * @param midString
	 *            HCP's mid
	 * @return status message
	 * @throws iTrustException
	 */
public int removeAllAssignmentsFromHCP(String midString) throws iTrustException {;

/**
	 * Checks if the hcpID param is a HCP
	 * 
	 * @param hcpID
	 *            the String to be checked
	 * @return the mid as a long if the hcpID is a HCP's mid
	 * @throws iTrustException
	 */
public long checkHCPID(String hcpID) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_MonitorAdverseEventAction</id>
            <content>package edu.ncsu.csc.itrust.action;

/**
 * Used by PHAs to view the reported adverse events
 */
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
public class MonitorAdverseEventAction {

private long loggedInMID;
private EmailUtil emailer;
private PatientDAO patientDAO;
private AdverseEventDAO adverseEventDAO;
private TransactionDAO transactionDAO;
private SendMessageAction messenger;
/**
	 * Constructor 
	 * @param factory
	 * @param loggedInMID
	 */
public MonitorAdverseEventAction(DAOFactory factory, long loggedInMID){;

/**
	 * Returns a list of reports between specified dates
	 * @param isPrescription Boolean to return prescriptions or immunizations
	 * @param start The starting date
	 * @param end The ending date
	 * @return the list of events
	 * @throws iTrustException
	 * @throws FormValidationException
	 * @throws SQLException
	 * @throws ParseException
	 */
public List&lt;AdverseEventBean&gt; getReports(boolean isPrescription, String start, String end)throws iTrustException, FormValidationException, SQLException, ParseException {;

/**
	 * Returns the patient's name
	 * @param MID the MID of the patient to return the name for.
	 * @return
	 */
public String getName(long MID) {;

/**
	 * Sends an e-mail to a patient requesting more information
	 * @param patientMID The patient to receive the message
	 * @param message The message
	 * @return string for testing purposes
	 * @throws DBException
	 */
public String sendEmail(long patientMID, String message) throws DBException{;

/**
	 * Method used to remove an adverse event report
	 * 
	 * @param id the id of the report to be removed
	 * @throws DBException
	 * @throws iTrustException
	 */
public void remove(int id) throws DBException, iTrustException, FormValidationException{;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_MyDiagnosisAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.io.Serializable;
import java.util.*;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.HCPDiagnosisBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.beans.SurveyBean;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Edits the privacy levels of diagnoses, used by myDiagnoses.jsp
 * 
 * @author laurenhayward
 * 
 */
public class MyDiagnosisAction {

private OfficeVisitDAO officeVisitDAO;
private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
private SurveyDAO surveyDAO;
private TransactionDAO transactionDAO;
private LabProcedureDAO labprocDAO;
private long loggedInMID;
/**
	 * Set up for defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is looking at their diagnoses.
	 * @throws iTrustException
	 */
public MyDiagnosisAction(DAOFactory factory, long loggedInMID) throws iTrustException {;

/**
	 * Returns a list of DiagnosisBeans for the patient
	 * 
	 * @return the list of DiagnosisBeans
	 * @throws DBException
	 */
public List&lt;DiagnosisBean&gt; getDiagnoses() throws DBException {;

/**
	 * Returns a list of all the HCPs who have a particular diagnosis
	 * 
	 * @param icdcode the diagnosis of interest
	 * @return the list of HCPs
	 * @throws DBException
	 */
public List&lt;HCPDiagnosisBean&gt; getHCPByDiagnosis(String icdcode) throws DBException {;

/**
	 * Looks up all the prescriptions given by a certain HCP with the same ICD code.
	 * @param hcpid The MID of the HCP
	 * @param icdcode The ICD code of the prescription we are looking up.
	 * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.
	 * @throws DBException
	 */
public List&lt;PrescriptionBean&gt; getPrescriptionsByHCPAndICD(long hcpid, String icdcode) throws DBException {;

/**
	 * Checks to see what HCP has had the most experience with a diagnosis
	 *
	 */
static class HCPDiagnosisBeanComparator implements Comparator&lt;HCPDiagnosisBean&gt;, Serializable {

private static final long serialVersionUID ;
/**
		 * Compares one HCP with another
		 * 
		 * @param a the first HCP
		 * @param b the second HCP
		 * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0
		 */
public int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PrescriptionReportAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import edu.ncsu.csc.itrust.ParameterUtil;
import edu.ncsu.csc.itrust.action.base.PatientBaseAction;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PrescriptionReportBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Handles Prescription Reports for the given pid Used by hcp-uap/getPrescriptionReport.jsp,
 * hcp-uap/viewPrescriptionRecord.jsp, patient/getMyPrescriptionReport.jsp, &amp;
 * patient/viewMyPrescriptionRecord.jsp
 * 
 * @author laurenhayward
 * 
 */
public class PrescriptionReportAction extends PatientBaseAction {

private boolean isRepresenting ;
private OfficeVisitDAO ovDAO;
private TransactionDAO transDAO;
private PatientDAO patientDAO;
private long loggedInMID;
/**
	 * Super class validates pidString
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is making a prescription report.
	 * @param pidString The MID of the patient in question.
	 * @throws iTrustException
	 * @throws DBException
	 * @throws NoHealthRecordsException
	 */
public PrescriptionReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException, DBException, NoHealthRecordsException {;

/**
	 * Takes the patient's representee as a param and returns it as a long if the patient represents the input
	 * param
	 * 
	 * @param input
	 *            the patient's representee mid
	 * @return representee's mid as a long
	 * @throws iTrustException
	 */
public long representPatient(String input) throws iTrustException {;

/**
	 * Returns a list of all office visits for the pid
	 * 
	 * @return list of OfficeVisitBeans for the pid
	 * @throws DBException
	 */
public List&lt;OfficeVisitBean&gt; getAllOfficeVisits() throws DBException {;

/**
	 * Used by the JSP, passes a Map from the html form and a list of OfficeVisitBeans Returns a list of
	 * PrescriptionReportBeans
	 * 
	 * @param params A java.util.HashMap containing the parameter map.
	 * @param officeVisits A java.util.List of OfficeVisitBeans for the visits.
	 * @return list of PrescriptionReportBeans
	 * @throws DBException
	 */
// suppressing warnings because JSP doesn't have a generic for request.getParameterMap()
public List&lt;PrescriptionReportBean&gt; getPrescriptionReports(Map params, List&lt;OfficeVisitBean&gt; officeVisits) throws DBException {;

/**
	 * Returns a PatientBean for the pid
	 * 
	 * @return PatientBean
	 * @throws DBException
	 */
public PatientBean getPatient() throws DBException {;

/**
	 * Used by the JSP, which passes the param map from the html form and a list of OfficeVisitBeans Returns a
	 * string that will be used to create a new url. The JSP will pull params from this url to create the
	 * prescription report.
	 * 
	 * @param paramMap A java.util.HashMap of the parameters.
	 * @param officeVisits A java.util.List of OfficeVisitBeans.
	 * @return the string that will be used in the new url
	 * @throws FormValidationException
	 * @throws DBException
	 */
// suppressing warnings because JSP doesn't have a generic for request.getParameterMap()
public String getQueryString(Map paramMap, List&lt;OfficeVisitBean&gt; officeVisits) throws FormValidationException, DBException {;

/**
	 * Checks office visits
	 * 
	 * @param myParams list of parameters
	 * @param officeVisits list of office visits
	 * @return Returns a java.util.ArrayList of Integers for the given office visits.
	 */
private ArrayList&lt;Integer&gt; checkOfficeVisits(HashMap&lt;String, String&gt; myParams, List&lt;OfficeVisitBean&gt; officeVisits) {;

/**
	 * Builds a query string for office visits
	 * 
	 * @param ovOffsets offsets for the office visits
	 * @return A SQL query in a Java String.
	 */
private String buildQueryString(List&lt;Integer&gt; ovOffsets) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ReferralManagementAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.ReferralBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ReferralDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.exception.DBException;
import java.util.List;
/**
 * Used for referring patients to other HCPs.  The call is made in /auth/hcp/hcpConsultation.jsp 
 */
public class ReferralManagementAction {

private long loggedInMID;
private TransactionDAO transDAO;
private ReferralDAO referralDAO;
/**
	 * Super class validates the patient id
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user managing this referral.
	 * @param pidString The MID of the patient being referred.
	 * @throws iTrustException
	 */
public ReferralManagementAction(DAOFactory factory, long loggedInMID) throws iTrustException {;

/**
	 * Adds a referral bean to the database.
	 * @param r The referral bean to be added.
	 * @throws DBException
	 */
public void sendReferral(ReferralBean r) throws DBException {;

/**
	 * Updates an existing referral bean.
	 * @param r The current referral bean.
	 * @throws DBException
	 */
public void updateReferral(ReferralBean r) throws DBException {;

/**
	 * Gets the referrals the currently logged in MID has sent.
	 * @return A java.util.List of ReferralBeans this MID has sent.
	 * @throws DBException
	 */
public List&lt;ReferralBean&gt; getReferralsSentFromMe() throws DBException {;

/**
	 * Gets the referrals this MID has received.
	 * @return A java.util.List of the ReferralBeans this MID has received.
	 * @throws DBException
	 */
public List&lt;ReferralBean&gt; getReferralsSentToMe() throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ReportAdverseEventAction</id>
            <content>package edu.ncsu.csc.itrust.action;

/**
 * Used for the patient to report adverse events.
 */
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.AdverseEventValidator;
import edu.ncsu.csc.itrust.exception.FormValidationException;
public class ReportAdverseEventAction {

private long loggedInMID;
private EmailUtil emailer;
private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
private AdverseEventDAO adverseEventDAO;
private TransactionDAO transactionDAO;
private long hcpID;
private AdverseEventValidator validator;
public ReportAdverseEventAction(String hcpID, DAOFactory factory, long loggedInMID){;

/**
	 * Constructor used to send e-mails only
	 */
public ReportAdverseEventAction(DAOFactory factory, long loggedInMID){;

/**
	 * Method that sends exactly one e-mail to each MID in the list of Adverse Events
	 * @param aeList The list of adverse Event Beans that need to be acted upon
	 * @return EList The list of e-mails sent for testing purposes
	 */
public Email sendMails(List&lt;AdverseEventBean&gt; aeList) throws iTrustException, FormValidationException, DBException {;

/**
	 * A method used to send a single e-mail. Used in immunizations.
	 * @param aeBean
	 * @return Email returns the Email for testing purposes.
	 */
public Email sendMail (AdverseEventBean aeBean)throws iTrustException, FormValidationException, DBException{;

/**
	 * Method used to add a report to the data base
	 * @param aeBean The adverse event to add
	 * @return a string for testing purposes only
	 * @throws iTrustException
	 * @throws FormValidationException
	 * @throws DBException
	 */
public String addReport(AdverseEventBean aeBean)throws iTrustException, FormValidationException, DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ResetPasswordAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.Arrays;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.ValidationFormat;
/**
 * Manages resetting the password Used by resetPassword.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ResetPasswordAction {

public static final int MAX_RESET_ATTEMPTS ;
private AuthDAO authDAO;
private PatientDAO patientDAO;
private DAOFactory factory;
/**
	 * Set up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 */
public ResetPasswordAction(DAOFactory factory) {;

/**
	 * Checks to see if a user exists with the given mid
	 * 
	 * @param midString The user's MID to check for.
	 * @return 0 if the user does not exist, else the mid of the user as a long
	 */
public long checkMID(String midString) {;

/**
	 * Checks to see if the number of reset password attempts has been exceeded for the given ipAddress
	 * 
	 * @param ipAddress The IPv4 or IPv6 IP address as a String.
	 * @return true if the the number of reset attempts is greater than or equal to MAX_RESET_ATTEMPTS
	 * @throws DBException
	 */
public boolean isMaxedOut(String ipAddress) throws DBException {;

/**
	 * Checks if the given mid matches the given role
	 * 
	 * @param mid
	 *            the mid to be checked
	 * @param role
	 *            the role to be checked
	 * @return true if the mid and role match
	 * @throws iTrustException
	 */
public String checkRole(long mid, String role) throws iTrustException {;

/**
	 * Checks if the answer param is null
	 * 
	 * @param answer the user's security answer
	 * @return answer if not null, else return null
	 */
public String checkAnswerNull(String answer) {;

/**
	 * Returns the security question for the mid param
	 * 
	 * @param mid MID of the user
	 * @return the security question or &quot;&quot; if DBException thrown
	 * @throws iTrustException
	 */
public String getSecurityQuestion(long mid) throws iTrustException {;

/**
	 * Resets the password for the given mid
	 * 
	 * @param mid of the user to have their password reset
	 * @param role what role the user has in iTrust
	 * @param answer answers to their security question
	 * @param password their password
	 * @param confirmPassword their password again
	 * @param ipAddr the ip address the request is coming from
	 * @return status message
	 * @throws FormValidationException
	 * @throws DBException
	 * @throws iTrustException
	 */
public String resetPassword(long mid, String role, String answer, String password, String confirmPassword, String ipAddr) throws FormValidationException, DBException, iTrustException {;

/**
	 * Creates and sends an e-mail about the change
	 * 
	 * @param mid the user who's password was changed
	 * @param role what role they have in iTrust
	 * @return the e-mial that is sent
	 * @throws DBException
	 */
private Email makeEmailApp(long mid, String role) throws DBException{;

/**
	 * Checks to make sure the password is correctly entered twice.
	 * 
	 * @param password the password
	 * @param confirmPassword the password again for confirmation
	 * @throws FormValidationException
	 */
private void validatePassword(String password, String confirmPassword) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SearchUsersAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.DBException;
public class SearchUsersAction {

private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is performing the search.
	 */
public SearchUsersAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Searches for all personnel with the first name and last name specified in the parameter list.
	 * @param firstName The first name to be searched.
	 * @param lastName The last name to be searched.
	 * @return A java.util.List of PersonnelBeans for the users who matched.
	 */
public List&lt;PersonnelBean&gt; searchForPersonnelWithName(String firstName, String lastName) {;

/**
	 * Search for all patients with first name and last name given in parameters.
	 * @param firstName The first name of the patient being searched.
	 * @param lastName The last name of the patient being searched.
	 * @return A java.util.List of PatientBeans
	 */
public List&lt;PatientBean&gt; searchForPatientsWithName(String firstName, String lastName) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SendMessageAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.MessageDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.EMailValidator;
import edu.ncsu.csc.itrust.validate.MessageValidator;
/**
 * Class for SendMessage.jsp.  
 *
 */
public class SendMessageAction {

private long loggedInMID;
private EmailUtil emailer;
private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
private MessageDAO messageDAO;
private TransactionDAO transactionDAO;
private EMailValidator emailVal;
private MessageValidator messVal;
/**
	 * Sets up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user sending the message.
	 */
public SendMessageAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Sends a message
	 * 
	 * @param mBean message to be sent
	 * @throws iTrustException
	 * @throws SQLException
	 */
public void sendMessage(MessageBean mBean) throws iTrustException, SQLException, FormValidationException {;

/**
	 * Returns the patient's name
	 * 
	 * @param mid MId of the patient
	 * @return the name of the patient
	 * @throws iTrustException
	 */
public String getPatientName(long mid) throws iTrustException {;

/**
	 * Returns the personnel's name
	 * 
	 * @param mid MId of the personnel
	 * @return the name of the personnel
	 * @throws iTrustException
	 */
public String getPersonnelName(long mid) throws iTrustException {;

/**
	 * Returns a list of the patients that the logged in HCP represents
	 * 
	 * @return list of the patients that the logged in HCP represents
	 * @throws iTrustException
	 */
public List&lt;PatientBean&gt; getMyRepresentees() throws iTrustException {;

/**
	 * Returns the designated HCPs for the logged in patient.
	 * 
	 * @return designated HCPs for the logged in patient.
	 * @throws iTrustException
	 */
public List&lt;PersonnelBean&gt; getMyDLHCPs() throws iTrustException {;

/**
	 * Returns the designated HCPs for the given patient.
	 * 
	 * @return designated HCPs for the given patient.
	 * @throws iTrustException
	 */
public List&lt;PersonnelBean&gt; getDLHCPsFor(long pid) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SetSecurityQuestionAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.SecurityQA;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.SecurityQAValidator;
/**
 * Handles setting and retrieving the security questions/answers for users Used by
 * patient/editMyDemographics.jsp, staff/editMyDemographics.jsp, staff/editPersonnell.jsp
 * 
 * @author laurenhayward
 * 
 */
public class SetSecurityQuestionAction {

private AuthDAO authDAO;
private long loggedInMID;
/**
	 * Sets up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param rLoggedInMID The MID of the user who is setting their security question.
	 * @throws iTrustException
	 */
public SetSecurityQuestionAction(DAOFactory factory, long rLoggedInMID) throws iTrustException {;

/**
	 * Updates information in the database from the information held in the SecurityQA bean passed as a param
	 * 
	 * @param a
	 *            SecurityQuestionBean that holds new information
	 * @throws Exception
	 */
public void updateInformation(SecurityQA a) throws Exception {;

/**
	 * Returns a SecurityQA bean holding the security info for the currently logged in user
	 * 
	 * @return SecurityQA for loggedInMid
	 * @throws iTrustException
	 */
public SecurityQA retrieveInformation() throws iTrustException {;

/**
	 * Checks to make sure the MID exists in iTrust
	 * 
	 * @param mid MID to check
	 * @return returns the MID if the user is valid, otherwise, throws an exception
	 * @throws iTrustException
	 */
private long checkMID(long mid) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SurveyAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.Calendar;
import edu.ncsu.csc.itrust.beans.SurveyBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * This class is used to add patient survey data to the database.  The office visit ID is linked with the survey ID.  Once the
 * survey is added, the transaction is logged
 *
 */
public class SurveyAction {

private TransactionDAO transDAO;
private SurveyDAO surveyDAO;
/**
	 * Sets up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user taking the survey.
	 */
public SurveyAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Pass the OfficeVistBean along with SurveyBean
	 * @param surveyBean contains data to be added to database
	 * @param visitID The Office Visit ID corresponding to this Survey.
	 * @throws DBException
	 */
public void addSurvey(SurveyBean surveyBean, long visitID) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_UpdateCPTCodeListAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.ProcedureBeanValidator;
/**
 * Updates the CPT Code (Medical Procedures) List Used by editCPTProcedureCodes.jsp
 * 
 * The CPT code set accurately describes medical, surgical, and diagnostic services 
 * and is designed to communicate uniform information about medical services and procedures 
 * among physicians, coders, patients, accreditation organizations, and payers for administrative, 
 * financial, and analytical purposes.
 *
 * @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml
 * @author laurenhayward
 */
public class UpdateCPTCodeListAction {

private long loggedInMID;
private TransactionDAO transDAO;
private CPTCodesDAO cptDAO;
private ProcedureBeanValidator validator = new ProcedureBeanValidator();

/**
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the administrator who is updating the CPTs.
	 */
public UpdateCPTCodeListAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Adds a new cpt code (med procedure)
	 * 
	 * @param proc
	 *            ProcedureBean that holds the new cpt code
	 * @return status message
	 * @throws FormValidationException
	 */
public String addCPTCode(ProcedureBean proc) throws FormValidationException {;

/**
	 * Updates a procedure with new information from the ProcedureBean
	 * 
	 * @param proc
	 *            ProcedureBean with new information (but same CPT code)
	 * @return Status message
	 * @throws FormValidationException
	 */
public String updateInformation(ProcedureBean proc) throws FormValidationException {;

/**
	 * Updates the cpt code
	 * 
	 * @param proc the code to be updated
	 * @return updated code
	 * @throws DBException
	 */
private int updateCode(ProcedureBean proc) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_UpdateHospitalListAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.HospitalBeanValidator;
/**
 * Handles updating the list of hospitals Used by hospitalListing.jsp
 * 
 * @author laurenhayward
 * 
 */
public class UpdateHospitalListAction {

private long performerID;
private HospitalsDAO hospDAO;
private TransactionDAO transDAO;
/**
	 * Set up
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param performerID The MID of the person updating the hospitals.
	 */
public UpdateHospitalListAction(DAOFactory factory, long performerID) {;

/**
	 * Adds a hosptial using the HospitalBean passed as a param
	 * 
	 * @param hosp
	 *            the new hospital listing
	 * @return Status message
	 * @throws FormValidationException
	 */
public String addHospital(HospitalBean hosp) throws FormValidationException {;

/**
	 * Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a
	 * param
	 * 
	 * @param hosp
	 *            the new hospital information with the same hospital id
	 * @return Status message
	 * @throws FormValidationException
	 */
public String updateInformation(HospitalBean hosp) throws FormValidationException {;

/**
	 * Updates hospital
	 * 
	 * @param hosp new information
	 * @return id for the updated hospital
	 * @throws DBException
	 */
private int updateHospital(HospitalBean hosp) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_UpdateICDCodeListAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator;
/**
 * Handles updating the ICD Code (Diagnosis) List Used by editICDCodes.jsp
 * 
 * The International Statistical Classification of Diseases and Related Health Problems 
 * (most commonly known by the abbreviation ICD) provides codes to classify diseases and a 
 * wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and 
 * external causes of injury or disease. 
 * 
 * @see http://www.cdc.gov/nchs/icd9.htm
 * @author laurenhayward
 * 
 */
public class UpdateICDCodeListAction {

private long performerID ;
private ICDCodesDAO icdDAO;
private TransactionDAO transDAO;
private DiagnosisBeanValidator validator = new DiagnosisBeanValidator();

/**
	 * Set up
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param performerID The MID of the person udpating the ICDs.
	 */
public UpdateICDCodeListAction(DAOFactory factory, long performerID) {;

/**
	 * Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param
	 * 
	 * @param diagn
	 *            The new diagnosis (ICD code)
	 * @return Status message
	 * @throws FormValidationException
	 */
public String addICDCode(DiagnosisBean diagn) throws FormValidationException {;

/**
	 * Updates a diagnosis with new information from the DiagnosisBean passed as a param
	 * 
	 * @param diagn
	 *            new information to update (but same code)
	 * @return Status message
	 * @throws FormValidationException
	 */
public String updateInformation(DiagnosisBean diagn) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_UpdateLOINCListAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.LOINCbean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.LOINCDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.LOINCBeanValidator;
/**
 * Handles updating the LOINC Used.
 * 
 * Logical Observation Identifiers Names and Codes (LOINC) is a database and universal
 *  standard for identifying medical laboratory observations. 
 *  
 * @see http://loinc.org/
 */
public class UpdateLOINCListAction {

private long performerID ;
private LOINCDAO lDAO;
private TransactionDAO transDAO;
private LOINCBeanValidator validator = new LOINCBeanValidator();

/**
	 * Sets up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param performerID The MID of the person updating the LOINCs.
	 */
public UpdateLOINCListAction(DAOFactory factory, long performerID) {;

/**
	 * Adds a new LOINC
	 * 
	 * @param diagn
	 *            New LOINC
	 * @return Status message
	 * @throws FormValidationException
	 */
public String add(LOINCbean diagn) throws FormValidationException, iTrustException {;

/**
	 * Updates a LOINC
	 * 
	 * @param diagn
	 *            new information to update (but same code)
	 * @return Status message
	 * @throws FormValidationException
	 */
public String updateInformation(LOINCbean diagn) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_UpdateNDCodeListAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.MedicationBeanValidator;
/**
 * Handles updating the ND Code (Prescription) List Used by editNDCodes.jsp
 * 
 * The National Drug Code (NDC) is a universal product identifier used in the
 * United States for drugs intended for human use.
 * 
 * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
 * @author laurenhayward
 */
public class UpdateNDCodeListAction {

private long performerID ;
private TransactionDAO transDAO;
private NDCodesDAO ndDAO;
private MedicationBeanValidator validator = new MedicationBeanValidator();

/**
	 * Set up defaults.
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param performerID The MID of the user updating the ND lists.
	 */
public UpdateNDCodeListAction(DAOFactory factory, long performerID) {;

/**
	 * Adds a new ND Code (prescription) to the list
	 * 
	 * @param med
	 *            The new ND Code to be added
	 * @return Status message
	 * @throws FormValidationException
	 */
public String addNDCode(MedicationBean med) throws FormValidationException {;

/**
	 * Updates the ND Code with new information from the MedicationBean
	 * 
	 * @param med
	 *            the MedicationBean that holds new information but the same code
	 * @return status message
	 * @throws FormValidationException
	 */
public String updateInformation(MedicationBean med) throws FormValidationException {;

/**
	 * Medication information should already be validated
	 * 
	 * @param med
	 * @return
	 * @throws DBException
	 */
private int updateCode(MedicationBean med) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewAdverseEventAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;
import edu.ncsu.csc.itrust.exception.DBException;
public class ViewAdverseEventAction {

private AdverseEventDAO adEventDAO;
public ViewAdverseEventAction(DAOFactory factory) {;

public AdverseEventBean getAdverseEvent(int id) throws DBException {;

public List&lt;AdverseEventBean&gt; getUnremovedAdverseEventsByCode(String code) throws DBException {;

public String getNameForCode(String code) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewExpiredPrescriptionsAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Handles retrieving beans for viewPrescriptionRecords.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewExpiredPrescriptionsAction {

private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
private TransactionDAO transDAO;
private EmailUtil emailer;
private long loggedInMID;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the expired prescriptions.
	 */
public ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Gets a PatientBean from an MID
	 * 
	 * @param patientID MID of the patient
	 * @return PatientBean for the MID given
	 * @throws iTrustException
	 */
public PatientBean getPatient(long patientID) throws iTrustException {;

/**
	 * Gets the logged in person's representees
	 * 
	 * @return list of PatientBeans holding the representees
	 * @throws iTrustException
	 */
public List&lt;PatientBean&gt; getRepresentees() throws iTrustException {;

/**
	 * Returns the prescribing HCP for a prescription
	 * 
	 * @param prescription item in question
	 * @return HCP who prescribed the prescription
	 * @throws iTrustException
	 */
public PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {;

/**
	 * Returns all the prescriptions for a given patient
	 * 
	 * @param patientID patient in question
	 * @return list of all the prescriptions for that patient
	 * @throws iTrustException
	 */
public List&lt;PrescriptionBean&gt; getPrescriptionsForPatient(long patientID) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewMyAccessLogAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.beans.TransactionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Handles retrieving the log of record accesses for a given user Used by viewAccessLog.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewMyAccessLogAction {

private TransactionDAO transDAO;
private long loggedInMID;
/**
	 * Set up
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person retrieving the logs.
	 */
public ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Returns a list of TransactionBeans between the two dates passed as params
	 * 
	 * @param lowerDate
	 *            the first date
	 * @param upperDate
	 *            the second date
	 * @return list of TransactionBeans
	 * @throws DBException
	 * @throws FormValidationException
	 */
public List&lt;TransactionBean&gt; getAccesses(String lowerDate, String upperDate, boolean getByRole) throws DBException, FormValidationException {;

/**
	 * Returns the date of the first Transaction in the list passed as a param if the list is not empty
	 * otherwise, returns today's date
	 * 
	 * @param accesses A java.util.List of TransactionBeans for the accesses.
	 * @return A String representing the date of the first transaction.
	 */
public String getDefaultStart(List&lt;TransactionBean&gt; accesses) {;

/**
	 * Returns the date of the last Transaction in the list passed as a param if the list is not empty
	 * otherwise, returns today's date
	 * 
	 * @param accesses A java.util.List of TransactionBeans storing the access. 
	 * @return A String representation of the date of the last transaction.
	 */
public String getDefaultEnd(List&lt;TransactionBean&gt; accesses) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewMyApptsAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.ApptDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.iTrustException;
public class ViewMyApptsAction {

private long loggedInMID;
private ApptDAO apptDAO;
private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
public ViewMyApptsAction(DAOFactory factory, long loggedInMID) {;

public List&lt;ApptBean&gt; getMyAppointments() throws SQLException {;

/**
	 * Gets a users's name from their MID
	 * 
	 * @param mid the MID of the user
	 * @return the user's name
	 * @throws iTrustException
	 */
public String getName(long mid) throws iTrustException {;

/**
	 * Get All Appointments for the admins use... may need to change!
	 * @return
	 * @throws SQLException
	 */
public List&lt;ApptBean&gt; getAllAppts()  throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewMyMessagesAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.MessageDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Action class for ViewMyMessages.jsp
 *
 */
public class ViewMyMessagesAction {

private long loggedInMID;
private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
private MessageDAO messageDAO;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the user who is viewing their messages.
	 */
public ViewMyMessagesAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Gets all the messages for the logged in user
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getAllMyMessages() throws SQLException {;

/**
	 * Gets all the messages for the logged in user and sorts by ascending time
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getAllMyMessagesTimeAscending() throws SQLException {;

/**
	 * Gets all the messages for the logged in user and sorts names in ascending order
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getAllMyMessagesNameAscending() throws SQLException {;

/**
	 * Gets all the messages for the logged in user and sorts name in descending order
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getAllMyMessagesNameDescending() throws SQLException {;

/**
	 * Gets all the sent messages for the logged in user
	 * 
	 * @return a list of all the user's sent messages
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getAllMySentMessages() throws SQLException {;

/**
	 * Gets all the messages for the logged in user and sorts by ascending time
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getAllMySentMessagesTimeAscending() throws SQLException {;

/**
	 * Gets all the messages for the logged in user and sorts names in ascending order
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getAllMySentMessagesNameAscending() throws SQLException {;

/**
	 * Gets all the messages for the logged in user and sorts name in descending order
	 * 
	 * @return a list of all the user's messages
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getAllMySentMessagesNameDescending() throws SQLException {;

public String validateAndCreateFilter(String filter) {;

/**
	 * Gets a list of messages for a user based on their filter criteria.
	 * 
	 * @param messages List of all of a user's MessageBeans
	 * @param filter String containing a user's filter criteria.
	 * @return a List of MessageBeans that meet the criteria of the filter.
	 * @throws iTrustException
	 * @throws ParseException
	 */
public List&lt;MessageBean&gt; filterMessages(List&lt;MessageBean&gt; messages, String filter) throws iTrustException, ParseException {;

/**
	 * Gets a patient's name from their MID
	 * 
	 * @param mid the MID of the patient
	 * @return the patient's name
	 * @throws iTrustException
	 */
public String getName(long mid) throws iTrustException {;

/**
	 * Gets a personnel's name from their MID
	 * 
	 * @param mid the MID of the personnel
	 * @return the personnel's name
	 * @throws iTrustException
	 */
public String getPersonnelName(long mid) throws iTrustException {;

/**
	 * Set the state of the MessageBean to read, after 
	 * it is read by a user.
	 * @param mBean MessageBean to be read
	 */
public void setRead(MessageBean mBean) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewMyRecordsAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.ReportRequestBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO;
import edu.ncsu.csc.itrust.dao.mysql.FamilyDAO;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO;
import edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;
import edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Handles patients viewing their own records Used by viewMyRecords.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewMyRecordsAction {

private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
private AllergyDAO allergyDAO;
private FamilyDAO familyDAO;
private HealthRecordsDAO hrDAO;
private OfficeVisitDAO ovDAO;
private SurveyDAO surveyDAO;
private LabProcedureDAO labDAO;
private FakeEmailDAO emailDAO;
private ICDCodesDAO icdDAO;
private ReportRequestDAO reportRequestDAO;
private long loggedInMID;
/**
	 * Set up
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the records.
	 */
public ViewMyRecordsAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Takes the patient's representee as a param and returns it as a long if the patient represents the input
	 * param
	 * 
	 * @param input
	 *            the patient's representee mid
	 * @return representee's mid as a long
	 * @throws iTrustException
	 */
public long representPatient(String input) throws iTrustException {;

/**
	 * Returns a PatientBean for the currently logged in patient
	 * 
	 * @return PatientBean for the currently logged in patient
	 * @throws iTrustException
	 */
public PatientBean getPatient() throws iTrustException {;

/**
	 * Returns a PatientBean for the specified MID
	 * @param mid id of the requested bean
	 * @return PatientBean for the specified MID
	 * @throws iTrustException
	 */
public PatientBean getPatient(long mid) throws iTrustException {;

/**
	 * Returns a PersonnelBean for the requested MID
	 * @param mid id of the requested bean
	 * @return a PersonnelBean for the requested MID
	 * @throws iTrustException
	 */
public PersonnelBean getPersonnel(long mid) throws iTrustException {;

/**
	 * Returns a PatientBean for the currently logged in patient
	 * 
	 * @return PatientBean for the currently logged in patient
	 * @throws iTrustException
	 */
public List&lt;Email&gt; getEmailHistory() throws iTrustException {;

/**
	 * Returns a list of AllergyBeans for the currently logged in patient
	 * 
	 * @return a list of AllergyBeans for the currently logged in patient
	 * @throws iTrustException
	 */
public List&lt;AllergyBean&gt; getAllergies() throws iTrustException {;

/**
	 * Returns a list of Parents, Siblings, and Children of the currently logged in patient
	 * 
	 * @return list of FamilyMemberBeans
	 */
public List&lt;FamilyMemberBean&gt; getFamily() throws iTrustException {;

/**
	 * Returns a list of Parents, Siblings, and Grand Parents of the currently logged in patient
	 * 
	 * @return list of FamilyMemberBeans
	 */
public List&lt;FamilyMemberBean&gt; getFamilyHistory() throws iTrustException {;

/**
	 * Returns a list of HealthRecords for the currently logged in patient
	 * 
	 * @return a list of HealthRecords for the currently logged in patient
	 * @throws iTrustException
	 */
public List&lt;HealthRecord&gt; getAllHealthRecords() throws iTrustException {;

/**
	 * Returns a list of HealthRecords for the specified family member
	 * 
	 * @return a list of HealthRecords for the specified family member
	 * @throws iTrustException
	 */
public List&lt;HealthRecord&gt; getFamilyHealthRecords(long mid) throws iTrustException {;

/**
	 * Returns a list of OfficeVisitBeans for all office visits for the currently logged in patient
	 * 
	 * @return  a list of OfficeVisitBeans for all office visits for the currently logged in patient
	 * @throws iTrustException
	 */
public List&lt;OfficeVisitBean&gt; getAllOfficeVisits() throws iTrustException {;

/**
	 * Returns a complete OfficeVisitBean given a visitID
	 * 
	 * @return a complete OfficeVisitBean given a visitID
	 * @throws iTrustException
	 */
public OfficeVisitBean getCompleteOfficeVisit(long visitID) throws iTrustException {;

/**
	 * Returns a list of PatientBeans of all patients the currently logged in patient represents
	 * 
	 * @return a list of PatientBeans of all patients the currently logged in patient represents
	 * @throws iTrustException
	 */
public List&lt;PatientBean&gt; getRepresented() throws iTrustException {;

/**
	 * Returns a list of PatientBeans of all patients the currently logged in patient represents
	 * 
	 * @return a list of PatientBeans of all patients the currently logged in patient represents
	 * @throws iTrustException
	 */
public List&lt;PatientBean&gt; getRepresenting() throws iTrustException {;

/**
	 * Has a survey been created for this office visit
	 * 
	 * @param visitID ID of the office visit in question
	 * @return true if the survey has been completed, otherwise false
	 * @throws iTrustException
	 */
public boolean isSurveyCompleted(long visitID) throws iTrustException {;

/**
	 * Returns a list of lab procedures
	 * 
	 * @return a list of lab procedures for the logged in patient
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getLabs() throws iTrustException {;

/**
	 * Returns all the report requests for the logged in patient
	 * @return the report requests for the logged in patient
	 * @throws iTrustException
	 */
public List&lt;ReportRequestBean&gt; getReportRequests() throws iTrustException {;

/**
	 * Checks to see if family members have high blood pressure
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
public boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if family members have high cholesterol
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
public boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if family members have diabetes
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
public boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if family members have cancer
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
public boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if family members have heart disease
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
public boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if family members smoke
	 * 
	 * @param member the family member in question
	 * @return true if the family member has the risk factor, otherwise false.
	 * @throws iTrustException
	 */
public boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {;

/**
	 * Checks to see if family member is dead, and if so, what their cause of death was
	 * 
	 * @param member the family member in question
	 * @return the cause of death for the family member
	 * @throws iTrustException
	 */
public String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewMyRemoteMonitoringListAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Handles retrieving the patient data for a certain HCP as used by viewTelemedicineData.jsp
 * 
 */
public class ViewMyRemoteMonitoringListAction {

private RemoteMonitoringDAO rmDAO;
private TransactionDAO transDAO;
private AuthDAO authDAO;
private long loggedInMID;
/**
	 * Constructor
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the HCP retrieving the patient data.
	 */
public ViewMyRemoteMonitoringListAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Returns a list of RemoteMonitoringDataBeans for the logged in HCP
	 * 
	 * @return list of TransactionBeans
	 * @throws DBException
	 * @throws FormValidationException
	 */
public List&lt;RemoteMonitoringDataBean&gt; getPatientsData() throws DBException {;

/**
	 * Returns a list of RemoteMonitoringDataBeans for the logged in HCP
	 * 
	 * @return list of TransactionBeans
	 * @throws DBException
	 * @throws FormValidationException
	 */
public List&lt;RemoteMonitoringDataBean&gt; getPatientDataByDate(long patientMID, String startDate, String endDate) throws DBException,FormValidationException {;

public List&lt;RemoteMonitoringDataBean&gt; getPatientDataWithoutLogging() throws DBException {;

/**
	 * returns the patient name
	 * 
	 * @return patient name
	 * @throws DBException
	 * @throws iTrustException
	 */
public String getPatientName(long pid) throws DBException, iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewMyReportRequestsAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.Calendar;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.ReportRequestBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Action class for ViewMyReports.jsp.  Allows the user to see all their reports
 */
public class ViewMyReportRequestsAction {

private long loggedInMID;
private ReportRequestDAO reportRequestDAO;
private PersonnelDAO personnelDAO;
private TransactionDAO transDAO;
//private DAOFactory factory;
/**
	 * Set up
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing their report requests.
	 */
public ViewMyReportRequestsAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Returns all the reports for the currently logged in HCP
	 * 
	 * @return list of all reports for the logged in HCP
	 * @throws iTrustException
	 */
public List&lt;ReportRequestBean&gt; getAllReportRequestsForRequester() throws iTrustException {;

//	/**
//	 * Returns a list of *all* reports
//	 *
//	 * @return list of all reports
//	 * @throws iTrustException
//	 */
//	public List&lt;ReportRequestBean&gt; getAllReportRequests() throws iTrustException {
//		return reportRequestDAO.getAllReportRequests();
//	}
/**
	 * Adds a report request to the list
	 * 
	 * @param patientMID ID of the patient that the report request is for
	 * @return
	 * @throws iTrustException
	 */
public long addReportRequest(long patientMID) throws iTrustException {;

//	/**
//	 * Approves a report request from the list.  E-mail is sent when the request is approved.
//	 *
//	 * @param ID id of the request
//	 * @throws iTrustException
//	 */
//	public void approveReportRequest(long ID) throws iTrustException {
//		ReportRequestBean rr = reportRequestDAO.getReportRequest(ID);
//		reportRequestDAO.approveReportRequest(ID, loggedInMID, Calendar.getInstance().getTime());
//		transDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID,
//				rr.getPatientMID(), &quot;Approved comprehensive report request&quot;);
//		new EmailUtil(factory).sendEmail(makeEmailApp(loggedInMID, rr.getRequesterMID(), rr.getPatientMID()));
//
//	}
//	/**
//	 *
//	 * Sends e-mail regarding the approved request.
//	 *
//	 * @param adminID admin who approved the request
//	 * @param hcpID HCP the request is for
//	 * @param pid ID of the patient the report is about
//	 * @return the sent e-mail
//	 * @throws DBException
//	 */
//	private Email makeEmailApp(long adminID, long hcpID, long pid) throws DBException {
//
//		PatientBean p = new PatientDAO(factory).getPatient(pid);
//
//		Email email = new Email();
//		email.setFrom(&quot;no-reply@itrust.com&quot;);
//		email.setToList(Arrays.asList(p.getEmail()));
//		email.setSubject(&quot;A Report has been generated in iTrust&quot;);
//		email
//				.setBody(String
//						.format(
//								&quot;Dear %s, \n The iTrust Health Care Provider (%s) submitted a request to view your full medical records.  The iTrust administrator (%s) approved a one-time viewing of this report.  You will be notified when the HCP chooses to view it.&quot;,
//								p.getFullName(), hcpID, adminID));
//		return email;
//	}
//	/**
//	 * Rejects a request from the list.
//	 *
//	 * @param ID id of the rejected request
//	 * @param comment why the request was rejected
//	 * @throws iTrustException
//	 */
//	public void rejectReportRequest(long ID, String comment) throws iTrustException {
//		reportRequestDAO.rejectReportRequest(ID, loggedInMID, Calendar.getInstance().getTime(), comment);
//		transDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, 0L,
//				&quot;Rejected comprehensive report request&quot;);
//	}
/**
	 * Returns the requested report
	 * 
	 * @param ID id of the requested report
	 * @return the requested report
	 * @throws iTrustException
	 */
public ReportRequestBean getReportRequest(int ID) throws iTrustException {;

/**
 * Sets the viewed status of the report.  If the report is &quot;viewed&quot; the HCP must request a new one to see it again.
 * 
 * @param ID id of the report
 * @throws iTrustException
 */
public void setViewed(int ID) throws iTrustException {;

//	/**
//	 *
//	 * Sends e-mail regarding the request to the patient.
//	 *
//	 * @param adminID admin who approved the request
//	 * @param hcpID HCP the request is for
//	 * @param pid ID of the patient the report is about
//	 * @return the sent e-mail
//	 * @throws DBException
//	 */
//	private Email makeEmailView(long adminID, long hcpID, long pid) throws DBException {
//
//		PatientBean p = new PatientDAO(factory).getPatient(pid);
//
//		Email email = new Email();
//		email.setFrom(&quot;no-reply@itrust.com&quot;);
//		email.setToList(Arrays.asList(p.getEmail()));
//		email.setSubject(&quot;A Report has been generated in iTrust&quot;);
//		email
//				.setBody(String
//						.format(
//								&quot;Dear %s, \n The iTrust Health Care Provider (%s) has chosen to view your full medical report, which was approved by an iTrust administrator (%s).  This report was only viewable one time and is no longer available.&quot;,
//								p.getFullName(), hcpID, adminID));
//		return email;
//	}
/**
	 * Gets the status of the request
	 * 
	 * @param id id of the request
	 * @return the request's status
	 * @throws iTrustException
	 */
public String getLongStatus(long id) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewOfficeVisitAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.Messages;
/**
 * Handles viewing the office visits, prescriptions, and HCP name for the given ovID Used by
 * viewOfficeVisit.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewOfficeVisitAction extends OfficeVisitBaseAction {

private OfficeVisitDAO ovDAO;
private PersonnelDAO personnelDAO;
private PatientDAO patientDAO;
/**
	 * Super class handles validating the loggedInMid and ovIDString
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing their office visits. 
	 * @param ovIDString
	 *            The unique identifier of the office visit as a String.
	 * @throws iTrustException
	 */
public ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String ovIDString) throws iTrustException {;

/**
	 * Super class handles validating the pidString and ovIDString. Usually used for representing a patient.
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param repPIDString The MID of the representative viewing the records.
	 * @param ovIDString
	 *            The unique identifier of the office visit as a String.
	 * @throws iTrustException
	 */
public ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String repPIDString, String ovIDString) throws iTrustException {;

private void checkRepresented(long loggedInMID, String repPIDString) throws iTrustException {;

/**
	 * Returns the office visit as an OfficeVisitBean for the ovID that was initially passed to the
	 * constructor
	 * 
	 * @return the OfficeVisitBean for the ovID
	 * @throws iTrustException
	 */
public OfficeVisitBean getOfficeVisit() throws iTrustException {;

/**
	 * Returns the prescriptions associated with the ovID initially passed to the constructor
	 * 
	 * @return list of PrescriptionBeans for the ovID
	 * @throws DBException
	 */
public List&lt;PrescriptionBean&gt; getPrescriptions() throws DBException {;

/**
	 * Returns the name of the HCP for the hcpID passed as a param
	 * 
	 * @param hcpID
	 * @return the name of the HCP
	 * @throws iTrustException
	 */
public String getHCPName(long hcpID) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewPatientOfficeVisitHistoryAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PatientVisitBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * 
 * Action class for ViewPatientOfficeVisitHistory.jsp
 *
 */
public class ViewPatientOfficeVisitHistoryAction {

private long loggedInMID;
private PatientDAO patientDAO;
private TransactionDAO transDAO;
private PersonnelDAO personnelDAO;
private OfficeVisitDAO officevisitDAO;
private ArrayList&lt;PatientVisitBean&gt; visits;
/**
	 * Set up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the office visits.
	 */
public ViewPatientOfficeVisitHistoryAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Adds all the office visits for the logged in HCP to a list.
	 * 
	 * @throws iTrustException
	 */
private void processOfficeVisits() throws iTrustException {;

/**
	 * Checks to see if a patient is in the list of  visits
	 * @param pb patient to check
	 * @param date date of the visit
	 * @return True if the patient is in the list of visits.
	 */
private boolean PatientInList(PatientBean pb, String date) {;

/**
 * Get the list of patients an HCP has had office visits with
 * 
 * @return the list of patients an HCP has had office visits with
 * @throws DBException
 */
public List&lt;PatientVisitBean&gt; getPatients() throws DBException {;

/**
	 * Returns a PersonnelBean for the logged in HCP
	 * @return PersonnelBean for the logged in HCP
	 * @throws iTrustException
	 */
public PersonnelBean getPersonnel() throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewPersonnelAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.Messages;
/**
 * Handles retrieving personnel beans for a given personnel Used by viewPersonnel.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewPersonnelAction {

private PersonnelDAO personnelDAO;
private TransactionDAO transDAO;
private FakeEmailDAO emailDAO;
private long loggedInMID;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person retrieving personnel beans.
	 */
public ViewPersonnelAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Retrieves a PersonnelBean for the mid passed as a param
	 * 
	 * @param input
	 *            the mid for which the PersonnelBean will be returned
	 * @return PersonnelBean
	 * @throws iTrustException
	 */
public PersonnelBean getPersonnel(String input) throws iTrustException {;

/**
	 * Returns a PatientBean for the currently logged in personnel
	 * 
	 * @return The PatientBean
	 * @throws iTrustException
	 */
public List&lt;Email&gt; getEmailHistory() throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewPrescriptionRecordsAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.EmailUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.Messages;
/**
 * Handles retrieving beans for viewPrescriptionRecords.jsp
 * 
 * @author laurenhayward
 * 
 */
public class ViewPrescriptionRecordsAction {

private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
private TransactionDAO transDAO;
private EmailUtil emailer;
private long loggedInMID;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing prescription records.
	 */
public ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Gets a PatientBean from an MID
	 * 
	 * @param patientID MID of the patient
	 * @return PatientBean for the MID given
	 * @throws iTrustException
	 */
public PatientBean getPatient(long patientID) throws iTrustException {;

/**
	 * Gets the logged in person's representees
	 * 
	 * @return list of PatientBeans holding the representees
	 * @throws iTrustException
	 */
public List&lt;PatientBean&gt; getRepresentees() throws iTrustException {;

/**
	 * Returns the prescribing HCP for a prescription
	 * 
	 * @param prescription item in question
	 * @return HCP who prescribed the prescription
	 * @throws iTrustException
	 */
public PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {;

/**
	 * Returns all the prescriptions for a given patient
	 * 
	 * @param patientID patient in question
	 * @return list of all the prescriptions for that patient
	 * @throws iTrustException
	 */
public List&lt;PrescriptionBean&gt; getPrescriptionsForPatient(long patientID) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewPrescriptionRenewalNeedsAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.Messages;
public class ViewPrescriptionRenewalNeedsAction {

private PatientDAO patientDAO;
private TransactionDAO transDAO;
private long loggedInMID;
/**
	 * Set up defaults
	 * 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the prescription renewals.
	 */
public ViewPrescriptionRenewalNeedsAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Uses PatientDAO as a helper class to return a list of patients with a special-diagnosis-history who
	 * have the logged in HCP as a DHCP and whose medications are going to
	 * expire within seven days.
	 * 
	 * @return A list of PatientBean's
	 */
public List&lt;PatientBean&gt; getRenewalNeedsPatients() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewReportAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * 
 * Action class for ViewReport.jsp
 *
 */
public class ViewReportAction {

private PatientDAO patientDAO;
private PersonnelDAO personnelDAO;
/**
	 * Set up defaults
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the report.
	 */
public ViewReportAction(DAOFactory factory, long loggedInMID) {;

/**
	 *  Get diagnosis list for the given patient
	 * @param pid the patient of interest
	 * @return list of diagnoses
	 * @throws iTrustException
	 */
public List&lt;DiagnosisBean&gt; getDiagnoses(long pid) throws iTrustException {;

/**
	 *  Get procedure list for the given patient
	 * @param pid the patient of interest
	 * @return list of procedures
	 * @throws iTrustException
	 */
public List&lt;ProcedureBean&gt; getProcedures(long pid) throws iTrustException {;

/**
	 *  Get prescription list for the given patient
	 * @param pid the patient of interest
	 * @return list of prescriptions
	 * @throws iTrustException
	 */
public List&lt;PrescriptionBean&gt; getPrescriptions(long pid) throws iTrustException {;

/**
	 *  Get declared HCPs list for the given patient
	 * @param pid the patient of interest
	 * @return list of declared HCPs
	 * @throws iTrustException
	 */
public List&lt;PersonnelBean&gt; getDeclaredHCPs(long pid) throws iTrustException {;

/**
	 * Returns a PersonnelBean when given an MID
	 * @param mid HCP of interest
	 * @return PersonnelBean of the given HCP
	 * @throws iTrustException
	 */
public PersonnelBean getPersonnel(long mid) throws iTrustException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewSurveyResultAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import edu.ncsu.csc.itrust.beans.SurveyResultBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.validate.SurveySearchValidator;
/**
 * This class is used to handle retrieving survey results from the database.  It also logs the transaction.
 */
public class ViewSurveyResultAction {

private SurveyResultDAO surveyResultDAO;
private TransactionDAO transDAO;
private SurveySearchValidator validator;
/**
	 * Set up defaults.
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person retrieving survey results.
	 */
public ViewSurveyResultAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Retrieves survey results for a whole hospital.
	 * @param bean The SurveyResultBean containing the survey result specs.
	 * @return A java.util.List of Survey Results.
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
public List&lt;SurveyResultBean&gt; getSurveyResultsForHospital(SurveyResultBean bean) throws iTrustException, FormValidationException {;

/**
	 * Retrieves survey results for a given zip code.
	 * @param bean The SurveyResultBean containing the survey result specs.
	 * @return A java.util.List of Survey Results.
	 * @throws iTrustException
	 * @throws FormValidationException
	 */
public List&lt;SurveyResultBean&gt; getSurveyResultsForZip(SurveyResultBean bean) throws iTrustException, FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ViewVisitedHCPsAction</id>
            <content>package edu.ncsu.csc.itrust.action;

import java.util.List;
import java.util.ArrayList;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.HCPVisitBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Action class for ViewVisitedHCPs.jsp
 *
 */
public class ViewVisitedHCPsAction {

private long patientMID;
private PersonnelDAO docDAO;
private OfficeVisitDAO visitDAO;
private PatientDAO patientDAO;
private ArrayList&lt;HCPVisitBean&gt; visits;
private DeclareHCPAction declareAction;
private ArrayList&lt;PersonnelBean&gt; filterList;
/**
	 * Set up defaults 
	 * @param factory The DAOFactory used to create the DAOs used in this action.
	 * @param loggedInMID The MID of the person viewing the visited HCPs.
	 */
public ViewVisitedHCPsAction(DAOFactory factory, long loggedInMID) {;

/**
	 * Adds all the office visits to a global array
	 * 
	 * @throws iTrustException
	 */
private void processOfficeVisits() throws iTrustException {;

/**
	 * Returns a list of all the visited HCPs
	 * @return list of all the visited HCPs
	 */
public List&lt;HCPVisitBean&gt; getVisitedHCPs() {;

/**
	 * Set a given HCP as undeclared
	 * 
	 * @param name HCP to undeclare
	 * @return An empty string.
	 * @throws iTrustException
	 */
public String undeclareHCP(String name) throws iTrustException {;

/**
	 * Set a given HCP as declared
	 * 
	 * @param name HCP to declare
	 * @return An empty string.
	 * @throws iTrustException
	 */
public String declareHCP(String name) throws iTrustException {;

/**
	 * Check to see if a given HCP is declared
	 * @param mid HCP to check
	 * @return true if the HCP is declared, otherwise false
	 */
public boolean checkDeclared(long mid) {;

/**
	 * Filter the list of HCPs by last name, specialty, or zip code. 
	 * @param doc sort by last name
	 * @param specialty sort by specialty
	 * @param zip sort by zip
	 * @return sorted list of HCPs
	 */
public List&lt;PersonnelBean&gt; filterHCPList(String doc, String specialty, String zip) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_OfficeVisitBaseAction</id>
            <content>package edu.ncsu.csc.itrust.action.base;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * An abstract class which contains functionalities common among all actions relating to inserting and editing
 * office visits. Because all office visits are with a certain patient, OfficeVisitBaseAction extends
 * PatientBaseAction.
 * 
 * Use this class whenever you have a page which not only requires a patient MID, but an office visit ID. Pass
 * those IDs to the constructor, and an exception will be thrown if they are not valid IDs (which should kick
 * the user out to the home page).
 * 
 * The concrete methods created by this class allow for its association with the unique identifier of a given
 * office visit. These identifiers can also be verified for their correctness and existence.
 * 
 * Very similar to {@link PatientBaseAction} and {@link PersonnelBaseAction}
 */
abstract public class OfficeVisitBaseAction extends PatientBaseAction {

/**
	 * A database access object for dealing with office visits.
	 */
private OfficeVisitDAO ovDAO;
/**
	 * The unique identifier of the office visit this action is associated with.
	 */
protected long ovID;
/**
	 * The default constructor.
	 * 
	 * @param factory
	 *            A database access object factory for supplying a runtime context.
	 * @param pidString
	 *            The patient's MID as a String, to be passed to the super constructor (for PatientBaseAction)
	 * @param ovIDString
	 *            The unique identifier of the office visit as a String.
	 * @throws iTrustException
	 *             If any of the supplied parameters is incorrect or there is a DB problem.
	 */
public OfficeVisitBaseAction(DAOFactory factory, String pidString, String ovIDString) throws iTrustException {;

/**
	 * Asserts whether this unique office visit identifier both exists and is associated with the patient in
	 * the database.
	 * 
	 * @param input
	 *            The presumed identifier as a String.
	 * @return The same identifier as a long of the existing office visit.
	 * @throws iTrustException
	 *             If the visit does not exist or if there is a DB problem.
	 */
private long checkOfficeVisitID(String input) throws iTrustException {;

/**
	 * For obtaining the unique identifier of the office visit this action is associated with.
	 * 
	 * @return A long of the identifier.
	 */
public long getOvID() {;

/**
	 * Converts all characters of the input string to their HTML special characters equivalent representation.
	 * Explicitly, the less than symbol becomes lt, the greater than symbol becomes gt and a newline feed
	 * becomes br.
	 * 
	 * @param input
	 *            The string to encode.
	 * @return The encoded string.
	 */
public String encode(String input) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PatientBaseAction</id>
            <content>package edu.ncsu.csc.itrust.action.base;

import edu.ncsu.csc.itrust.HtmlEncoder;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * An abstract class for dealing with actions that require an associated patient. The concrete functionality
 * provided by this class allows for asserting the correctness and existence of patients' MIDs.
 * 
 * Use this class whenever your JSP requires a patient ID when it loads (e.g. editPatient.jsp). The patient
 * string is passed to the constructor of this class and is checked for both format and existence. If the
 * patient ID is wrong in any way, an exception is thrown, resulting in the user getting kicked out to the
 * home page.
 * 
 * Very similar to {@link PersonnelBaseAction} and {@link OfficeVisitBaseAction}
 * 
 * Subclasses need not rewrite this functionality, and they are not held to any strict contract to extend this
 * class.
 */
public class PatientBaseAction {

/**
	 * The database access object factory to associate this with a runtime context.
	 */
private DAOFactory factory;
/**
	 * Stores the MID of the patient associated with this action.
	 */
protected long pid;
/**
	 * The default constructor.
	 * 
	 * @param factory
	 *            A factory to create a database access object.
	 * @param pidString
	 *            The patient's ID to associate with this action.
	 * @throws iTrustException
	 *             If the patient's ID is incorrect or there is a DB problem.
	 */
public PatientBaseAction(DAOFactory factory, String pidString) throws iTrustException {;

/**
	 * Asserts whether the input is a valid, existing patient's MID.
	 * 
	 * @param input
	 *            The presumed MID
	 * @return The existing patient's ID as a long.
	 * @throws iTrustException
	 *             If the patient does not exist or there is a DB Problem.
	 */
private long checkPatientID(String input) throws iTrustException {;

/**
	 * Retrieves the identifier of the patient as a long.
	 * 
	 * @return The patient's MID.
	 */
public long getPid() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PersonnelBaseAction</id>
            <content>package edu.ncsu.csc.itrust.action.base;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * An abstract class for dealing with actions that require an associated personnel. The concrete functionality
 * provided by this class allows for asserting the correctness and existence of personnel' MIDs.
 * 
 * Use this class whenever your JSP requires a personnel ID when it loads (e.g. editPatient.jsp). The patient
 * string is passed to the constructor of this class and is checked for both format and existence. If the
 * patient ID is wrong in any way, an exception is thrown, resulting in the user getting kicked out to the
 * home page.
 * 
 * Subclasses need not rewrite this functionality, and they are not held to any strict contract to extend this
 * class.
 * 
 * Very similar to {@link PatientBaseAction}
 */
public class PersonnelBaseAction {

/**
	 * The database access object factory to associate this with a runtime context.
	 */
private DAOFactory factory;
/**
	 * Stores the MID of the personnel associated with this action.
	 */
protected long pid;
/**
	 * The default constructor.
	 * 
	 * @param factory
	 *            A factory to create a database access object.
	 * @param pidString
	 *            The personnel's ID to associate with this action.
	 * @throws iTrustException
	 *             If the personnel's ID is incorrect or there is a DB problem.
	 */
public PersonnelBaseAction(DAOFactory factory, String pidString) throws iTrustException {;

/**
	 * Asserts whether the input is a valid, existing personnel's MID.
	 * 
	 * @param input
	 *            The presumed MID
	 * @return The existing personnel's ID as a long.
	 * @throws iTrustException
	 *             If the personnel does not exist or there is a DB Problem.
	 */
private long checkPersonnelID(String input) throws iTrustException {;

/**
	 * Retrieves the identifier of the patient as a long.
	 * 
	 * @return The patient's MID.
	 */
public long getPid() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AdverseEventsData</id>
            <content>package edu.ncsu.csc.itrust.charts;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import de.laures.cewolf.DatasetProduceException;
import de.laures.cewolf.DatasetProducer;
import de.laures.cewolf.links.CategoryItemLinkGenerator;
import de.laures.cewolf.tooltips.CategoryToolTipGenerator;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
/**
 * This class handles the data for charting in CeWolf/JFreeChart. This class implements DatasetProducer,
 * CategoryToolTipGenerator, CategoryItemLinkGenerator, and Serializable.
 * 
 * @author Jason
 *
 */
public class AdverseEventsData implements DatasetProducer, CategoryToolTipGenerator, CategoryItemLinkGenerator, Serializable {

/**
	 * The generated serializable ID.
	 */
private static final long serialVersionUID ;
// Hardcoded months array to make implementation simpler for Adverse Event charts
private final String[] months ;
// Initialize the values for each month to 0
private int[] values ;
// This will be the list of adverse events
private List&lt;AdverseEventBean&gt; adverseEvents = new LinkedList&lt;AdverseEventBean&gt;();

// This will be the name of the prescription or immunization under analysis
private String codeName;
/**
     * Called from the JSP page to initialize the list of Adverse Events needed to
     * produce the desired chart.
     * 
     * @param adEvents
     * @param name
     */
public void setAdverseEventsList(List&lt;AdverseEventBean&gt; adEvents, String name) {;

/**
     * This method parses the list of Adverse Event Beans to initialize the chart dataset.
     */
public Object produceDataset(Map params) throws DatasetProduceException {;

/**
     * This producer's data is invalidated after 5 seconds. By this method the
     * producer can influence Cewolf's caching behaviour the way it wants to.
     */
public boolean hasExpired(Map params, Date since) {;

/**
	 * Returns a unique ID for this DatasetProducer
	 */
public String getProducerId() {;

/**
     * Returns a link target for a special data item.
     */
public String generateLink(Object data, int series, Object category) {;

/**
	 * @see java.lang.Object#finalize()
	 */
protected void finalize() throws Throwable {;

/**
	 * @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)
	 */
public String generateToolTip(CategoryDataset arg0, int series, int arg2) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DBException</id>
            <content>package edu.ncsu.csc.itrust.exception;

import java.sql.SQLException;
/**
 * The reasoning behind this wrapper exception is security. When an SQL Exception gets thrown all the way back
 * to the JSP, we begin to reveal details about our database (even knowing that it's MySQL is bad!) So, we
 * make a wrapper exception with a vague description, but we also keep track of the SQL Exception for
 * debugging and testing purposes.
 * 
 * @author Andy
 * 
 */
public class DBException extends iTrustException {

private static final long serialVersionUID ;
private SQLException sqlException ;
public DBException(SQLException e) {;

/**
	 * @return The SQL Exception that was responsible for this error.
	 */
public SQLException getSQLException() {;

public String getExtendedMessage() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ErrorList</id>
            <content>package edu.ncsu.csc.itrust.exception;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
/**
 * Used by the validators to create a list of error messages.
 * 
 * @author Andy
 * 
 */
public class ErrorList implements Iterable&lt;String&gt; {

private List&lt;String&gt; errorList;
public ErrorList() {;

/**
	 * Adds a message to the list if it's not a Java null or empty string.
	 * 
	 * @param errorMessage
	 */
public void addIfNotNull(String errorMessage) {;

/**
	 * Returns the list of error messages
	 * 
	 * @return
	 */
public List&lt;String&gt; getMessageList() {;

/**
	 * Returns true if the list has any errors
	 * 
	 * @return
	 */
public boolean hasErrors() {;

public String toString() {;

public Iterator&lt;String&gt; iterator() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_FormValidationException</id>
            <content>package edu.ncsu.csc.itrust.exception;

import java.io.IOException;
import java.util.List;
import javax.servlet.jsp.JspWriter;
/**
 * This exception is used specifically for when an action involves the correct
 * and proper submission of a web form.  Form Validation is handled by a series of
 * other classes, but when form validation is incorrect or incomplete, this exception
 * is thrown. 
 */
public class FormValidationException extends Exception {

private static final long serialVersionUID ;
private ErrorList errorList;
/**
	 * Constructor with error messages passed as a list of parameters to the method.
	 * @param errorMessages The list of error messages to be returned in the special form validation box.
	 */
public FormValidationException(String... errorMessages) {;

/**
	 * Constructor with error messages as a special ErrorList data type.
	 * @param errorList An ErrorList object which contains the list of error messages.
	 */
public FormValidationException(ErrorList errorList) {;

/**
	 * Returns the error list as a java.util.List of Strings.
	 * @return The error list
	 */
public List&lt;String&gt; getErrorList() {;

/**
	 * The error message will be displayed at the top of the iTrust page as in other iTrust Exceptions.
	 */
public String getMessage() {;

/**
	 * The special formatting for error messages is then kept in one place.
	 * @param out The output writer (in this case a JSPWriter) where the formatted list will go.
	 * @throws IOException If the writer is incorrect.
	 */
public void printHTML(JspWriter out) throws IOException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_NoHealthRecordsException</id>
            <content>package edu.ncsu.csc.itrust.exception;

/**
 * This error message is thrown when checking for health risk indicators and the
 * patient has had no health records entered.  It is a separate case than an iTrustException
 * because the error handling is slightly different. 
 */
public class NoHealthRecordsException extends iTrustException {

private static final long serialVersionUID ;
/**
	 * The default constructor, which just passes a pre-specified message to an iTrustException.
	 */
public NoHealthRecordsException() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_iTrustException</id>
            <content>package edu.ncsu.csc.itrust.exception;

/**
 * A specialized exception class for displaying iTrust error messages.
 * This exception is handled by the default iTrust exception handler.
 */
public class iTrustException extends Exception {

private static final long serialVersionUID ;
/**
	 * The typical constructor.
	 * @param message A message to be displayed to the screen.
	 */
public iTrustException(String message) {;

/**
	 * For messages which are displayed to the user. Usually, this is a very general message for security
	 * reasons.
	 */
public String getMessage() {;

/**
	 * For exceptions which show a lot of technical detail, usually delegated to a subclass
	 * 
	 * @return
	 */
public String getExtendedMessage() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DAOFactory</id>
            <content>package edu.ncsu.csc.itrust.dao;

import java.sql.Connection;
import java.sql.SQLException;
import edu.ncsu.csc.itrust.dao.mysql.AccessDAO;
import edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO;
import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;
import edu.ncsu.csc.itrust.dao.mysql.ApptDAO;
import edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO;
import edu.ncsu.csc.itrust.dao.mysql.AuthDAO;
import edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO;
import edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO;
import edu.ncsu.csc.itrust.dao.mysql.FamilyDAO;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO;
import edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.LOINCDAO;
import edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO;
import edu.ncsu.csc.itrust.dao.mysql.MessageDAO;
import edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO;
import edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.dao.mysql.ReferralDAO;
import edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO;
import edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO;
import edu.ncsu.csc.itrust.dao.mysql.RiskDAO;
import edu.ncsu.csc.itrust.dao.mysql.SurveyDAO;
import edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO;
import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;
import edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO;
import edu.ncsu.csc.itrust.testutils.EvilDAOFactory;
import edu.ncsu.csc.itrust.testutils.TestDAOFactory;
/**
 * The central mediator for all Database Access Objects. The production instance uses the database connection pool
 * provided by Tomcat (so use the production instance when doing stuff from JSPs in the &quot;real code&quot;). Both the
 * production and the test instance parses the context.xml file to get the JDBC connection.
 * 
 * Also, @see {@link EvilDAOFactory} and @see {@link TestDAOFactory}.
 * 
 * Any DAO that is added to the system should be added in this class, in the same way that all other DAOs are.
 * 
 * @author Andy
 * 
 */
public class DAOFactory {

private static DAOFactory productionInstance ;
private IConnectionDriver driver;
/**
	 * 
	 * @return A production instance of the DAOFactory, to be used in deployment (by Tomcat).
	 */
public static DAOFactory getProductionInstance() {;

protected DAOFactory() {;

public Connection getConnection() throws SQLException {;

public AccessDAO getAccessDAO() {;

public AllergyDAO getAllergyDAO() {;

public ApptDAO getApptDAO() {;

public ApptTypeDAO getApptTypeDAO() {;

public AuthDAO getAuthDAO() {;

public CPTCodesDAO getCPTCodesDAO() {;

public DrugInteractionDAO getDrugInteractionDAO() {;

public FamilyDAO getFamilyDAO() {;

public HealthRecordsDAO getHealthRecordsDAO() {;

public HospitalsDAO getHospitalsDAO() {;

public ICDCodesDAO getICDCodesDAO() {;

public NDCodesDAO getNDCodesDAO() {;

public OfficeVisitDAO getOfficeVisitDAO() {;

public PatientDAO getPatientDAO() {;

public PersonnelDAO getPersonnelDAO() {;

public ReferralDAO getReferralDAO() {;

public RiskDAO getRiskDAO() {;

public TransactionDAO getTransactionDAO() {;

public VisitRemindersDAO getVisitRemindersDAO() {;

public FakeEmailDAO getFakeEmailDAO() {;

public ReportRequestDAO getReportRequestDAO() {;

public SurveyDAO getSurveyDAO() {;

public LabProcedureDAO getLabProcedureDAO() {;

public LOINCDAO getLOINCDAO() {;

public SurveyResultDAO getSurveyResultDAO() {;

public MessageDAO getMessageDAO() {;

public AdverseEventDAO getAdverseEventDAO() {;

public RemoteMonitoringDAO getRemoteMonitoringDAO() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_IConnectionDriver</id>
            <content>package edu.ncsu.csc.itrust.dao;

import java.sql.Connection;
import java.sql.SQLException;
/**
 * Used by DAOFactory to abstract away different ways of getting our JDBC connection
 * 
 * @author Andy
 * 
 */
public interface IConnectionDriver {

public Connection getConnection() throws SQLException;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ProductionConnectionDriver</id>
            <content>package edu.ncsu.csc.itrust.dao;

import java.sql.Connection;
import java.sql.SQLException;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
/**
 * Produces the JDBC connection from Tomcat's JDBC connection pool (defined in context.xml). Produces and
 * exception when running the unit tests because they're not being run through Tomcat.
 * 
 * @author Andy
 * 
 */
public class ProductionConnectionDriver implements IConnectionDriver {

public Connection getConnection() throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AccessDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * AccessDAO is for all queries related to authorization.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * 
 * @author Andy
 * 
 */
public class AccessDAO {

private DAOFactory factory;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public AccessDAO(DAOFactory factory) {;

/**
	 * Returns the number of minutes it would take for a session to time out. This is done by effectively
	 * using the database table as a hash table. If a row in GlobalVariables does not exist, one is inserted
	 * with the default value '20'.
	 * 
	 * @return An int for the number of minutes.
	 * @throws DBException
	 */
public int getSessionTimeoutMins() throws DBException {;

/**
	 * Sets the number of minutes it would take for a session to timeout.
	 * 
	 * @param mins An int specifying the number of minutes
	 * @throws DBException
	 */
public void setSessionTimeoutMins(int mins) throws DBException {;

private void insertDefaultTimeout(Connection conn, int mins) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AdverseEventDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import java.sql.Timestamp;
/**
 * Used for the logging mechanism.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class AdverseEventDAO {

private DAOFactory factory;
private AdverseEventBeanLoader aeLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public AdverseEventDAO(DAOFactory factory) {;

/**
	 * Gets all the adverse event reports for a certain user MID.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of AdverseEventBeans.
	 * @throws SQLException
	 * @throws DBException 
	 */
public List&lt;AdverseEventBean&gt; getReportsFor(long mid) throws DBException {;

/**
	 * Adds a message to the database.
	 * @param mBean A bean representing the message to be added.
	 * @throws SQLException
	 * @throws DBException 
	 */
public void addReport(AdverseEventBean aeBean, long hcpmid) throws DBException {;

public long getHCPMID(int id) throws DBException{;

public AdverseEventBean getReport(int id) throws DBException{;

public long removeReport(int id) throws DBException{;

public List&lt;AdverseEventBean&gt; getUnremovedAdverseEventsByCode(String code) throws DBException {;

public String getNameForCode(String code) throws DBException {;

public List&lt;AdverseEventBean&gt; getPerscriptions(String start, String end) throws ParseException, DBException{;

public List&lt;AdverseEventBean&gt; getImmunizations(String start, String end) throws ParseException, DBException{;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AllergyDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class AllergyDAO {

private DAOFactory factory;
private AllergyBeanLoader allergyBeanLoader = new AllergyBeanLoader();

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public AllergyDAO(DAOFactory factory) {;

/**
	 * Returns a list of patient's allergies.
	 * @param pid A long for the MID of the patient we are looking up.
	 * @return A java.util.List of AllergyBeans associated with this patient.
	 * @throws DBException
	 */
public List&lt;AllergyBean&gt; getAllergies(long pid) throws DBException {;

/**
	 * Adds an allergy to this patient's list.
	 * @param pid The MID of the patient whose allergy we are adding.
	 * @param description The name of the allergen.
	 * @throws DBException
	 */
public void addAllergy(long pid, String description) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ApptDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
public class ApptDAO {

private DAOFactory factory;
private ApptBeanLoader abloader;
public ApptDAO(DAOFactory factory) {;

public List&lt;ApptBean&gt; getApptsFor(long mid) throws SQLException {;

public List&lt;ApptBean&gt; getAllAppts() throws SQLException {;

public void scheduleAppt(ApptBean appt) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ApptTypeDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ApptTypeBean;
import edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
public class ApptTypeDAO {

private DAOFactory factory;
private ApptTypeBeanLoader atLoader;
public ApptTypeDAO(DAOFactory factory) {;

public List&lt;ApptTypeBean&gt; getApptTypes() throws SQLException {;

public boolean addApptType(ApptTypeBean apptType) throws SQLException {;

public boolean editApptType(ApptTypeBean apptType) throws SQLException, DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AuthDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.RandomPassword;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * AuthDAO is for anything that has to do with authentication. Most methods access the users table.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class AuthDAO {

public static final long LOGIN_TIMEOUT ;// 15 min
private DAOFactory factory;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public AuthDAO(DAOFactory factory) {;

/**
	 * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).
	 * Initially sets security question to a random set of characters, so that nobody should be able to guess
	 * its value.
	 * 
	 * @param mid The user's MID as a Long.
	 * @param role The role of the user as a Role enum {@link Role}
	 * @param password The password for the new user.
	 * @return A string representing the newly added randomly-generated password. 
	 * @throws DBException
	 */
public String addUser(Long mid, Role role, String password) throws DBException {;

/**
	 * Reset the security question and answer for a particular user
	 * 
	 * @param question The security question as a string.
	 * @param answer The security answer as a string.
	 * @param mid The MID of the user as a long.
	 * @throws DBException
	 */
public void setSecurityQuestionAnswer(String question, String answer, long mid) throws DBException {;

/**
	 * Returns the user name of a user from just the MID
	 * 
	 * @param mid The MID of the user to get the name of.
	 * @return The user's name as a String.
	 * @throws DBException
	 * @throws iTrustException
	 */
public String getUserName(long mid) throws DBException, iTrustException {;

/**
	 * Returns the role of a particular MID
	 * 
	 * @param mid The MID of the user to look up.
	 * @return The {@link Role} of the user as an enum.
	 * @throws DBException
	 * @throws iTrustException
	 */
public Role getUserRole(long mid) throws DBException, iTrustException {;

/**
	 * Change the password of a particular user
	 * 
	 * @param mid The MID of the user whose password we are changing.
	 * @param password The new password.
	 * @throws DBException
	 */
public void resetPassword(long mid, String password) throws DBException {;

/**
	 * Return the security question for a particular user.
	 * 
	 * @param mid The MID of the user we are looking up.
	 * @return The security question of the user we are looking up.
	 * @throws iTrustException
	 */
public String getSecurityQuestion(long mid) throws iTrustException {;

/**
	 * Return the security answer of a particular user
	 * 
	 * @param mid The MID of the user we are looking up.
	 * @return The security answer as a String.
	 * @throws iTrustException
	 */
public String getSecurityAnswer(long mid) throws iTrustException {;

/**
	 * Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where
	 * the key is the user's IP address. If the user's IP address is not in the table, a row with &quot;1&quot; is
	 * added.
	 * 
	 * @param ipAddr The IP address of the user as a String.
	 * @throws DBException
	 */
public void recordLoginFailure(String ipAddr) throws DBException {;

/**
	 * Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash
	 * table where the key is the user's IP address. If the user's IP address is not in the table, a row with
	 * &quot;1&quot; is added.
	 * 
	 * @param ipAddr The IP address of the user as a String.
	 * @throws DBException
	 */
public void recordResetPasswordFailure(String ipAddr) throws DBException {;

/**
	 * Return the number of failures from resetting a password, given an IP address.
	 * 
	 * @param ipAddr An IP address for the associated attempt as a String.
	 * @return An int representing the number of failures.
	 * @throws DBException
	 */
public int getResetPasswordFailures(String ipAddr) throws DBException {;

/**
	 * Return the number of failures from login failures a password, given an IP address.
	 * 
	 * @param ipAddr The IP address for this attempt as a String.
	 * @return An int representing the number of failures which have occured.
	 * @throws DBException
	 */
public int getLoginFailures(String ipAddr) throws DBException {;

private void insertLoginFailureRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {;

private void insertResetPasswordRow(String ipAddr, int failureCount, Connection conn) throws DBException, SQLException {;

private void updateFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {;

public void resetLoginFailuresToZero(String ipAddr) throws DBException, SQLException {;

private void updateResetFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {;

/**
	 * Check that a user actually exists.
	 * 
	 * @param mid
	 * @return
	 * @throws DBException
	 */
public boolean checkUserExists(long mid) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_CPTCodesDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Used for managing CPT codes.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * The CPT code set accurately describes medical, surgical, and diagnostic services 
 * and is designed to communicate uniform information about medical services and procedures 
 * among physicians, coders, patients, accreditation organizations, and payers for administrative, 
 * financial, and analytical purposes.
 *
 * @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml
 * @author Andy
 * 
 */
public class CPTCodesDAO {

private DAOFactory factory;
private ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader();

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public CPTCodesDAO(DAOFactory factory) {;

/**
	 * Returns a list of all CPT codes.
	 * 
	 * @return A java.util.List of ProcedureBeans for the CPT codes.
	 * @throws DBException
	 */
public List&lt;ProcedureBean&gt; getAllCPTCodes() throws DBException {;

/**
	 * Returns a list of all CPT codes.
	 * 
	 * @return A java.util.List of all Immunization-related CPT codes.
	 * @throws DBException
	 */
public List&lt;ProcedureBean&gt; getImmunizationCPTCodes() throws DBException {;

/**
	 * Returns a particular procedure description for a code.
	 * 
	 * @param code The string representation of the code.
	 * @return The textual description of the code.
	 * @throws DBException
	 */
public ProcedureBean getCPTCode(String code) throws DBException {;

/**
	 * Adds a new CPT code, returns that it was added successfully
	 * 
	 * @param proc A ProcedureBean representing the new code information.
	 * @return A boolean for whether the operation was successful.
	 * @throws DBException
	 * @throws iTrustException
	 */
public boolean addCPTCode(ProcedureBean proc) throws DBException, iTrustException {;

/**
	 * Change the procedure description for a particular CPT code
	 * 
	 * @param proc A ProcedureBean representing the new code information.
	 * @return A boolean for whether the operation was successful.
	 * @throws DBException
	 */
public int updateCode(ProcedureBean proc) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DrugInteractionDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.DrugInteractionBean;
import edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Used for managing drug interactions.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
 * @author Andy
 * 
 */
public class DrugInteractionDAO {

private DAOFactory factory;
private DrugInteractionBeanLoader interactionLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public DrugInteractionDAO(DAOFactory factory) {;

/**
	 * Returns a list of all drug interactions for the input drug name
	 * 
	 * @return A java.util.List of DrugInteractionBeans.
	 * @throws DBException
	 */
public List&lt;DrugInteractionBean&gt; getInteractions(String drugCode) throws DBException {;

/**
	 * Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an
	 * iTrustException is thrown.
	 * 
	 * @param firstDrug  The name of the first drug in an interaction.
	 * @param secondDrug  The name of the second drug in an interaction.
	 * @param description  Explanation of the drug interaction.
	 * @return A boolean indicating success or failure.
	 * @throws DBException
	 * @throws iTrustException
	 */
public boolean reportInteraction(String firstDrug, String secondDrug, String description) throws DBException, iTrustException {;

/**
	 * Remove an interaction from the database
	 * 
	 * @param firstDrug  The name of the first patient
	 * @param secondDrug  The name of the second patient
	 * @return true if removed successfully, false if not in list
	 */
public boolean deleteInteraction(String firstDrug,String secondDrug) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_FakeEmailDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.Email;
import edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class FakeEmailDAO {

private DAOFactory factory;
private EmailBeanLoader emailBeanLoader = new EmailBeanLoader();

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public FakeEmailDAO(DAOFactory factory) {;

/**
	 * Return all emails that have been &quot;sent&quot; (inserted into the database)
	 * 
	 * @return A java.util.List of Email objects representing fake e-mails.
	 * @throws DBException
	 */
public List&lt;Email&gt; getAllEmails() throws DBException {;

/**
	 * Return all emails that a person has sent
	 * 
	 * @param email The &quot;From&quot; email address as a string.
	 * @return A java.util.List of fake emails.
	 * @throws DBException
	 */
public List&lt;Email&gt; getEmailsByPerson(String email) throws DBException {;

/**
	 * &quot;Send&quot; an email, which just inserts it into the database.
	 * 
	 * @param email The Email object to insert.
	 * @throws DBException
	 */
public void sendEmailRecord(Email email) throws DBException {;

/**
	 * Returns a list of emails that have the given string as a substring of the body
	 * @param string The string to search within the body.
	 * @return A java.util.List of fake emails.
	 * @throws DBException 
	 */
public List&lt;Email&gt; getEmailWithBody(String bodySubstring) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_FamilyDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
import edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Used for queries related to families.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class FamilyDAO {

private DAOFactory factory;
private FamilyBeanLoader familyBeanLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public FamilyDAO(DAOFactory factory) {;

/**
	 * Return the information of the mother and father of this patient
	 * 
	 * @param pid -
	 *            this patient
	 * @return
	 * @throws DBException
	 */
public List&lt;FamilyMemberBean&gt; getParents(long pid) throws DBException {;

/**
	 * Return a list of patients who share at least one parent (and that parent is not '0') with this patient
	 * 
	 * @param pid -
	 *            this patient
	 * @return A java.util.list of FamilyMemberBeans.
	 * @throws DBException
	 */
public List&lt;FamilyMemberBean&gt; getSiblings(long pid) throws DBException {;

/**
	 * Return a list of patients whose mother or father is this patient
	 * 
	 * @param pid -
	 *            this patient
	 * @return A java.util.List of FamilyMemberBeans.
	 * @throws DBException
	 */
public List&lt;FamilyMemberBean&gt; getChildren(long pid) throws DBException {;

/**
	 * Private helper method (since all three are alike)
	 * 
	 * @param pid
	 * @param relation
	 * @param query
	 * @param secondParam -
	 *            add the pid as the second parameter (the 3rd query was a little different)
	 * 
	 * @return A java.util.List of FamilyMemberBeans.
	 * @throws DBException
	 */
private List&lt;FamilyMemberBean&gt; getFamilyMembers(long pid, String relation, String query, boolean secondParam) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_HealthRecordsDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Used for all health records where a whole history is kept.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class HealthRecordsDAO {

private HealthRecordsBeanLoader loader = new HealthRecordsBeanLoader();

private DAOFactory factory;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public HealthRecordsDAO(DAOFactory factory) {;

/**
	 * Returns a list of all health records for a particular patient
	 * 
	 * @param mid The MID of the patient to look up.
	 * @return A java.util.List of HealthRecords.
	 * @throws DBException
	 */
public List&lt;HealthRecord&gt; getAllHealthRecords(long mid) throws DBException {;

/**
	 * Adds a health record for a particular patient
	 * 
	 * @param record The HealthRecord object to insert.
	 * @return A boolean indicating whether the insert was successful.
	 * @throws DBException
	 */
public boolean add(HealthRecord record) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_HospitalsDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Used for managing hospitals
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class HospitalsDAO {

private DAOFactory factory;
private HospitalBeanLoader hospitalLoader = new HospitalBeanLoader();

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public HospitalsDAO(DAOFactory factory) {;

/**
	 * Returns a list of all hospitals sorted alphabetically
	 * 
	 * @return A java.util.List of HospitalBeans.
	 * @throws DBException
	 */
public List&lt;HospitalBean&gt; getAllHospitals() throws DBException {;

/**
	 * Returns a particular hospital given its ID
	 * 
	 * @param id The String ID of the hospital.
	 * @return A HospitalBean representing this hospital.
	 * @throws DBException
	 */
public HospitalBean getHospital(String id) throws DBException {;

/**
	 * Adds a hospital
	 * 
	 * @param hosp The HospitalBean object to insert.
	 * @return A boolean indicating whether the insertion was successful.
	 * @throws DBException
	 * @throws iTrustException
	 */
public boolean addHospital(HospitalBean hosp) throws DBException, iTrustException {;

/**
	 * Updates a particular hospital's description. Returns the number of rows affected (should be 1)
	 * 
	 * @param hosp The HospitalBean to update.
	 * @return An int indicating the number of affected rows.
	 * @throws DBException
	 */
public int updateHospital(HospitalBean hosp) throws DBException {;

/**
	 * Assign an HCP to a hospital. If they have already been assigned to that hospital, then an
	 * iTrustException is thrown.
	 * 
	 * @param hcpID The HCP's MID to assign to the hospital.
	 * @param hospitalID The ID of the hospital to assign them to.
	 * @return A boolean indicating whether the assignment was a success.
	 * @throws DBException
	 * @throws iTrustException
	 */
public boolean assignHospital(long hcpID, String hospitalID) throws DBException, iTrustException {;

/**
	 * Unassigns an HCP to a hospital. Returns whether or not any changes were made
	 * 
	 * @param hcpID The MID of the HCP to remove.
	 * @param hospitalID The ID of the hospital being removed from.
	 * @return A boolean indicating success.
	 * @throws DBException
	 */
public boolean removeHospitalAssignment(long hcpID, String hospitalID) throws DBException {;

/**
	 * Removes all hospital assignments for a particular HCP. Returns the number of rows affected.
	 * 
	 * @param hcpID The MID of the HCP.
	 * @return An int representing the number of hospital assignments removed.
	 * @throws DBException
	 */
public int removeAllHospitalAssignmentsFrom(long hcpID) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ICDCodesDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Used for managing all ICD codes.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * The International Statistical Classification of Diseases and Related Health Problems 
 * (most commonly known by the abbreviation ICD) provides codes to classify diseases and a 
 * wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and 
 * external causes of injury or disease. 
 * 
 * @see http://www.cdc.gov/nchs/icd9.htm
 * @author Andy
 * 
 */
public class ICDCodesDAO {

private DAOFactory factory;
private DiagnosisBeanLoader diagnosisLoader = new DiagnosisBeanLoader();

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public ICDCodesDAO(DAOFactory factory) {;

/**
	 * Returns all ICD9CM codes sorted by code
	 * 
	 * @return java.util.List of DiagnosisBeans
	 * @throws DBException
	 */
public List&lt;DiagnosisBean&gt; getAllICDCodes() throws DBException {;

/**
	 * Returns a particular description for a given code
	 * 
	 * @param code The String representation of the code.
	 * @return A DiagnosisBean of the code.
	 * @throws DBException
	 */
public DiagnosisBean getICDCode(String code) throws DBException {;

/**
	 * Adds an ICD9CM code. Returns whether or not the change was made.
	 * 
	 * @param diag The DiagnosisBean representing the changes.
	 * @return A boolean indicating success.
	 * @throws DBException
	 * @throws iTrustException
	 */
public boolean addICDCode(DiagnosisBean diag) throws DBException, iTrustException {;

/**
	 * Changes a the description of a particular code.
	 * 
	 * @param diag A DiagnosisBean representing the changes.
	 * @return A boolean indicating the number of updated rows.
	 * @throws DBException
	 */
public int updateCode(DiagnosisBean diag) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_LOINCDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.LOINCbean;
import edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * Logical Observation Identifiers Names and Codes (LOINC) is a database and universal
 *  standard for identifying medical laboratory observations. 
 *  
 * @see http://loinc.org/
 * @author Ben Smith
 */
public class LOINCDAO {

private DAOFactory factory;
private LOINCBeanLoader LOINCLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public LOINCDAO(DAOFactory factory) {;

/**
	 * Adds a LOINC
	 * 
	 * @param hosp The LOINCbean representing the new code to be added.
	 * @throws DBException
	 * @throws iTrustException
	 */
public void addLOINC(LOINCbean hosp) throws DBException, iTrustException {;

/**
	 * Returns all LOINCs associated with LaboratoryProcedureCode
	 * 
	 * @param visitID The code of the Laboratory Procedure Code as a String.
	 * @return A java.util.List of LOINCBeans matching the Laboratory Procedure Code.
	 * @throws DBException
	 */
public List&lt;LOINCbean&gt; getProcedures(String visitID) throws DBException {;

/**
	 * Updates the information in LOINC.
	 * 
	 * @param ov
	 * @throws DBException
	 */
public int update(LOINCbean ov) throws DBException {;

/**
	 * Returns all LOINCs as a list.
	 * 
	 * @return A java.util.List of LOINCbeans.
	 * @throws DBException
	 */
public List&lt;LOINCbean&gt; getAllLOINC() throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_LabProcedureDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * A DAO for managing lab procedure codes. Database Access Object. All info coming into a DAO is already validated. 
 * Just worry about DB stuff here. Note that all DAOs need to have a DAOFactory with which to access other 
 * DAOs and to get connections. Also, every DAO must have a constructor with a DAOFactory as a parameter.
 */
public class LabProcedureDAO {

private DAOFactory factory;
private LabProcedureBeanLoader labProcedureLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public LabProcedureDAO(DAOFactory factory) {;

/**
	 * Get a list of the lab procedures associated with a given patient.
	 * @param id The MID of the patient as a long.
	 * @return A java.util.List of LabProcedureBeans
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getLabProceduresForPatient(long id) throws DBException {;

/**
	 * Gets all the lab procedures for a given patient that occur within the next month.
	 * @param id The MID of the patient as a long.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getLabProceduresForPatientForNextMonth(long id) throws DBException {;

/**
	 * Gets an individual lab procedure.
	 * @param id The ID of the lab procedure.
	 * @return A LabProcedureBean representing the procedure.
	 * @throws DBException
	 */
public LabProcedureBean getLabProcedure(long id) throws DBException {;

/**
	 * Gets all procedures for Patient
	 * @param mid patient id
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getAllLabProceduresDate(long mid) throws DBException {;

/**
	 * This gets all the procedures for a particular patient on a particular office visit
	 * @param mid The MID of the patient.
	 * @param ovid The Office Visit ID.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getAllLabProceduresForDocOV(long mid, long ovid) throws DBException {;

/**
	 * This gets all the procedures for a particular patient on a particular office visit
	 * @param mid The MID of the patient.
	 * @param ovid The Office Visit ID.
	 * @return A java.util.List of LabProcedureBeans
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getAllLabProceduresForDocOV(long ovid) throws DBException {;

/**
	 * Gets all lab procedures, period.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getAllLabProcedures() throws DBException {;

/**
	 * Gets the lab procedures for a given LHCP that occur within the next month.
	 * @param ovid The Office Visit ID conducted by the LHCP in question.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getLabProceduresForLHCPForNextMonth(long ovid) throws DBException {;

/**
	 * Inserts a lab procedure into the database.
	 * @param b The LabProcedureBean to be inserted.
	 * @return A long containing the ID of the newly inserted lab procedure bean.
	 * @throws DBException
	 */
public long addLabProcedure(LabProcedureBean b) throws DBException {;

/**
	 * Updates an existing lab procedure.
	 * @param b The LabProcedureBean representing the procedure to be updated.
	 * @throws DBException
	 */
public void updateLabProcedure(LabProcedureBean b) throws DBException {;

/**
	 * Gets all the lab procedures that correspond to a particular LOINC.
	 * @param id The LOINC in question.
	 * @return A java.util.List of LabProcedureBeans.
	 * @throws DBException
	 */
public List&lt;LabProcedureBean&gt; getAllLabProceduresLOINC(long id) throws DBException {;

/**
	 * Updates the rights of a user on a given lab procedure.
	 * @param b The LabProcedureBean in question.
	 * @throws DBException
	 */
public void updateRights(LabProcedureBean b) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_MessageDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Used for the logging mechanism.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class MessageDAO {

private DAOFactory factory;
private MessageBeanLoader mbLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public MessageDAO(DAOFactory factory) {;

/**
	 * Gets all the messages for a certain user MID.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getMessagesFor(long mid) throws SQLException {;

/**
	 * Gets all the messages for a certain user MID sorted by ascending time.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getMessagesTimeAscending(long mid) throws SQLException {;

/**
	 * Gets all the messages for a certain user MID sorted by name ascending.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getMessagesNameAscending(long mid) throws SQLException {;

/**
	 * Gets all the messages for a certain user MID sorted by name descending.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getMessagesNameDescending(long mid) throws SQLException {;

/**
	 * Gets all the messages from a certain user MID.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getMessagesFrom(long mid) throws SQLException {;

/**
	 * Gets all the messages for a certain user MID sorted by ascending time.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getMessagesFromTimeAscending(long mid) throws SQLException {;

/**
	 * Gets all the messages for a certain user MID sorted by name ascending.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getMessagesFromNameAscending(long mid) throws SQLException {;

/**
	 * Gets all the messages for a certain user MID sorted by name descending.
	 * @param mid The MID of the user to be looked up.
	 * @return A java.util.List of MessageBeans.
	 * @throws SQLException
	 */
public List&lt;MessageBean&gt; getMessagesFromNameDescending(long mid) throws SQLException {;

/**
	 * Adds a message to the database.
	 * @param mBean A bean representing the message to be added.
	 * @throws SQLException
	 */
public void addMessage(MessageBean mBean) throws SQLException {;

public void updateRead(MessageBean mBean) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_NDCodesDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Used for managing the ND Codes.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * The National Drug Code (NDC) is a universal product identifier used in the
 * United States for drugs intended for human use.
 * 
 * @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
 * @author Andy
 * 
 */
public class NDCodesDAO {

private DAOFactory factory;
private MedicationBeanLoader medicationLoader = new MedicationBeanLoader();

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public NDCodesDAO(DAOFactory factory) {;

/**
	 * Returns a list of all ND codes
	 * 
	 * @return A java.util.List of MedicationBeans.
	 * @throws DBException
	 */
public List&lt;MedicationBean&gt; getAllNDCodes() throws DBException {;

/**
	 * Returns a particular description for a given code.
	 * 
	 * @param code The ND code to be looked up.
	 * @return A bean representing the Medication that was looked up.
	 * @throws DBException
	 */
public MedicationBean getNDCode(String code) throws DBException {;

/**
	 * Adds a new ND code, returns whether or not the change was made. If the code already exists, an
	 * iTrustException is thrown.
	 * 
	 * @param med The medication bean to be added.
	 * @return A boolean indicating success or failure.
	 * @throws DBException
	 * @throws iTrustException
	 */
public boolean addNDCode(MedicationBean med) throws DBException, iTrustException {;

/**
	 * Updates a particular code's description
	 * 
	 * @param med A bean representing the particular medication to be updated.
	 * @return An int representing the number of updated rows.
	 * @throws DBException
	 */
public int updateCode(MedicationBean med) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_OfficeVisitDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.PrescriptionReportBean;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader;
import edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Used for doing tasks related to office visits. Use this for linking diagnoses to office visits, and similar
 * tasks.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class OfficeVisitDAO {

private DAOFactory factory;
private OfficeVisitLoader officeVisitLoader = new OfficeVisitLoader();

private DiagnosisBeanLoader diagnosisLoader = new DiagnosisBeanLoader(true);

private PrescriptionBeanLoader prescriptionLoader = new PrescriptionBeanLoader();

private PrescriptionReportBeanLoader prescriptionReportBeanLoader = new PrescriptionReportBeanLoader();

private ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader(true);

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public OfficeVisitDAO(DAOFactory factory) {;

/**
	 * Adds an visit and return its ID
	 * 
	 * @param ov The OfficeVisitBean to be added.
	 * @return A long indicating the unique ID for the office visit.
	 * @throws DBException
	 */
public long add(OfficeVisitBean ov) throws DBException {;

private void setValues(PreparedStatement ps, OfficeVisitBean ov) throws SQLException {;

/**
	 * Updates the information in a particular office visit.
	 * 
	 * @param ov The Office Visit bean representing the changes.
	 * @throws DBException
	 */
public void update(OfficeVisitBean ov) throws DBException {;

/**
	 * Returns a particular office visit given an ID
	 * 
	 * @param visitID The unique ID of the office visit.
	 * @return An OfficeVisitBean with the specifics for that office visit.
	 * @throws DBException
	 */
public OfficeVisitBean getOfficeVisit(long visitID) throws DBException {;

private OfficeVisitBean loadFullOfficeVist(ResultSet rs, long visitID) throws SQLException, DBException {;

/**
	 * Returns all of the procedures associated with the given office visit
	 * 
	 * @param visitID The unique ID of the office visit.
	 * @return A java.util.List of procedures.
	 * @throws DBException
	 */
public List&lt;ProcedureBean&gt; getProcedures(long visitID) throws DBException {;

/**
	 * Returns all of the prescriptions associated with the given office visit
	 * 
	 * @param visitID The ID of the office visit.
	 * @return A java.util.List of prescriptions.
	 * @throws DBException
	 */
public List&lt;PrescriptionBean&gt; getPrescriptions(long visitID) throws DBException {;

/**
	 * Returns all of the diagnoses associated with the given office visit
	 * 
	 * @param visitID The unique ID of the office visit.
	 * @return A java.util.List of diagnoses.
	 * @throws DBException
	 */
public List&lt;DiagnosisBean&gt; getDiagnoses(long visitID) throws DBException {;

/**
	 * Adds the given CPT codes to the given office visit
	 * 
	 * @param cptCode
	 * @param visitID
	 * @return
	 * @throws DBException
	 */
public long addProcedureToOfficeVisit (String cptCode, long visitID, String hcpid) throws DBException {;

/**
	 * Removes the given procedure from its office visit
	 * 
	 * @param ovProcedureID The unique ID of the office visit procedure.
	 * @throws DBException
	 */
public void removeProcedureFromOfficeVisit(long ovProcedureID) throws DBException {;

/**
	 * Adds a prescription bean to the database.
	 * @param pres The prescription bean to be added.
	 * @return The unique ID of the newly added bean.
	 * @throws DBException
	 */
public long addPrescription(PrescriptionBean pres) throws DBException {;

/**
	 * Edits an existing prescription bean.
	 * 
	 * @param pres The newly updated prescription bean.
	 * @return A long indicating the ID of the newly updated prescription bean.
	 * @throws DBException
	 */
public long editPrescription(PrescriptionBean pres) throws DBException {;

/**
	 * Removes the given medication from its office visit
	 * 
	 * @param ovMedicationID The unique ID of the medication to be removed.
	 * @throws DBException
	 */
public void removePrescription(long ovMedicationID) throws DBException {;

/**
	 * Adds the given CPT codes to the given office visit
	 * @param icd A double representing the ICD code to be added.
	 * @param visitID The ID of the office visit we are adding the code to.
	 * @return A long for the new ICD code's ID.
	 * @throws DBException
	 */
public long addDiagnosisToOfficeVisit(double icd, long visitID) throws DBException {;

/**
	 * Removes a particular diagnosis from its office visit
	 * 
	 * @param ovDiagnosisID The ID for the office visit diagnosis to be removed. 
	 * @throws DBException
	 */
public void removeDiagnosisFromOfficeVisit(long ovDiagnosisID) throws DBException {;

/**
	 * Adds a LOINCCode to an office visit.
	 * 
	 * @param LOINCCode A string of the code being added.
	 * @param visitID The ID of the office visit the code is being added to.
	 * @param pid The patient's MID associated with this transaction.
	 * @return The unique ID of the code that was added.
	 * @throws DBException
	 */
public long addLabProcedureToOfficeVisit(String LOINCCode, long visitID, long pid) throws DBException {;

/**
	 * Removes a given lab procedure.
	 * 
	 * @param labProcedureID The unique ID of the lab procedure.
	 * @throws DBException
	 */
public void removeLabProcedureFromOfficeVisit(long labProcedureID) throws DBException {;

/**
	 * Returns whether or not an office visit actually exists
	 * 
	 * @param ovID The ID of the office visit to be checked.
	 * @param pid The MID of the patient associated with this transaction.
	 * @return A boolean indicating its existence.
	 * @throws DBException
	 */
public boolean checkOfficeVisitExists(long ovID, long pid) throws DBException {;

/**
	 * Returns a list of all office visits for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of OfficeVisitBeans.
	 * @throws DBException
	 */
public List&lt;OfficeVisitBean&gt; getAllOfficeVisits(long pid) throws DBException {;

/**
	 * Returns a list of all office visits for a given patient
	 * 
	 * @param mid The MID of the LHCP you are looking up.
	 * @return A java.util.List of Office Visits.
	 * @throws DBException
	 */
public List&lt;OfficeVisitBean&gt; getAllOfficeVisitsForLHCP(long mid) throws DBException {;

/**
	 * Returns a list of all office visits for a given patient
	 * 
	 * @param pid The MID of the patient.
	 * @return A java.util.List of Office Visits.
	 * @throws DBException
	 */
public List&lt;OfficeVisitBean&gt; getOfficeVisitsWithNoSurvey(long pid) throws DBException {;

/**
	 * Returns a list of information related to prescription reports given all of the office visits and the
	 * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the
	 * disambiguation is for security reasons).
	 * 
	 * @param ovIDs A java.util.List of Longs for the office visits.
	 * @param patientID A long representing the MID of the patient in question.
	 * @return A java.util.List of prescription reports.
	 * @throws DBException
	 */
public List&lt;PrescriptionReportBean&gt; getPrescriptionReportsByDate(long patientID, String startDate, String endDate) throws DBException {;

/**
	 * Returns a list of information related to prescription reports given all of the office visits and the
	 * patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the
	 * disambiguation is for security reasons).
	 * 
	 * @param ovIDs A java.util.List of Longs for the office visits.
	 * @param patientID A long representing the MID of the patient in question.
	 * @return A java.util.List of prescription reports.
	 * @throws DBException
	 */
public List&lt;PrescriptionReportBean&gt; getPrescriptionReports(List&lt;Long&gt; ovIDs, long patientID) throws DBException {;

private void prepareOVIDs(PreparedStatement ps, List&lt;Long&gt; ovIDs) throws SQLException {;

private String buildPreps(int size) {;

/**
	 * Returns a list of all office visits at a given hospital
	 * @param hospitalID the id of the hospital
	 * @return a list of the OfficeVisitBeans that hold the office visits
	 * @throws DBException in the event of a database error
	 */
public List&lt;OfficeVisitBean&gt; getOfficeVisitsFromHospital(String hospitalID) throws DBException{;

/**
	 * Gets all office visits corresponding to a particular ICD diagnosis.
	 * 
	 * @param icdcode A string represnting the ICD diagnosis to look up.
	 * @return A java.util.List of Office visits.
	 * @throws DBException
	 */
public List&lt;OfficeVisitBean&gt; getAllOfficeVisitsForDiagnosis(String icdcode) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PatientDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.PatientLoader;
import edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader;
import edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.DateUtil;
/**
 * Used for managing all static information related to a patient. For other information related to all aspects
 * of patient care, see the other DAOs.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class PatientDAO {

private DAOFactory factory;
private PatientLoader patientLoader;
private PersonnelLoader personnelLoader;
private DiagnosisBeanLoader diagnosisLoader;
private PrescriptionBeanLoader prescriptionLoader;
private ProcedureBeanLoader procedureLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public PatientDAO(DAOFactory factory) {;

/**
	 * Returns the name for the given MID
	 * 
	 * @param mid The MID of the patient in question.
	 * @return A String representing the patient's first name and last name.
	 * @throws iTrustException
	 * @throws DBException
	 */
public String getName(long mid) throws iTrustException, DBException {;

/**
	 * Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO
	 * 
	 * @param mid The MID of the patient in question.
	 * @param role A String representing the role of the patient.
	 * @return A String representing the patient's role.
	 * @throws iTrustException
	 * @throws DBException
	 */
public String getRole(long mid, String role) throws iTrustException, DBException {;

/**
	 * Adds an empty patient to the table, returns the new MID
	 * 
	 * @return The MID of the patient as a long.
	 * @throws DBException
	 */
public long addEmptyPatient() throws DBException {;

/**
	 * Returns the patient's information for a given ID
	 * 
	 * @param mid The MID of the patient to retrieve.
	 * @return A PatientBean representing the patient.
	 * @throws DBException
	 */
public PatientBean getPatient(long mid) throws DBException {;

/**
	 * Updates a patient's information for the given MID
	 * 
	 * @param p The patient bean representing the new information for the patient.
	 * @throws DBException
	 */
public void editPatient(PatientBean p) throws DBException {;

/**
	 * Returns whether or not the patient exists
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A boolean indicating whether the patient exists.
	 * @throws DBException
	 */
public boolean checkPatientExists(long pid) throws DBException {;

/**
	 * Returns a list of HCPs who are declared by the given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of Personnel Beans.
	 * @throws DBException
	 */
public List&lt;PersonnelBean&gt; getDeclaredHCPs(long pid) throws DBException {;

/**
	 * Declares an HCP for a particular patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @param hcpID The HCP's MID.
	 * @return A boolean as to whether the insertion was successful.
	 * @throws DBException
	 * @throws iTrustException
	 */
public boolean declareHCP(long pid, long hcpID) throws DBException, iTrustException {;

/**
	 * Undeclare an HCP for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @param hcpID The MID of the HCP in question.
	 * @return A boolean indicating whether the action was successful.
	 * @throws DBException
	 */
public boolean undeclareHCP(long pid, long hcpID) throws DBException {;

/**
	 * Check if a patient has declared the given HCP
	 * 
	 * @param pid The MID of the patient in question as a long.
	 * @param hcpid The MID of the HCP in question as a long.
	 * @return
	 * @throws DBException
	 */
public boolean checkDeclaredHCP(long pid, long hcpid) throws DBException {;

/**
	 * Return a list of patients that the given patient represents
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of PatientBeans
	 * @throws DBException
	 */
public List&lt;PatientBean&gt; getRepresented(long pid) throws DBException {;

/**
	 * Return a list of patients that the given patient is represented by
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of PatientBeans.
	 * @throws DBException
	 */
public List&lt;PatientBean&gt; getRepresenting(long pid) throws DBException {;

/**
	 * Check if the given representer represents the representee
	 * 
	 * @param representer The MID of the representer in question.
	 * @param representee The MID of the representee in question.
	 * @return A boolean indicating whether represenation is in place.
	 * @throws DBException
	 */
public boolean represents(long representer, long representee) throws DBException {;

/**
	 * Assign a representer to the representee
	 * 
	 * @param representer The MID of the representer as a long.
	 * @param representee The MID of the representee as a long.
	 * @return A boolean as to whether the insertion was correct.
	 * @throws DBException
	 * @throws iTrustException
	 */
public boolean addRepresentative(long representer, long representee) throws DBException, iTrustException {;

/**
	 * Unassign the representation
	 * 
	 * @param representer The MID of the representer in question.
	 * @param representee The MID of the representee in question.
	 * @return A boolean indicating whether the unassignment was sucessful.
	 * @throws DBException
	 */
public boolean removeRepresentative(long representer, long representee) throws DBException {;

/**
	 * Return a list of all diagnoses for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of Diagnoses.
	 * @throws DBException
	 */
public List&lt;DiagnosisBean&gt; getDiagnoses(long pid) throws DBException {;

/**
	 * Return a list of all procedures for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of all the procedures.
	 * @throws DBException
	 */
public List&lt;ProcedureBean&gt; getProcedures(long pid) throws DBException {;

/**
	 * Return a list of all immunization procedures for a given patient
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of the procedures.
	 * @throws DBException
	 */
public List&lt;ProcedureBean&gt; getImmunizationProcedures(long pid) throws DBException {;

/**
	 * Return a list of all prescriptions for a patient
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A java.util.List of prescriptions.
	 * @throws DBException
	 */
public List&lt;PrescriptionBean&gt; getPrescriptions(long patientID) throws DBException {;

/**
	 * Return a list of prescriptions which are currently prescribed for a patient
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A java.util.List of prescription beans.
	 * @throws DBException
	 */
public List&lt;PrescriptionBean&gt; getCurrentPrescriptions(long patientID) throws DBException {;

/**
	 * Return a list of prescriptions which are expired prescription for a patient
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A java.util.List of prescriptions.
	 * @throws DBException
	 **/
public List&lt;PrescriptionBean&gt; getExpiredPrescriptions (long patientID) throws DBException {;

/**
	 * Lists every patient in the database.
	 * 
	 * @return A java.util.List of PatientBeans representing the patients.
	 * @throws DBException
	 */
public List&lt;PatientBean&gt; getAllPatients() throws DBException {;

/**
	 * Return a list of patients with a special-diagnosis-history who
	 * have the logged in HCP as a DHCP and whose medications are going to
	 * expire within seven days.
	 * 
	 * @param hcpMID The MID of the logged in HCP
	 * @return A list of patients satisfying the conditions.
	 * @throws DBException
	 */
public List&lt;PatientBean&gt; getRenewalNeedsPatients(long hcpMID) throws DBException {;

/**
	 * Returns all patients with names &quot;LIKE&quot; (as in SQL) the passed in parameters.
	 * 
	 * @param first The patient's first name.
	 * @param last The patient's last name.
	 * @return A java.util.List of PatientBeans.
	 * @throws DBException
	 */
public List&lt;PatientBean&gt; searchForPatientsWithName(String first, String last) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PersonnelDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
import edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader;
import edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
import edu.ncsu.csc.itrust.enums.Role;
/**
 * Used for managing information related to personnel: HCPs, UAPs, Admins
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class PersonnelDAO {

private DAOFactory factory;
private PersonnelLoader personnelLoader;
private HospitalBeanLoader hospitalBeanLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public PersonnelDAO(DAOFactory factory) {;

/**
	 * Returns the name for a given MID
	 * 
	 * @param mid The MID of the personnel in question.
	 * @return A String representing the name of the personnel.
	 * @throws iTrustException
	 * @throws DBException
	 */
public String getName(long mid) throws iTrustException, DBException {;

/**
	 * Adds an empty personnel, and returns the MID.
	 * 
	 * @return A long indicating the new MID.
	 * @param role A {@link Role} enum indicating the personnel's specific role.
	 * @throws DBException
	 * @throws iTrustException
	 */
public long addEmptyPersonnel(Role role) throws DBException, iTrustException {;

/**
	 * Retrieves a PersonnelBean with all of the specific information for a given employee.
	 * 
	 * @param mid The MID of the personnel in question.
	 * @return A PersonnelBean representing the employee.
	 * @throws DBException
	 */
public PersonnelBean getPersonnel(long mid) throws DBException {;

/**
	 * Updates the demographics for a personnel.
	 * 
	 * @param p The personnel bean with the updated information.
	 * @throws DBException
	 */
public void editPersonnel(PersonnelBean p) throws DBException {;

/**
	 * Indicates whether a certain personnel is in the database.
	 * 
	 * @param pid The MID of the personnel in question.
	 * @return A boolean indicating whether this personnel exists.
	 * @throws DBException
	 */
public boolean checkPersonnelExists(long pid) throws DBException {;

/**
	 * Returns all of the hospitals this LHCP is associated with.
	 * 
	 * @param mid The MID of the personnel in question.
	 * @return A java.util.List of HospitalBeans.
	 * @throws DBException
	 */
public List&lt;HospitalBean&gt; getHospitals(long mid) throws DBException {;

/**
	 * Returns all personnel in the database.
	 * 
	 * @return A java.util.List of personnel.
	 * @throws DBException
	 */
public List&lt;PersonnelBean&gt; getAllPersonnel() throws DBException {;

/**
	 * Returns a list of UAPs who work for this LHCP.
	 * 
	 * @param hcpid The MID of the personnel in question.
	 * @return A java.util.List of UAPs.
	 * @throws DBException
	 */
public List&lt;PersonnelBean&gt; getUAPsForHCP(long hcpid) throws DBException {;

/**
	 * Given a prescription that has been given, this method returns all the information for the
	 * doctor who authorized that prescription.
	 * 
	 * @param prescription The PrescriptionBean describing the prescription in question.
	 * @return The PersonnelBean describing the doctor who authorized it.
	 * @throws DBException
	 */
public PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {;

/**
	 * Matches all personnel who have names LIKE (as in SQL) the first and last names passed in.
	 * 
	 * @param first The first name to be searched for.
	 * @param last The last name to be searched for.
	 * @return A java.util.List of personnel who match these names.
	 * @throws DBException
	 */
public List&lt;PersonnelBean&gt; searchForPersonnelWithName(String first, String last) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ReferralDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ReferralBean;
import edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Used to update referrals, and fetch lists of referrals sent to and
 * from HCPs.
 *
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 */
public class ReferralDAO {

private DAOFactory factory;
private ReferralBeanLoader referralLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public ReferralDAO(DAOFactory factory) {;

/**
	 * Gets a list of all referrals sent from an HCP
	 * @param mid The HCP's mid.
	 * @return The list of the referrals they sent.
	 * @throws DBException
	 */
public List&lt;ReferralBean&gt; getReferralsSentFrom(long mid) throws DBException {;

/**
	 * Gets a list of all referrals sent to an HCP
	 * @param mid The HCP's mid.
	 * @return The list of the referrals sent to them.
	 * @throws DBException
	 */
public List&lt;ReferralBean&gt; getReferralsSentTo(long mid) throws DBException {;

/**
	 * Updates a given referral in the database.
	 * @param r The referral to update.
	 * @throws DBException
	 */
public void editReferral(ReferralBean r) throws DBException {;

/**
	 * Adds a given referral to the database.
	 * @param r The referral to add.
	 * @throws DBException
	 */
public void addReferral(ReferralBean r) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_RemoteMonitoringDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.util.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.iTrustException;
/**
 * Used for the keeping track of remote monitoring data.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 */
public class RemoteMonitoringDAO {

private DAOFactory factory;
private RemoteMonitoringDataBeanLoader loader = new RemoteMonitoringDataBeanLoader();

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public RemoteMonitoringDAO(DAOFactory factory) {;

/**
	 * Returns patient data for a given HCP
	 * 
	 * @return
	 * @throws DBException
	 */
public List&lt;RemoteMonitoringDataBean&gt; getPatientsData(long loggedInMID) throws DBException {;

public List&lt;RemoteMonitoringDataBean&gt; getPatientDataByDate(long patientMID, Date lower, Date upper) throws DBException{;

/**
	 * Store data for a given patient in the RemoteMonitoringData table
	 * 
	 * @param patientMID The MID of the patient
	 * @param systolicBloodPressure The systolic blood pressure of the patient
	 * @param diastolicBloodPressure The diastolic blood pressure of the patient
	 * @param glucoseLevel The glucose level of the patient
	 * @param reporterRole  The role of the person that reported these monitoring stats
	 * @param reporterMID  The MID of the person that reported these monitoring stats
	 * @throws DBException
	 */
public void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel, String reporterRole, long reporterMID) throws DBException, iTrustException {;

/**
	 * Store data for a given patient in the RemoteMonitoringData table
	 * 
	 * @param patientMID The MID of the patient
	 * @param systolicBloodPressure The systolic blood pressure of the patient
	 * @param diastolicBloodPressure The diastolic blood pressure of the patient
	 * @param glucoseLevel The glucose level of the patient
	 * @param reporterRole  The role of the person that reported these monitoring stats
	 * @param reporterMID  The MID of the person that reported these monitoring stats
	 * @throws DBException
	 */
public void storePatientData(long patientMID, int glucoseLevel, String reporterRole, long reporterMID) throws DBException, iTrustException {;

/**
	 * Store data for a given patient in the RemoteMonitoringData table
	 * 
	 * @param patientMID The MID of the patient
	 * @param systolicBloodPressure The systolic blood pressure of the patient
	 * @param diastolicBloodPressure The diastolic blood pressure of the patient
	 * @param glucoseLevel The glucose level of the patient
	 * @param reporterRole  The role of the person that reported these monitoring stats
	 * @param reporterMID  The MID of the person that reported these monitoring stats
	 * @throws DBException
	 */
public void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, String reporterRole, long reporterMID) throws DBException, iTrustException {;

/**
	 * Private method to get the number of entries for a certain patientID for today.
	 * @param patientMID
	 * @return the number of entries
	 * @throws DBException
	 */
private int getNumberOfDailyEntries(long patientMID) throws DBException{;

public void validatePR(long representativeMID, long patientMID) throws iTrustException {;

/**
	 * Add a patient to the list of HCPs' monitoring lists of Patients
	 * 
	 * @param patientMID The MID of the patient
	 * @param HCPMID The MID of the HCP
	 * @return true if added successfully, false if already in list
	 */
public boolean addPatientToList(long patientMID, long HCPMID) throws DBException {;

/**
	 * Remove a patient from the list of HCPs' monitoring lists of Patients
	 * 
	 * @param patientMID The MID of the patient
	 * @param HCPMID The MID of the HCP
	 * @return true if removed successfully, false if not in list
	 */
public boolean removePatientFromList(long patientMID, long HCPMID) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ReportRequestDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.ReportRequestBean;
import edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Used for handling data related to report requests.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 */
public class ReportRequestDAO {

private DAOFactory factory;
private ReportRequestBeanLoader loader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public ReportRequestDAO(DAOFactory factory) {;

/**
	 * Returns a full bean describing a given report request.
	 * 
	 * @param id The unique ID of the bean in the database.
	 * @return The bean describing this report request.
	 * @throws DBException
	 */
public ReportRequestBean getReportRequest(long id) throws DBException {;

/**
	 * Returns all report requests associated with a given requester.
	 * 
	 * @param mid The MID of the personnel in question.
	 * @return A java.util.List of report requests.
	 * @throws DBException
	 */
public List&lt;ReportRequestBean&gt; getAllReportRequestsForRequester(long mid) throws DBException {;

/**
	 * Returns all of the report requests associated with a specific patient.
	 * 
	 * @param pid The MID of the patient in question.
	 * @return A java.util.List of report requests.
	 * @throws DBException
	 */
public List&lt;ReportRequestBean&gt; getAllReportRequestsForPatient(long pid) throws DBException {;

//	/**
//	 * Returns every report request in the database.
//	 * @return A java.util.List of report requests.
//	 * @throws DBException
//	 */
//	public List&lt;ReportRequestBean&gt; getAllReportRequests() throws DBException {
//		Connection conn = null;
//		PreparedStatement ps = null;
//
//		try {
//			conn = factory.getConnection();
//			ps = conn.prepareStatement(&quot;SELECT * FROM ReportRequests&quot;);
//			ResultSet rs = ps.executeQuery();
//			return loader.loadList(rs);
//		} catch (SQLException e) {
//			e.printStackTrace();
//			throw new DBException(e);
//		} finally {
//			DBUtil.closeConnection(conn, ps);
//		}
//	}
/**
	 * Adds a request for a report.
	 * 
	 * @param requesterMID The MID of the requester.
	 * @param patientMID The MID of the patient in question.
	 * @param date The date the request was made.
	 * @return A long of the unique ID of the report request.
	 * @throws DBException
	 */
public long addReportRequest(long requesterMID, long patientMID, Date date) throws DBException {;

//	/**
//	 * Sets the status of a request to 'Approved'
//	 *
//	 * @param ID The unique ID of the report.
//	 * @param approverMID The MID of the person approving the request.
//	 * @param date The date the approval was made.
//	 * @throws DBException
//	 */
//	public void approveReportRequest(long ID, long approverMID, Date date) throws DBException {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		try {
//			if (ID == 0L) throw new SQLException(&quot;ID cannot be null&quot;);
//			conn = factory.getConnection();
//			ps = conn.prepareStatement(&quot;UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = 'Approved' where ID = ?&quot;);
//			ps.setLong(1, approverMID);
//			ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));
//			ps.setLong(3, ID);
//			ps.executeUpdate();
//		} catch (SQLException e) {
//			e.printStackTrace();
//			throw new DBException(e);
//		} finally {
//			DBUtil.closeConnection(conn, ps);
//		}
//	}
//
//	/**
//	 * Sets the status of a report request to 'Rejected'
//	 *
//	 * @param ID The unique ID of the request in question.
//	 * @param approverMID The MID of the rejecter in question.
//	 * @param date The date the rejection was made.
//	 * @param comment A comment describing why the request was rejected.
//	 * @throws DBException
//	 */
//	public void rejectReportRequest(long ID, long approverMID, Date date, String comment) throws DBException {
//		Connection conn = null;
//		PreparedStatement ps = null;
//		try {
//			if (ID == 0L) throw new SQLException(&quot;ID cannot be null&quot;);
//			conn = factory.getConnection();
//			ps = conn.prepareStatement(&quot;UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = 'Rejected', comment = ? where ID = ?&quot;);
//			ps.setLong(1, approverMID);
//			ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));
//			ps.setString(3, comment);
//			ps.setLong(4, ID);
//			ps.executeUpdate();
//		} catch (SQLException e) {
//			e.printStackTrace();
//			throw new DBException(e);
//		} finally {
//			DBUtil.closeConnection(conn, ps);
//		}
//	}
/**
	 * Sets the status of a report request to 'Viewed'
	 * 
	 * @param ID The unique ID of the request in question.
	 * @param date The date the request was viewed.
	 * @throws DBException
	 */
public void setViewed(long ID, Date date) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_RiskDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Used for finding risk factors for a given patient.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class RiskDAO {

private DAOFactory factory;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public RiskDAO(DAOFactory factory) {;

/**
	 * This method is implemented using {@link FamilyDAO} for 2 reasons: (a) definitions of family members
	 * might change, so it's better to centralize that code and (2) to make this code a little bit &quot;nicer&quot;
	 * even though it executes one query per family member. If this method gets slow, then you will need to
	 * refactor. Otherwise, let's just keep it simple...
	 * 
	 * @param patientID The MID of the patient in question.
	 * @param icdLower A double of the lower bound for the codes.
	 * @param icdUpper A double of the upper bound for the codes.
	 * @return A boolean indicating whether a family member had a match in this range.
	 * @throws DBException
	 */
public boolean hasFamilyHistory(long patientID, double icdLower, double icdUpper) throws DBException {;

private List&lt;FamilyMemberBean&gt; getFamilyMembers(long patientID) throws DBException {;

/**
	 * Returns whether or not a patient had a childhood infection for the exact, given ICD codes.
	 * 
	 * @param patientID The MID of the patient in question.
	 * @param icdCodes A parameter list of the ICD codes to match.
	 * @return A boolean indicating whether this patient had all the listed ICD codes.
	 * @throws DBException
	 */
public boolean hadChildhoodInfection(long patientID, double... icdCodes) throws DBException {;

private String createPrepared(int length) {;

private void setICDs(int start, PreparedStatement ps, double[] icdCodes) throws SQLException {;

/**
	 * Returns if the patient has ever smoked in their life
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A boolean indicating whether the patient smoked.
	 * @throws DBException
	 */
public boolean hasSmoked(long patientID) throws DBException {;

/**
	 * Returns if a patient has ever been diagnosed with the given ICD code, in the range [lower,upper)
	 * 
	 * @param patientID The MID of the patient in question.
	 * @param lowerICDCode A double of the lower ICD code.
	 * @param upperICDCode A double of the upper ICD code.
	 * @return A boolean indicating whether there was a match in the given range.
	 * @throws DBException
	 */
public boolean hadPriorDiagnoses(long patientID, double lowerICDCode, double upperICDCode) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SurveyDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.SurveyBean;
import edu.ncsu.csc.itrust.beans.loaders.SurveyLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * A DAO for handling all Survey data.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 */
public class SurveyDAO {

private DAOFactory factory;
private SurveyLoader surveyLoader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public SurveyDAO(DAOFactory factory) {;

/**
	 * Insert survey data into database.
	 * @param surveyBean The Bean representing the user's responses which will be inserted.
	 * @param date The date the survey was completed.
	 */
public void addCompletedSurvey(SurveyBean surveyBean, Date date) throws DBException {;

/**
	 * Gets survey data from the database by the office visit id. Creates an instance of an
	 * SurveyBean with data and returns it.
	 * 
	 * @param id The unique ID of the survey in question.
	 * @return A bean containing the SurveyBean.
	 * @throws DBException
	 */
public SurveyBean getSurveyData(long id) throws DBException {;

/**
	 * Has this survey been completed?
	 * 
	 * @param visitID The unique ID of the office visit we are wondering about.
	 * @return boolean indicating whether this survey is completed.
	 * @throws DBException
	 */
public boolean isSurveyCompleted(long visitID) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SurveyResultDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.SurveyResultBean;
import edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * A DAO for handling all Survey results.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 */
public class SurveyResultDAO {

private DAOFactory factory;
private SurveyResultBeanLoader loader;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public SurveyResultDAO(DAOFactory factory) {;

/**
	 * Returns all the survey results in the database that correspond to a particular zip code.
	 * 
	 * @param zip The zipcode we are interested in as a String.
	 * @param specialty The specialty we are interested in as a String.
	 * @return A java.util.List of SurveyResultBeans.
	 * @throws DBException
	 */
public List&lt;SurveyResultBean&gt; getSurveyResultsForZip(String zip, String specialty) throws DBException {;

/**
	 * Returns all the survey data associated with a given hospital and a certain specialty.
	 * 
	 * @param hospitalID The unique ID of the iTrust hospital we are querying about.
	 * @param specialty A string representing the specialty we are interested in.
	 * @return A java.util.List of SurveyResultBeans.
	 * @throws DBException
	 */
public List&lt;SurveyResultBean&gt; getSurveyResultsForHospital(String hospitalID, String specialty) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_TransactionDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Date;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.OperationalProfile;
import edu.ncsu.csc.itrust.beans.TransactionBean;
import edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader;
import edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Used for the logging mechanism.
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class TransactionDAO {

private DAOFactory factory;
private TransactionBeanLoader loader = new TransactionBeanLoader();

private OperationalProfileLoader operationalProfileLoader = new OperationalProfileLoader();

/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public TransactionDAO(DAOFactory factory) {;

/**
	 * Returns the whole transaction log
	 * 
	 * @return
	 * @throws DBException
	 */
public List&lt;TransactionBean&gt; getAllTransactions() throws DBException {;

/**
	 * Log a transaction, just giving it the person who is logged in and the type
	 * 
	 * @param type The {@link TransactionType} enum representing the type this transaction is.
	 * @param loggedInMID The MID of the user who is logged in.
	 * @throws DBException
	 */
public void logTransaction(TransactionType type, long loggedInMID) throws DBException {;

/**
	 * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on
	 * the transaction type.
	 * 
	 * @param type The {@link TransactionType} enum representing the type this transaction is.
	 * @param loggedInMID The MID of the user who is logged in.
	 * @param secondaryMID Typically, the MID of the user who is being acted upon.
	 * @param addedInfo A note about a subtransaction, or specifics of this transaction (for posterity).
	 * @throws DBException
	 */
public void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {;

/**
	 * Return a list of all transactions in which an HCP accessed the given patient's record
	 * 
	 * @param patientID The MID of the patient in question.
	 * @return A java.util.List of transactions.
	 * @throws DBException
	 */
public List&lt;TransactionBean&gt; getAllRecordAccesses(long patientID, boolean getByRole) throws DBException {;

/**
	 * The Most Thorough Fetch 
	 * @param loggedInRole Role of loggedIn
	 * @param secondaryRole Role of secondary
	 * @param begin Beginning of date range
	 * @param end End of date range
	 * @param type Type of transaction
	 * @return
	 * @throws DBException
	 */
public List&lt;TransactionBean&gt; getTransactionsFor(String loggedInRole, String secondaryRole, Date begin, Date end, TransactionType type) throws DBException {;

/**
	 * Return a list of all transactions in which an HCP accessed the given patient's record, within the dates
	 * 
	 * @param patientID The MID of the patient in question.
	 * @param lower The starting date as a java.util.Date
	 * @param upper The ending date as a java.util.Date
	 * @return A java.util.List of transactions.
	 * @throws DBException
	 */
public List&lt;TransactionBean&gt; getRecordAccesses(long patientID, java.util.Date lower, java.util.Date upper, boolean getByRole) throws DBException {;

/**
	 * Returns the operation profile
	 * 
	 * @return The OperationalProfile as a bean.
	 * @throws DBException
	 */
public OperationalProfile getOperationalProfile() throws DBException {;

/**
	 * 
	 * @param tbList
	 * @param patientID
	 * @param sortByRole
	 * @return
	 * @throws DBException
	 */
private List&lt;TransactionBean&gt; addAndSortRoles(List&lt;TransactionBean&gt; tbList, long patientID, boolean sortByRole) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_VisitRemindersDAO</id>
            <content>package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.DateUtil;
import edu.ncsu.csc.itrust.beans.VisitFlag;
import edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm;
import edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Used for queries related to patient reminders
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 * @author Andy
 * 
 */
public class VisitRemindersDAO {

private DAOFactory factory;
/**
	 * The typical constructor.
	 * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
	 */
public VisitRemindersDAO(DAOFactory factory) {;

/**
	 * Returns a list of patients associated with a given HCP.
	 * 
	 * @param hcpid The MID of the HCP in question.
	 * @return A java.util.List of Visit Reminder Forms.
	 */
public List&lt;VisitReminderReturnForm&gt; getPatients(long hcpid) throws DBException {;

/**
	 * Returns a list of patients who need a visit for this HCP. This means:
	 * 
	 * Alive patient, no office visit for &gt; 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx -
	 * Circulatory-System Disease: [ 390.00 , 459.99 ]
	 * 
	 * @param hcpid The MID of the HCP in question.
	 * @return A java.util.List of visit reminders.
	 */
public List&lt;VisitReminderReturnForm&gt; getDiagnosedVisitNeeders(long hcpid) throws DBException {;

/**
	 * Returns a list of old people who need a flu shot
	 * 
	 * CURRENT SPEC: Alive patient, over 50 years old, no flu shot - 90656, 90658, 90660 a) during the months
	 * 09 - 12 of current calendar year if in 09 - 12 b) during the months 09 - 12 of last calendar year if
	 * not in 09 - 12
	 * 
	 * Determines current date and calls one of two private methods these methods return different sets of
	 * people - a: people who haven't had a flu shot yet this year and need one - b: people who missed last
	 * year's flu shot and need a check-up
	 * 
	 * @return A java.util.List of Visit Reminder Forms.
	 * @param hcpid The MID of the HCP in question.
	 * @param patientBirthday The birthday of the patient in question.
	 * @throws DBException
	 */
public List&lt;VisitReminderReturnForm&gt; getFluShotDelinquents(long hcpid) throws DBException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ApptBean</id>
            <content>package edu.ncsu.csc.itrust.beans;

import java.sql.Timestamp;
public class ApptBean {

private String apptType;
private long patient;
private long hcp;
private Timestamp date;
private String comment;
/**
	 * @return the apptType
	 */
public String getApptType() {;

/**
	 * @param apptType the apptType to set
	 */
public void setApptType(String apptType) {;

/**
	 * @return the patient
	 */
public long getPatient() {;

/**
	 * @param patient the patient to set
	 */
public void setPatient(long patient) {;

/**
	 * @return the hcp
	 */
public long getHcp() {;

/**
	 * @param hcp the hcp to set
	 */
public void setHcp(long hcp) {;

/**
	 * @return the date
	 */
public Timestamp getDate() {;

/**
	 * @param date the date to set
	 */
public void setDate(Timestamp date) {;

/**
	 * @return the comment
	 */
public String getComment() {;

/**
	 * @param comment the comment to set
	 */
public void setComment(String comment) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ApptTypeBean</id>
            <content>package edu.ncsu.csc.itrust.beans;

public class ApptTypeBean {

private String name;
private int duration;
public ApptTypeBean() {;

public ApptTypeBean(String name, int duration) {;

public String getName() {;

public void setName(String name) {;

public int getDuration() {;

public void setDuration(int duration) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_MedicationBean</id>
            <content>package edu.ncsu.csc.itrust.beans;

/**
 * A medication is the same thing as an ND code - it's like &quot;Aspirin&quot;. A medication is not associated with an
 * office visit; that's a &quot;prescription&quot;. See {@link PrescriptionBean}
 * 
 * @author Andy Meneely
 * 
 */
public class MedicationBean {

private String NDCode ;
private String description ;
public MedicationBean() {;

public MedicationBean(String code) {;

public MedicationBean(String code, String description) {;

/**
	 * Gets the ND Code for this procedure
	 * 
	 * @return The ND Code for this procedure
	 */
public String getNDCode() {;

public void setNDCode(String code) {;

/**
	 * Gets the ND Description for this procedure
	 * 
	 * @return The ND Description for this procedure
	 */
public String getDescription() {;

public void setDescription(String description) {;

public String getNDCodeFormatted() {;

public boolean equals(Object other) {;

public int hashCode() {;

private boolean equals(MedicationBean other) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PrescriptionReportBean</id>
            <content>package edu.ncsu.csc.itrust.beans;

/**
 * This is the container bean for the Prescription Report requirement. It contains a PrescriptionBean (which
 * in turn contains a Medication Bean), and an office visit bean. &lt;br /&gt;
 * &lt;br /&gt;
 * This was made so that the prescription report could be done all in one clean query.&lt;br /&gt;
 * &lt;br /&gt;
 * See {@link PrescriptionBean} See {@link OfficeVisitBean}
 * 
 * @author Andy Meneely
 * 
 */
public class PrescriptionReportBean {

public PrescriptionReportBean() {;

public PrescriptionBean getPrescription() {;

public void setPrescription(PrescriptionBean prescription) {;

public OfficeVisitBean getOfficeVisit() {;

public void setOfficeVisit(OfficeVisitBean officeVisit) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SurveyResultBean</id>
            <content>package edu.ncsu.csc.itrust.beans;

/**
 * Bean to be used for survey results (search).  Stores address information about a HCP
 * in addition to their specialty, hospital, and averages from survey (results range from 1-5).  This
 * beans also contains a variable that stores the percent of office visits that satisfaction results are 
 * available.
 */
public class SurveyResultBean {

private long hcpMID;
private String hcpFirstName;
private String hcpLastName;
private String hcpAddress1;
private String hcpAddress2;
private String hcpCity;
private String hcpState;
private String hcpZip;
private String hcpSpecialty;
private String hcpHospitalID;
private float avgWaitingRmMinutes;
private float avgExamRmMinutues;
private float avgVisitSatisfaction;
private float avgTreatmentSatisfaction;
private float percentSatResultsAvailable;
//list of specialties
public final static String GENERAL_SPECIALTY ;
public final static String SURGEON_SPECIALTY ;
public final static String HEART_SPECIALTY ;
public final static String PEDIATRICIAN_SPECIALTY ;
public final static String OBGYN_SPECIALTY ;
public final static String ANY_SPECIALTY ;
public void setHCPMID(long mid) {;

public long getHCPMID() {;

public void setHCPFirstName(String firstName) {;

public String getHCPFirstName() {;

public void setHCPLastName(String lastName) {;

public String getHCPLastName() {;

public void setHCPaddress1(String address1) {;

public String getHCPaddress1() {;

public void setHCPaddress2(String address2) {;

public String getHCPaddress2() {;

public void setHCPcity(String city) {;

public String getHCPcity() {;

public void setHCPstate(String state) {;

public String getHCPstate() {;

public void setHCPzip(String zip) {;

public String getHCPzip() {;

public void setHCPspecialty(String specialty) {;

public String getHCPspecialty() {;

public void setHCPhospital(String hospital) {;

public String getHCPhospital() {;

public void setAvgWaitingRoomMinutes(float waitingRoomMinutes) {;

public float getAvgWaitingRoomMinutes() {;

public void setAvgExamRoomMinutes(float examRoomMinutes) {;

public float getAvgExamRoomMinutes() {;

public void setAvgVisitSatisfaction(float visitSatisfaction) {;

public float getAvgVisitSatisfaction() {;

public void setAvgTreatmentSatisfaction(float treatmentSatisfaction) {;

public float getAvgTreatmentSatisfaction() {;

public void setPercentSatisfactionResults (float percent) {;

public float getPercentSatisfactionResults() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AdverseEventBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.AdverseEventBean;
/**
 * A loader for AdverseEventBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class AdverseEventBeanLoader implements BeanLoader&lt;AdverseEventBean&gt; {

public List&lt;AdverseEventBean&gt; loadList(ResultSet rs) throws SQLException {;

public AdverseEventBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, AdverseEventBean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AllergyBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.AllergyBean;
/**
 * A loader for AllergyBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class AllergyBeanLoader implements BeanLoader&lt;AllergyBean&gt; {

public List&lt;AllergyBean&gt; loadList(ResultSet rs) throws SQLException {;

public AllergyBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, AllergyBean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ApptBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ApptBean;
public class ApptBeanLoader implements BeanLoader&lt;ApptBean&gt; {

public List&lt;ApptBean&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, ApptBean bean) throws SQLException {;

public ApptBean loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ApptTypeBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ApptTypeBean;
public class ApptTypeBeanLoader implements BeanLoader&lt;ApptTypeBean&gt; {

public List&lt;ApptTypeBean&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, ApptTypeBean apptType) throws SQLException {;

public ApptTypeBean loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_BeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
/**
 * This interface helps enforce the paradigm of what should be contained in a loader.
 * 
 * The generic type &lt;T&gt; specifies the type of bean that the loader is responsible for extacting from
 * a result set.
 * 
 * @param &lt;T&gt; A type for the bean that will be loaded with this class.
 */
public interface BeanLoader&lt;T&gt; {

/**
	 * Loads a list of the bean of type T from a result set.  Typically makes iterated calls
	 * to loadSingle.
	 * @param rs The java.sql.ResultSet we are extracting.
	 * @return A java.util.List&lt;T&gt; where T is the type for this loader.
	 * @throws SQLException
	 */
public List&lt;T&gt; loadList(ResultSet rs) throws SQLException;

/**
	 * Contains the instructions for mapping the rows in this java.sql.ResultSet into
	 * beans of type &lt;T&gt;.
	 * @param rs The java.sql.ResultSet to be loaded.
	 * @return A Bean of type T containing the loaded information, typically of the first (or next) item in the result set.
	 * @throws SQLException
	 */
public T loadSingle(ResultSet rs) throws SQLException;

/**
	 * Used for an insert or update, this method contains the instructions for mapping the fields within
	 * a bean of type T into a prepared statement which modifies the appropriate table.
	 * @param ps The prepared statement to be loaded.
	 * @param bean The bean containing the data to be placed.
	 * @return A prepared statement with the appropriately loaded parameters.
	 * @throws SQLException
	 */
public PreparedStatement loadParameters(PreparedStatement ps, T bean) throws SQLException;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DiagnosisBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.DiagnosisBean;
/**
 * A loader for DiagnosisBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader} 
 */
public class DiagnosisBeanLoader implements BeanLoader&lt;DiagnosisBean&gt; {

private boolean loadOVDiagnosisID ;
public DiagnosisBeanLoader() {;

public DiagnosisBeanLoader(boolean loadOVDiagnosisID) {;

public List&lt;DiagnosisBean&gt; loadList(ResultSet rs) throws SQLException {;

public DiagnosisBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, DiagnosisBean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DrugInteractionBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.DrugInteractionBean;
/**
 * A loader for MedicationBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class DrugInteractionBeanLoader implements BeanLoader&lt;DrugInteractionBean&gt; {

public DrugInteractionBeanLoader() {;

public List&lt;DrugInteractionBean&gt; loadList(ResultSet rs) throws SQLException {;

public DrugInteractionBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, DrugInteractionBean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EmailBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import edu.ncsu.csc.itrust.beans.Email;
/**
 * A loader for Fake Emails.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class EmailBeanLoader implements BeanLoader&lt;Email&gt; {

public List&lt;Email&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, Email email) throws SQLException {;

public Email loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_FamilyBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
/**
 * A loader for FamilyMemberBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class FamilyBeanLoader implements BeanLoader&lt;FamilyMemberBean&gt; {

private String relation;
public FamilyBeanLoader(String relation) {;

public List&lt;FamilyMemberBean&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, FamilyMemberBean bean) throws SQLException {;

public FamilyMemberBean loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_HealthRecordsBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.HealthRecord;
/**
 * A loader for HealthRecords.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class HealthRecordsBeanLoader implements BeanLoader&lt;HealthRecord&gt; {

public List&lt;HealthRecord&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, HealthRecord bean) throws SQLException {;

public HealthRecord loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_HospitalBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.HospitalBean;
/**
 * A loader for HospitalBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class HospitalBeanLoader implements BeanLoader&lt;HospitalBean&gt; {

public List&lt;HospitalBean&gt; loadList(ResultSet rs) throws SQLException {;

public HospitalBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, HospitalBean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_LOINCBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.LOINCbean;
/**
 * A loader for LOINCBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class LOINCBeanLoader implements BeanLoader&lt;LOINCbean&gt; {

public List&lt;LOINCbean&gt; loadList(ResultSet rs) throws SQLException {;

public LOINCbean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, LOINCbean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_LabProcedureBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
/**
 * A loader for LabProcedureBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class LabProcedureBeanLoader implements BeanLoader&lt;LabProcedureBean&gt; {

public List&lt;LabProcedureBean&gt; loadList(ResultSet rs) throws SQLException {;

public LabProcedureBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, LabProcedureBean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_MedicationBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.MedicationBean;
/**
 * A loader for MedicationBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class MedicationBeanLoader implements BeanLoader&lt;MedicationBean&gt; {

public MedicationBeanLoader() {;

public List&lt;MedicationBean&gt; loadList(ResultSet rs) throws SQLException {;

public MedicationBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, MedicationBean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_MessageBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.MessageBean;
/**
 * A loader for MessageBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class MessageBeanLoader implements BeanLoader&lt;MessageBean&gt; {

public List&lt;MessageBean&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, MessageBean message) throws SQLException {;

public MessageBean loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_OfficeVisitLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import edu.ncsu.csc.itrust.beans.OfficeVisitBean;
/**
 * A loader for OfficeVisitBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class OfficeVisitLoader implements BeanLoader&lt;OfficeVisitBean&gt; {

public List&lt;OfficeVisitBean&gt; loadList(ResultSet rs) throws SQLException {;

public OfficeVisitBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, OfficeVisitBean p) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_OperationalProfileLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.OperationalProfile;
import edu.ncsu.csc.itrust.enums.TransactionType;
/**
 * A loader for the operational profile.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class OperationalProfileLoader implements BeanLoader&lt;OperationalProfile&gt; {

public List&lt;OperationalProfile&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, OperationalProfile bean) throws SQLException {;

public OperationalProfile loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PatientLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PatientBean;
/**
 * A loader for PatientBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class PatientLoader implements BeanLoader&lt;PatientBean&gt; {

public List&lt;PatientBean&gt; loadList(ResultSet rs) throws SQLException {;

public PatientBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, PatientBean p) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PersonnelLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.enums.Role;
/**
 * A loader for PersonnelBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class PersonnelLoader implements BeanLoader&lt;PersonnelBean&gt; {

public List&lt;PersonnelBean&gt; loadList(ResultSet rs) throws SQLException {;

public PersonnelBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, PersonnelBean p) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PrescriptionBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PrescriptionBean;
/**
 * A loader for PrescriptionBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class PrescriptionBeanLoader implements BeanLoader&lt;PrescriptionBean&gt; {

private MedicationBeanLoader medLoader;
public PrescriptionBeanLoader() {;

public List&lt;PrescriptionBean&gt; loadList(ResultSet rs) throws SQLException {;

public PrescriptionBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionBean pres) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PrescriptionReportBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.PrescriptionReportBean;
/**
 * A loader for PrescriptionReportBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class PrescriptionReportBeanLoader implements BeanLoader&lt;PrescriptionReportBean&gt; {

private PrescriptionBeanLoader presLoader;
private OfficeVisitLoader ovLoader;
public PrescriptionReportBeanLoader() {;

public List&lt;PrescriptionReportBean&gt; loadList(ResultSet rs) throws SQLException {;

public PrescriptionReportBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionReportBean pres) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ProcedureBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
/**
 * A loader for ProcedureBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class ProcedureBeanLoader implements BeanLoader&lt;ProcedureBean&gt; {

private boolean loadOVProcedureID;
public ProcedureBeanLoader() {;

public ProcedureBeanLoader(boolean loadOVProcedureID) {;

public List&lt;ProcedureBean&gt; loadList(ResultSet rs) throws SQLException {;

public ProcedureBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, ProcedureBean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ReferralBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ReferralBean;
import edu.ncsu.csc.itrust.beans.ReferralBean.ReferralStatus;
/**
 * A loader for ReferralBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class ReferralBeanLoader implements BeanLoader&lt;ReferralBean&gt; {

public ReferralBeanLoader() {;

public List&lt;ReferralBean&gt; loadList(ResultSet rs) throws SQLException {;

public ReferralBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, ReferralBean ref) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_RemoteMonitoringDataBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
/**
 * A loader for RemoteMonitoringDataBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class RemoteMonitoringDataBeanLoader implements BeanLoader&lt;RemoteMonitoringDataBean&gt; {

public List&lt;RemoteMonitoringDataBean&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, RemoteMonitoringDataBean bean) throws SQLException {;

public RemoteMonitoringDataBean loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ReportRequestBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.ReportRequestBean;
/**
 * A loader for ReportRequestBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class ReportRequestBeanLoader implements BeanLoader&lt;ReportRequestBean&gt; {

public List&lt;ReportRequestBean&gt; loadList(ResultSet rs) throws SQLException {;

public ReportRequestBean loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, ReportRequestBean bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SurveyLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import edu.ncsu.csc.itrust.beans.SurveyBean;
/**
 * A loader for SurveyBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class SurveyLoader implements BeanLoader&lt;SurveyBean&gt; {

public List&lt;SurveyBean&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, SurveyBean bean) throws SQLException {;

public SurveyBean loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SurveyResultBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.SurveyResultBean;
/**
 * A loader for SurveyResultBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class SurveyResultBeanLoader implements BeanLoader&lt;SurveyResultBean&gt; {

public List&lt;SurveyResultBean&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, SurveyResultBean bean) throws SQLException {;

public SurveyResultBean loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_TransactionBeanLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.TransactionBean;
import edu.ncsu.csc.itrust.enums.TransactionType;
/**
 * A loader for TransactionBeans.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class TransactionBeanLoader implements BeanLoader&lt;TransactionBean&gt; {

public List&lt;TransactionBean&gt; loadList(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, TransactionBean bean) throws SQLException {;

public TransactionBean loadSingle(ResultSet rs) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_VisitReminderReturnFormLoader</id>
            <content>package edu.ncsu.csc.itrust.beans.loaders;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm;
/**
 * A loader for VisitReminderReturnForms.
 * 
 * Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency. 
 * For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
 */
public class VisitReminderReturnFormLoader implements BeanLoader&lt;VisitReminderReturnForm&gt; {

public List&lt;VisitReminderReturnForm&gt; loadList(ResultSet rs) throws SQLException {;

public VisitReminderReturnForm loadSingle(ResultSet rs) throws SQLException {;

public PreparedStatement loadParameters(PreparedStatement ps, VisitReminderReturnForm bean) throws SQLException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddPatientValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.AddPatientAction;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * The validator used by {@link AddPatientAction}. Only checks first name, last name, and email
 * 
 * @author Andy
 * 
 */
public class AddPatientValidator extends BeanValidator&lt;PatientBean&gt; {

/**
	 * The default constructor.
	 */
public AddPatientValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(PatientBean p) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AddPersonnelValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.AddPatientAction;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * The validator used by {@link AddPatientAction}. Only checks first name, last name, and email
 * 
 * @author Andy
 * 
 */
public class AddPersonnelValidator extends BeanValidator&lt;PersonnelBean&gt; {

/**
	 * The default constructor.
	 */
public AddPersonnelValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(PersonnelBean p) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AdverseEventValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.AdverseEventBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validates an adverse event bean, from {@link AdverseEventAction}
 * 
 */
public class AdverseEventValidator extends BeanValidator&lt;AdverseEventBean&gt; {

/**
	 * The default constructor.
	 */
public AdverseEventValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param d A bean of the type to be validated.
	 */
public void validate(AdverseEventBean b) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AllergyBeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditOfficeVisitAction;
import edu.ncsu.csc.itrust.beans.AllergyBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validator used to validate adding a new allergy in {@link EditOfficeVisitAction}
 * 
 * @author Andy
 * 
 */
public class AllergyBeanValidator extends BeanValidator&lt;AllergyBean&gt; {

/**
	 * The default constructor.
	 */
public AllergyBeanValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(AllergyBean m) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ApptBeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.ApptBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
public class ApptBeanValidator extends BeanValidator&lt;ApptBean&gt; {

public void validate(ApptBean bean) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ApptTypeBeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.ApptTypeBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
public class ApptTypeBeanValidator extends BeanValidator&lt;ApptTypeBean&gt; {

public void validate(ApptTypeBean a) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_BeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.enums.Gender;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Abstract class used by all validators that provides utility methods for checking formatting of a particular
 * field. Specify the Bean to be validated
 * 
 * @author Andy
 * 
 * @param &lt;T&gt;
 *            The bean type to be validated
 */
abstract public class BeanValidator&lt;T&gt; {

abstract public void validate(T bean) throws FormValidationException;

/**
	 * Check the format against the given enum. isNullable will check if the string is empty or a Java null.
	 * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.
	 * 
	 * @param name
	 * @param value
	 * @param format
	 * @param isNullable
	 * @return
	 */
protected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {;

/**
	 * Check a long value against a particular format. isNullable will check if it is empty or a Java null.
	 * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.
	 * 
	 * @param name
	 * @param longValue
	 * @param format
	 * @param isNullable
	 * @return
	 */
protected String checkFormat(String name, Long longValue, ValidationFormat format, boolean isNullable) {;

/**
	 * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an
	 * error message will be returned. Use this in conjunction with {@link ErrorList}.
	 * 
	 * @param name
	 * @param doubleValue
	 * @param format
	 * @param isNullable
	 * @return
	 */
protected String checkFormat(String name, Double doubleValue, ValidationFormat format, boolean isNullable) {;

/**
	 * Check against the proper gender
	 * 
	 * @param name
	 * @param gen
	 * @param format
	 * @param isNullable
	 * @return
	 */
protected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {;

/**
	 * The that an integer is the proper format, and is in the correct range
	 * 
	 * @param name
	 * @param value
	 * @param lower
	 * @param upper
	 * @param isNullable
	 * @return
	 */
protected String checkInt(String name, String value, int lower, int upper, boolean isNullable) {;

/**
	 * Check that a double is in the proper format and is in the correct range
	 * 
	 * @param name
	 * @param value
	 * @param lower
	 * @param upper
	 * @return
	 */
protected String checkDouble(String name, String value, double lower, double upper) {;

/**
	 * Check that the value fits the &quot;true&quot; or &quot;false&quot;
	 * 
	 * @param name
	 * @param value
	 * @return
	 */
protected String checkBoolean(String name, String value) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DiagnosisBeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.DiagnosisBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validates an ICD9CM code
 * 
 * @author Andy
 * 
 */
public class DiagnosisBeanValidator extends BeanValidator&lt;DiagnosisBean&gt; {

/**
	 * The default constructor.
	 */
public DiagnosisBeanValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(DiagnosisBean d) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_DrugInteractionValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.DrugInteractionBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validates a drug interaction bean, from {@link DrugInteractionAction}
 * 
 */
public class DrugInteractionValidator extends BeanValidator&lt;DrugInteractionBean&gt; {

/**
	 * The default constructor.
	 */
public DrugInteractionValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param d A bean of the type to be validated.
	 */
public void validate(DrugInteractionBean d) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EMailValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
public class EMailValidator extends BeanValidator&lt;MessageBean&gt; {

/**
	 * The default constructor.
	 */
public EMailValidator(){;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param m A bean of the type to be validated.
	 */
public void validate(MessageBean m) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EditOfficeVisitValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import edu.ncsu.csc.itrust.action.EditOfficeVisitAction;
import edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Used to validate updating an office visit, by {@link EditOfficeVisitAction}
 * 
 * @author Andy
 * 
 */
public class EditOfficeVisitValidator extends BeanValidator&lt;EditOfficeVisitForm&gt; {

private boolean validatePrescription ;
/**
	 * The default constructor.
	 */
public EditOfficeVisitValidator() {;

public EditOfficeVisitValidator(boolean validatePrescription) {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(EditOfficeVisitForm form) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_HealthRecordFormValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditHealthHistoryAction;
import edu.ncsu.csc.itrust.beans.forms.HealthRecordForm;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validator used in adding health information on Basic Health History, {@link EditHealthHistoryAction}
 * 
 * @author Andy
 * 
 */
public class HealthRecordFormValidator extends BeanValidator&lt;HealthRecordForm&gt; {

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(HealthRecordForm bean) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_HospitalBeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.UpdateHospitalListAction;
import edu.ncsu.csc.itrust.beans.HospitalBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validates the input for hospital beans, {@link UpdateHospitalListAction}
 * 
 * @author Andy
 * 
 */
public class HospitalBeanValidator extends BeanValidator&lt;HospitalBean&gt; {

/**
	 * The default constructor.
	 */
public HospitalBeanValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(HospitalBean h) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_LOINCBeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.LOINCbean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validator used to validate LOINCbean
 */
public class LOINCBeanValidator extends BeanValidator&lt;LOINCbean&gt; {

/**
	 * The default constructor.
	 */
public LOINCBeanValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(LOINCbean m) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_LabProcedureValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
public class LabProcedureValidator {

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(LabProcedureBean b) throws FormValidationException {;

protected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_MailValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.exception.FormValidationException;
import org.apache.commons.validator.*;
public class MailValidator extends EmailValidator {

/**
	 * The default constructor.
	 */
public MailValidator(){;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public boolean validateEmail(String email) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_MedicationBeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.UpdateNDCodeListAction;
import edu.ncsu.csc.itrust.beans.MedicationBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validates ND code beans, from {@link UpdateNDCodeListAction}
 * 
 * @author Andy
 * 
 */
public class MedicationBeanValidator extends BeanValidator&lt;MedicationBean&gt; {

/**
	 * The default constructor.
	 */
public MedicationBeanValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(MedicationBean m) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_MessageValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditOfficeVisitAction;
import edu.ncsu.csc.itrust.beans.MessageBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Used to validate updating an office visit, by {@link EditOfficeVisitAction}
 * 
 * @author Andy
 * 
 */
public class MessageValidator extends BeanValidator&lt;MessageBean&gt; {

public MessageValidator() {;

public void validate(MessageBean mBean) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PatientValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditPatientAction;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import org.apache.commons.validator.CreditCardValidator;
import java.util.Date;
/**
 * Validates a patient bean, from {@link EditPatientAction}
 * 
 * @author Andy
 * 
 */
public class PatientValidator extends BeanValidator&lt;PatientBean&gt; {

/**
	 * The default constructor.
	 */
public PatientValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(PatientBean p) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PersonnelValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.EditPersonnelAction;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validates a personnel bean, from {@link EditPersonnelAction}
 * 
 * @author Andy
 * 
 */
public class PersonnelValidator extends BeanValidator&lt;PersonnelBean&gt; {

/**
	 * The default constructor.
	 */
public PersonnelValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(PersonnelBean p) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ProcedureBeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.UpdateNDCodeListAction;
import edu.ncsu.csc.itrust.beans.ProcedureBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validates an ND code, from {@link UpdateNDCodeListAction}
 * 
 * @author Andy
 * 
 */
public class ProcedureBeanValidator extends BeanValidator&lt;ProcedureBean&gt; {

/**
	 * The default constructor.
	 */
public ProcedureBeanValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(ProcedureBean p) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_RemoteMonitoringDataBeanValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction;
import edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validator used to validate adding new remote monitoring data in {@link AddRemoteMonitoringDataAction}
 * 
 */
public class RemoteMonitoringDataBeanValidator extends BeanValidator&lt;RemoteMonitoringDataBean&gt; {

/**
	 * The default constructor.
	 */
public RemoteMonitoringDataBeanValidator() {;

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(RemoteMonitoringDataBean m) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SecurityQAValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.action.SetSecurityQuestionAction;
import edu.ncsu.csc.itrust.beans.SecurityQA;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validates the security question and answer. This doesn't follow the same format as the others because this
 * validator is used for the various states of reset password, {@link SetSecurityQuestionAction}
 * 
 * @author Andy
 * 
 */
public class SecurityQAValidator extends BeanValidator&lt;SecurityQA&gt; {

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(SecurityQA bean) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SurveySearchValidator</id>
            <content>package edu.ncsu.csc.itrust.validate;

import edu.ncsu.csc.itrust.beans.SurveyResultBean;
import edu.ncsu.csc.itrust.exception.ErrorList;
import edu.ncsu.csc.itrust.exception.FormValidationException;
/**
 * Validator for zip code that is entered when a user searches for HCP survey results.
 */
public class SurveySearchValidator extends BeanValidator&lt;SurveyResultBean&gt; {

/**
	 * Performs the act of validating the bean in question, which varies depending on the
	 * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
	 * 
	 * @param p A bean of the type to be validated.
	 */
public void validate(SurveyResultBean bean) throws FormValidationException {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ValidationFormat</id>
            <content>package edu.ncsu.csc.itrust.validate;

import java.util.regex.Pattern;
/**
 * Enum with all of the validation formats that fit into a regex.
 * 
 * @author Andy
 * 
 *
 */
private Pattern regex;
private String description;
public Pattern getRegex() {;

public String getDescription() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ICD9CMLink</id>
            <content>package edu.ncsu.csc.itrust.tags;

import java.io.IOException;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.Tag;
/**
 * JSP tag used as a utility to link to the actual ICD9CM site
 * 
 * @author Andy
 * 
 */
public class ICD9CMLink implements Tag {

private PageContext pageContext;
private Tag parent;
private String code;
public ICD9CMLink() {;

public int doStartTag() throws JspException {;

public int doEndTag() throws JspException {;

public void release() {;

public void setPageContext(PageContext pageContext) {;

public void setParent(Tag parent) {;

public Tag getParent() {;

public String getCode() {;

public void setCode(String code) {;

public void setCode(double code) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PatientNavigation</id>
            <content>package edu.ncsu.csc.itrust.tags;

import java.io.IOException;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.Tag;
/**
 * JSP tag that is used as the patient navigation bar at the bottom of the screen.
 * 
 * To add a new page, add to the two arrays, and make sure that the page accepts PID
 * 
 * @author Andy
 * 
 */
public class PatientNavigation implements Tag {

private PageContext pageContext;
private Tag parent;
// A more elegant solution here would be to use enums and have a displayName, a name, and url
private String thisTitle;
public PatientNavigation() {;

public int doStartTag() throws JspException {;

public int doEndTag() throws JspException {;

public void release() {;

public void setPageContext(PageContext pageContext) {;

public void setParent(Tag parent) {;

public Tag getParent() {;

public String getThisTitle() {;

public void setThisTitle(String thisPage) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_StateSelect</id>
            <content>package edu.ncsu.csc.itrust.tags;

import java.io.IOException;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.Tag;
import edu.ncsu.csc.itrust.enums.State;
/**
 * JSP tag that adds an HTML select for states, from the enum.
 * 
 * @see {@link State}
 * 
 * Also selects the current state
 * @author Andy
 * 
 */
public class StateSelect implements Tag {

private PageContext pageContext;
private Tag parent;
private String name;
private String value;
public StateSelect() {;

public int doStartTag() throws JspException {;

public int doEndTag() throws JspException {;

public void release() {;

public void setPageContext(PageContext pageContext) {;

public void setParent(Tag parent) {;

public Tag getParent() {;

public String getName() {;

public void setName(String name) {;

public String getValue() {;

public void setValue(String value) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_BloodType</id>
            <content>package edu.ncsu.csc.itrust.enums;

/**
 * All possible blood types
 * 
 * @author Andy
 * 
 */
private String name;
private BloodType(String name) {;

public String getName() {;

public String toString() {;

public static BloodType parse(String bloodTypeStr) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_Ethnicity</id>
            <content>package edu.ncsu.csc.itrust.enums;

/**
 * All possible ethnicities represented in iTrust.
 */
private String name;
private Ethnicity(String name) {;

public String getName() {;

public String toString() {;

public static Ethnicity parse(String input) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_Gender</id>
            <content>package edu.ncsu.csc.itrust.enums;

/**
 * Male or Female.  Not specified is provided as well, for incomplete forms or patient's discretion.
 */
private String name;
private Gender(String name) {;

public String getName() {;

public String toString() {;

public static Gender parse(String input) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PrescriptionAlerts</id>
            <content>package edu.ncsu.csc.itrust.enums;

/**
 * Every prescription that should be alerted for emergency reports - in the future, this should be abstracted
 * out to a database table so it can be changed at runtime.
 * 
 * @author Andy
 * 
 */
private String name;
private String NDCode;
private PrescriptionAlerts(String rName, String rNDCode) {;

public String getName() {;

public String getNDCode() {;

public static boolean isAlert(String code) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_Role</id>
            <content>package edu.ncsu.csc.itrust.enums;

/**
 * The iTrust user roles: Patient, ER, HCP, UAP, PHA, Administrator and Tester.
 * Consult the requirements for the contextual meanings of these individual choices.
 */
private String userRolesString;
private String dbTable;
public String getDBTable() {;

public String getUserRolesString() {;

public static Role parse(String str) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_State</id>
            <content>package edu.ncsu.csc.itrust.enums;

/**
 * All of our wonderful states.
 * 
 * @author Andy
 * 
 */
private String name;
private State(String name) {;

public String getName() {;

public String getAbbrev() {;

// Just to show that this is intentional
public String toString() {;

public static State parse(String state) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_TransactionType</id>
            <content>package edu.ncsu.csc.itrust.enums;

/**
 * All of the possible transaction types, in no particular order, used in producing the operational profile.
 */
CREATE_DISABLE_PHA(47, &quot;Create/disable public health agent&quot;), DRUG_INTERACTION(48, &quot;Drug Interaction&quot;), ADVERSE_EVENT(49, &quot;Adverse Event Report&quot;), LOGIN_FAILURE(50, &quot;Login Failure&quot;), UPDATE_APPT_TYPE(51, &quot;Update an Appointment Type&quot;), ADD_APPT_TYPE(52, &quot;Add an Appointment Type&quot;), ADD_APPT(53, &quot;Appointment Added&quot;), SEND_REMINDERS(54, &quot;Reminders Sent&quot;);

// S1, S3, S5, S7, S8, S14, S16, S19, S21, S22.
public static final String patientViewableStr ;
public static final int[] patientViewable ;
private TransactionType(int code, String description) {;

private int code;
private String description;
public int getCode() {;

public String getDescription() {;

public static TransactionType parse(int code) {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ChronicDiseaseMediator</id>
            <content>package edu.ncsu.csc.itrust.risk;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
/**
 * Figures out which risk checker strategy to use
 * 
 * @author Andy
 * 
 */
public class ChronicDiseaseMediator {

private List&lt;RiskChecker&gt; riskCheckers;
/**
	 * Given a factory and patient ID, and sets up a list of all risk checkers
	 * 
	 * @param factory The DAOFactory to be used in creating the necessary DAOs to perform the checks.
	 * @param pid The MID of the patient in question.
	 * @throws DBException
	 * @throws NoHealthRecordsException
	 */
public ChronicDiseaseMediator(DAOFactory factory, long pid) throws DBException, NoHealthRecordsException {;

/**
	 * @return A list of diseases that this patient is at risk for
	 */
public List&lt;RiskChecker&gt; getDiseaseAtRisk() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_HeartDiseaseRisks</id>
            <content>package edu.ncsu.csc.itrust.risk;

import static edu.ncsu.csc.itrust.enums.Ethnicity.AfricanAmerican;
import static edu.ncsu.csc.itrust.enums.Ethnicity.AmericanIndian;
import static edu.ncsu.csc.itrust.enums.Ethnicity.Hispanic;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.enums.Gender;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.risk.factors.AgeFactor;
import edu.ncsu.csc.itrust.risk.factors.CholesterolFactor;
import edu.ncsu.csc.itrust.risk.factors.EthnicityFactor;
import edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor;
import edu.ncsu.csc.itrust.risk.factors.GenderFactor;
import edu.ncsu.csc.itrust.risk.factors.HypertensionFactor;
import edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;
import edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor;
import edu.ncsu.csc.itrust.risk.factors.SmokingFactor;
import edu.ncsu.csc.itrust.risk.factors.WeightFactor;
/**
 * Checks to see if the given patient is at risk for Heart Disease
 * For details on what each method does, see {@link RiskChecker}
 * @author Andy
 * 
 */
public class HeartDiseaseRisks extends RiskChecker {

public HeartDiseaseRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {;

public boolean qualifiesForDisease() {;

protected List&lt;PatientRiskFactor&gt; getDiseaseRiskFactors() {;

public String getName() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_RiskChecker</id>
            <content>package edu.ncsu.csc.itrust.risk;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.HealthRecord;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;
/**
 * An abstract class which has a number of utlity methods for checking risks.
 * 
 * When extending this class, use the methods to fill in all of the necessary information. Then use isAtRisk
 * and getPatientRiskFactors to get the actual risks. See the known subclasses for an example
 * 
 * @author Andy
 * 
 */
abstract public class RiskChecker {

private static final int RISK_THRESHOLD ;
protected PatientBean patient;
protected HealthRecord currentHealthRecord;
protected DAOFactory factory;
public RiskChecker(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {;

/**
	 * @return The name of the disease being checked.
	 */
abstract public String getName();

/**
	 * @return A java.util.List of the risk factors increasing this patients disease risk.
	 */
abstract protected List&lt;PatientRiskFactor&gt; getDiseaseRiskFactors();

/**
	 * @return A boolean indicating whether the patient is at increased risk.
	 */
abstract public boolean qualifiesForDisease();

/**
	 * This method exists purely for performance - just stop once you hit the threshold. &lt;br /&gt;
	 * &lt;br /&gt;
	 * Also, the risk factors should be cached in the RiskFactor implementors - in getPatientRiskFactors there
	 * should be no double-querying
	 * 
	 * @return isAtRisk
	 */
public boolean isAtRisk() {;

/**
	 * @return A java.util.List of patient risk factors associated with this disease.
	 */
public List&lt;PatientRiskFactor&gt; getPatientRiskFactors() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_Type1DiabetesRisks</id>
            <content>package edu.ncsu.csc.itrust.risk;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.enums.Ethnicity;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor;
import edu.ncsu.csc.itrust.risk.factors.EthnicityFactor;
import edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor;
import edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;
/**
 * Checks to see if the given patient is at risk for Type 1 Diabetes.
 * For details on what each method does, see {@link RiskChecker}
 * 
 * @author Andy
 * 
 */
public class Type1DiabetesRisks extends RiskChecker {

public Type1DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {;

public boolean qualifiesForDisease() {;

protected List&lt;PatientRiskFactor&gt; getDiseaseRiskFactors() {;

public String getName() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_Type2DiabetesRisks</id>
            <content>package edu.ncsu.csc.itrust.risk;

import static edu.ncsu.csc.itrust.enums.Ethnicity.AfricanAmerican;
import static edu.ncsu.csc.itrust.enums.Ethnicity.AmericanIndian;
import static edu.ncsu.csc.itrust.enums.Ethnicity.Asian;
import static edu.ncsu.csc.itrust.enums.Ethnicity.Hispanic;
import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.NoHealthRecordsException;
import edu.ncsu.csc.itrust.risk.factors.AgeFactor;
import edu.ncsu.csc.itrust.risk.factors.CholesterolFactor;
import edu.ncsu.csc.itrust.risk.factors.EthnicityFactor;
import edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor;
import edu.ncsu.csc.itrust.risk.factors.HypertensionFactor;
import edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor;
import edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor;
import edu.ncsu.csc.itrust.risk.factors.WeightFactor;
/**
 * Checks to see if the given patient is at risk for Type II Diabetes.
 * For details on what each method does, see {@link RiskChecker}
 * 
 * @author Andy
 * 
 */
public class Type2DiabetesRisks extends RiskChecker {

public Type2DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {;

public boolean qualifiesForDisease() {;

protected List&lt;PatientRiskFactor&gt; getDiseaseRiskFactors() {;

public String getName() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_AgeFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.PatientBean;
/**
 * The risk factor associated with checking if a person is over a particular age
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * @author Andy
 */
public class AgeFactor extends PatientRiskFactor {

private PatientBean patient;
private int age;
public AgeFactor(PatientBean patient, int age) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_ChildhoodInfectionFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Checks if the patient had the given diagnoses during childhood.
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class ChildhoodInfectionFactor extends PatientRiskFactor {

private final double[] icdCodes;
private final long patientID;
private final DAOFactory factory;
public ChildhoodInfectionFactor(DAOFactory factory, long mid, double... icdCodes) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_CholesterolFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.HealthRecord;
/**
 * Checks if cholesterol is over a given threshold for a given patient
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class CholesterolFactor extends PatientRiskFactor {

private static final int hdlThreshold ;
private static final int ldlThreshold ;
private static final int triThreshold ;
private HealthRecord record;
public CholesterolFactor(HealthRecord currentHealthRecord) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_EthnicityFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.enums.Ethnicity;
/**
 * Checks if the ethnicity of a patient matches the one at risk
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class EthnicityFactor extends PatientRiskFactor {

private Ethnicity[] atRisk;
private PatientBean patient;
public EthnicityFactor(PatientBean patient, Ethnicity... atRisks) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_FamilyHistoryFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Checks if a patient has a family history of a given diagnosis range. Delegates straight to the DAO.
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class FamilyHistoryFactor extends PatientRiskFactor {

private long patientID;
private DAOFactory factory;
private double icdUpper;
private double icdLower;
public FamilyHistoryFactor(DAOFactory factory, long patientID, double icdLower, double icdUpper) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_GenderFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.enums.Gender;
/**
 * Checks if the patient's gender matches the given at-risk one.
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class GenderFactor extends PatientRiskFactor {

private PatientBean patient;
private Gender gender;
public GenderFactor(PatientBean patient, Gender gender) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_HypertensionFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.HealthRecord;
/**
 * Checks if the patient's blood pressure is above a given threshold.
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class HypertensionFactor extends PatientRiskFactor {

private static final int systolicThreshold ;
private static final int diastolicThreshold ;
private HealthRecord record;
public HypertensionFactor(HealthRecord currentHealthRecord) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PatientRiskFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

/**
 * Abstract class for risk factors, the hasRiskFactor delegates to the protected version. Caches the result in
 * case it gets checked more than once.
 * 
 * @author Andy
 * 
 */
abstract public class PatientRiskFactor {

private Boolean hasRisk ;
/**
	 * @return A textual description of what the patient's status is that's causing the risk.
	 */
abstract public String getDescription();

/**
	 * @return A boolean indicating whether the patient has the increased risk.
	 */
abstract protected boolean hasFactor();

/**
	 * @return A boolean indicating whether the patient has the increased risk.
	 */
public boolean hasRiskFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_PriorDiagnosisFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Checks for prior diagnoses by delegatin to the DAO
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class PriorDiagnosisFactor extends PatientRiskFactor {

private long patientID;
private DAOFactory factory;
private double lowerICDCode;
private double upperICDCode;
public PriorDiagnosisFactor(DAOFactory factory, long patientID, double lowerICDCode, double upperICDCode) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_SmokingFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
/**
 * Risk factor delegates to the DAO to see if a patient has ever smoked in their life
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class SmokingFactor extends PatientRiskFactor {

private long patientID;
private DAOFactory factory;
public SmokingFactor(DAOFactory factory, long patientID) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
        <artifact>
            <id>CC_WeightFactor</id>
            <content>package edu.ncsu.csc.itrust.risk.factors;

import edu.ncsu.csc.itrust.beans.HealthRecord;
/**
 * Checks the patient's body mass index over the given threshold
 * See {@link PatientRiskFactor} for details on what each method typically does.
 * 
 * @author Andy
 * 
 */
public class WeightFactor extends PatientRiskFactor {

private HealthRecord currentHealthRecord;
private int bmiThreshold;
public WeightFactor(HealthRecord currentHealthRecord, int bmiThreshold) {;

public String getDescription() {;

public boolean hasFactor() {;

}</content>
            <parent_id/>
        </artifact>
    </artifacts>
</artifacts_collection>
